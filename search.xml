<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第1章 肺部感染性疾病（各型肺炎、肺脓肿）</title>
    <url>/shoka/medical/graduate/course01/chapter01/</url>
    <content><![CDATA[<h1 id="总论"><a class="anchor" href="#总论">#</a> 总论</h1><h2 id="痰液的临床意义"><a class="anchor" href="#痰液的临床意义">#</a> 痰液的临床意义</h2><ul><li>无色透明或白色粘液痰：正常人、支气管黏膜轻度炎症</li><li>白色泡沫痰或粘液痰：慢支</li><li><strong>大量黄脓痰</strong>：支扩、肺脓肿 <code>区分两者看病史，长的支扩，短的肺脓肿</code></li><li><strong>铁锈色痰</strong>：肺炎链球菌感染</li><li><strong>红棕色胶冻样痰 / 砖红色</strong>：克雷伯杆菌性肺炎</li><li>恶臭脓痰：厌氧菌感染</li><li><strong>粉红色泡沫痰</strong>：肺水肿</li><li><strong>咖啡样痰</strong>：肺阿米巴病</li><li>果酱样痰：肺吸虫病</li></ul><h2 id="常用的检查方法"><a class="anchor" href="#常用的检查方法">#</a> 常用的检查方法</h2><ul><li><strong>肺容积检查</strong>：肺容积、肺容量</li><li><strong>通气功能</strong>：肺通气量、用力肺活量、最大呼气中段流量、肺泡通气量 <code>老慢支</code></li><li><strong>换气功能检查</strong>：气体分布、通气 / 血流比值（V/Q）、弥散功能 <code>肺炎</code></li><li><strong>小气道功能检查</strong>：闭合容积 CV、最大呼气流速容量曲线 <code>次敏感</code> 、频率依赖性肺顺应性 <code>最敏感</code></li></ul><h2 id="通气功能障碍的鉴别"><a class="anchor" href="#通气功能障碍的鉴别">#</a> 通气功能障碍的鉴别</h2><table><thead><tr><th></th><th>阻塞性通气功能障碍</th><th>限制性通气功能障碍</th></tr></thead><tbody><tr><td>常见疾病</td><td>阻塞性肺疾病</td><td>胸廓畸形、胸膜疾病、肺纤维化</td></tr><tr><td>通气障碍特点</td><td>流速降低为主（FEV<sub>1</sub>/FVC% 降低）</td><td>肺容量减少为主（VC 降低）</td></tr><tr><td>VC</td><td>减低或正常</td><td>滅低</td></tr><tr><td>RV</td><td>增加</td><td>减低</td></tr><tr><td>TLC</td><td>正常或增加</td><td>城低</td></tr><tr><td>RV/TLC</td><td>明显增加</td><td>正常或略増加</td></tr><tr><td>FEV<sub>1</sub></td><td>减低</td><td>正常或增加</td></tr><tr><td>FEV<sub>1</sub>/FVC%</td><td>减低</td><td>正常或増加</td></tr><tr><td>MMFR</td><td>减低</td><td>正常或减低</td></tr></tbody></table><blockquote><p>VC 肺活量，RV 残气量，TLC 肺总量，FEV1 第 1 秒用力呼气容积，FVC 用力肺活量，MMFR 最大呼气中期流速</p></blockquote><blockquote><p>阻塞性通气功能障碍一般是流速降低为主，到了晚期才有容量减低</p></blockquote><h1 id="各型肺炎"><a class="anchor" href="#各型肺炎">#</a> 各型肺炎</h1><table><thead><tr><th></th><th>肺炎链球菌肺炎</th><th>克雷白杆菌肺炎</th><th>肺炎支原体肺炎</th></tr></thead><tbody><tr><td>起病缓急</td><td>急</td><td>急</td><td>缓</td></tr><tr><td>前驱症状</td><td>病前数日上感史</td><td>病前上感症状</td><td>咽痛、头痛、肌肉痛</td></tr><tr><td>发热</td><td>39℃-40℃（稽留热）</td><td>39℃左右</td><td>38℃左右，偶 39℃</td></tr><tr><td>咳嗽咳痰</td><td>铁锈色痰</td><td>红棕色胶冻（砖红）</td><td>少量粘痰，阵发刺激性咳嗽</td></tr><tr><td>疾病特点</td><td>不易形成空洞</td><td>砖红色胶冻痰是特征性病变</td><td>咳嗽为突出症状</td></tr><tr><td>X 线</td><td>肺叶或肺段实变，假空洞征</td><td>肺大叶实变，蜂窝状肺脓肿</td><td>下叶间质炎、支气管炎</td></tr><tr><td>首选药物</td><td>青霉素 G</td><td>氨基糖苷类 + 2、3 代头孢</td><td>红霉素</td></tr><tr><td>次选药物</td><td>喹诺酮类、头孢、万古霉素</td><td>2、3 代头抱</td><td>喹诺酮类、四环素类</td></tr></tbody></table><table><thead><tr><th></th><th>绿脓杆菌肺炎</th><th>军团菌肺炎</th><th>病毒性肺炎</th></tr></thead><tbody><tr><td>起病缓急</td><td>急</td><td>亚急性</td><td>较急、症状轻</td></tr><tr><td>前驱症状</td><td>院内感染、气管插管史</td><td>头痛、全身酸痛、疲乏</td><td>头痛、全身酸痛、疲乏</td></tr><tr><td>发热</td><td>高热</td><td>39℃-40℃、稽留热</td><td>中、低热</td></tr><tr><td>咳嗽咳痰</td><td>绿色脓痰</td><td>少量粘痰，或脓痰、血痰</td><td>少量白色粘液痰</td></tr><tr><td>x 线</td><td>弥漫性支气管肺炎、早期肺脓肿</td><td>肺下叶斑片状浸润、无空洞</td><td>双肺弥漫性结节性浸润</td></tr><tr><td>首选药物</td><td>氨基糖苷类 + 半合成青素</td><td>红霉素</td><td>利巴韦林、阿昔洛韦（无首选）</td></tr><tr><td>次选药物</td><td>头孢、氟诺酮</td><td>利福平、四环素、SMZ</td><td>阿糖腺苷、金刚烷胺（无次选）</td></tr></tbody></table><h2 id="肺炎球菌肺炎的常考特点"><a class="anchor" href="#肺炎球菌肺炎的常考特点">#</a> 肺炎球菌肺炎的常考特点</h2><ul><li><p>发病情况：占社区获得性肺炎的 50%</p></li><li><p>致病力：</p><ul><li>为 G + 球菌，有荚膜，其毒力大小与夹膜中的多糖结构及含量有关</li><li>最易发生大叶性肺炎 —— 致病力是由于多糖荚膜对组织的侵袭作用，青年人多见</li><li>口角鼻周单纯性疱疹（非肋间带状疱疹）</li><li>有败血症者，可出现皮肤黏膜出血点。</li><li>肺实变时叩诊浊音、触觉语颤增强并可闻及支气管呼吸音；消散期可闻及湿啰音。</li></ul></li><li><p>不易形成空洞：肺炎球菌不产生毒素，不引起原发性组织坏死；即不破坏肺泡壁。</p></li><li><p>血清型：86 个（成人：3 型毒力最强，儿童：6、14、19、23）</p></li><li><p>首选药物：</p><ul><li>青霉素 G (PG)，一般为 14 天，或在退热后 3 天停药</li><li>对青霉素过敏者可用氟喹诺酮（左氧氟沙星）、头孢噻<ruby>肟<rt>wò</rt></ruby>、头孢曲松</li></ul></li><li><p>易感染性休克：尤其老年人</p><ul><li>补充血容量（低分子右旋糖酐或 LR）；</li><li>控制感染、血管活性药物；</li><li>激素</li></ul></li></ul><h2 id="葡萄球菌性肺炎和克雷伯杆菌性肺炎的鉴别"><a class="anchor" href="#葡萄球菌性肺炎和克雷伯杆菌性肺炎的鉴别">#</a> 葡萄球菌性肺炎和克雷伯杆菌性肺炎的鉴别</h2><table><thead><tr><th></th><th>葡萄球菌性肺炎</th><th>克雷伯杆菌性肺炎</th></tr></thead><tbody><tr><td>痰液</td><td></td><td>红棕色胶冻痰（砖红）</td></tr><tr><td rowspan="2">X 线</td><td>单个 / 多个液气囊腔</td><td rowspan="2">蜂窝状脓肿</td></tr><tr><td>易变性</td></tr><tr><td rowspan="2">首选药物</td><td>青霉素</td><td rowspan="2">氨基糖苷类 + 半合成青霉素</td></tr><tr><td>耐甲氧西林金葡菌 MRSA 选万古霉素、替考拉宁</td></tr></tbody></table><h2 id="支原体肺炎和病毒性肺炎"><a class="anchor" href="#支原体肺炎和病毒性肺炎">#</a> 支原体肺炎和病毒性肺炎</h2><p>均属于间质性肺炎，都以咳嗽为主要临床症状</p><table><thead><tr><th></th><th>肺炎支原体肺炎</th><th>病毒性肺炎</th></tr></thead><tbody><tr><td>好发季节</td><td>秋冬季，但季节差异性不大</td><td>冬春季，可暴发流行，也可散发</td></tr><tr><td>好发人群</td><td>儿童、青年人</td><td>儿童、成人</td></tr><tr><td>发病率</td><td>占所有肺炎的 10％，非细菌性肺炎的 1/3</td><td>约占住院社区获得性肺炎的 8％</td></tr><tr><td>病原体</td><td>肺炎支原体</td><td>甲乙型流感病毒、腺病毒、副流感病毒、冠状病毒</td></tr><tr><td>部位</td><td>病原体存在于纤毛上皮之间不侵入肺实质</td><td>病毒侵入细支气管上皮引起细支气管炎</td></tr><tr><td>基本病变</td><td>表现为间质性肺炎</td><td>表现为间质性肺炎</td></tr><tr><td>前驱症状</td><td>较缓慢，发热、头痛、乏力、肌痛、耳痛等</td><td>较急，发热、头痛、全身酸痛、倦怠等</td></tr><tr><td>咳嗽</td><td>多为阵发刺激性咳嗽，少量粘液</td><td>咳嗽，少痰、或白色粘液痰</td></tr><tr><td>体征</td><td>无明显体征，严重症状与轻微体征不相称</td><td>常无显著体征，严重者肺部干湿性哕音</td></tr></tbody></table><pre class="mermaid"><svg id="mermaid-1590862904374" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width:570px" viewBox="0 0 570 341"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity:1"><path class="path" d="M231,42.235099337748345L130,72L130,97" marker-end="url(#arrowhead21)" style="fill:none"></path><defs><marker id="arrowhead21" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M331,42.235099337748345L432,72L432,97" marker-end="url(#arrowhead22)" style="fill:none"></path><defs><marker id="arrowhead22" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M130,136L130,161L130,186" marker-end="url(#arrowhead23)" style="fill:none"></path><defs><marker id="arrowhead23" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M432,136L432,161L432,186" marker-end="url(#arrowhead24)" style="fill:none"></path><defs><marker id="arrowhead24" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M130,225L130,259.5L130,294" marker-end="url(#arrowhead25)" style="fill:none"></path><defs><marker id="arrowhead25" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M432,225L432,259.5L432,294" marker-end="url(#arrowhead26)" style="fill:none"></path><defs><marker id="arrowhead26" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform="translate(130,259.5)"><g transform="translate(-56,-9.5)" class="label"><rect rx="0" ry="0" width="112" height="19" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1">间质分泌物刺激</tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g></g><g class="nodes"><g class="node default" id="A" transform="translate(281,27.5)" style="opacity:1"><rect rx="0" ry="0" x="-50" y="-19.5" width="100" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-40,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">间质性肺炎</tspan></text></g></g></g><g class="node default" id="B" transform="translate(130,116.5)" style="opacity:1"><rect rx="0" ry="0" x="-122" y="-19.5" width="244" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-112,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">间质水肿、增宽、毛细血管充血</tspan></text></g></g></g><g class="node default" id="C" transform="translate(432,116.5)" style="opacity:1"><rect rx="0" ry="0" x="-130" y="-19.5" width="260" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-120,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">分泌物储存在间质，进入肺泡较少</tspan></text></g></g></g><g class="node default" id="D" transform="translate(130,205.5)" style="opacity:1"><rect rx="0" ry="0" x="-82" y="-19.5" width="164" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-72,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">病理改变主要在间质</tspan></text></g></g></g><g class="node default" id="E" transform="translate(432,205.5)" style="opacity:1"><rect rx="0" ry="0" x="-58" y="-19.5" width="116" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-48,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">肺泡改变不大</tspan></text></g></g></g><g class="node default" id="F" transform="translate(130,313.5)" style="opacity:1"><rect rx="0" ry="0" x="-42" y="-19.5" width="84" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-32,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">剧烈咳嗽</tspan></text></g></g></g><g class="node default" id="G" transform="translate(432,313.5)" style="opacity:1"><rect rx="0" ry="0" x="-96.8671875" y="-19.5" width="193.734375" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-86.8671875,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">无痰少痰，X 线无特异性</tspan></text></g></g></g></g></g></svg></pre><h2 id="各型首选药"><a class="anchor" href="#各型首选药">#</a> 各型首选药</h2><p><code>支援红军送白糖</code></p><ul><li>支原体、军团菌：红霉（大环内酯类）</li><li>克雷伯杆菌、绿脓杆菌：氨基糖苷类 + 半合成青霉素</li></ul><h1 id="肺脓肿"><a class="anchor" href="#肺脓肿">#</a> 肺脓肿</h1><h2 id="病因及感染途径"><a class="anchor" href="#病因及感染途径">#</a> 病因及感染途径</h2><table><thead><tr><th>感染途径</th><th colspan="2">病原菌</th></tr></thead><tbody><tr><td>吸入性肺脓肿（最多见，占 60％）</td><td colspan="2">多为厌氧菌（占 90％）、放线菌属</td></tr><tr><td>血源性肺脓肿</td><td colspan="2">金黄色葡萄球（最多见）、链球菌、表皮葡萄球菌</td></tr><tr><td rowspan="5">继发性肺脓肿</td><td>某些细菌性肺炎</td><td>金黄色葡萄球菌、铜绿假单胞菌、肺炎克雷白杆菌</td></tr><tr><td colspan="2">支气管扩张、囊肿、阻塞</td></tr><tr><td colspan="2">支气管肺癌</td></tr><tr><td colspan="2">肺结核空洞</td></tr><tr><td colspan="2">邻近器官感染、阿米巴肝脓肿溃破</td></tr></tbody></table><h2 id="临床表现"><a class="anchor" href="#临床表现">#</a> 临床表现</h2><table><thead><tr><th></th><th>肺脓肿</th><th>支气管扩张</th></tr></thead><tbody><tr><td>发病年龄</td><td>壮年，男多于女</td><td>儿童或青年</td></tr><tr><td>起病缓急</td><td>70％-90％为急性起病</td><td>多慢性经过</td></tr><tr><td>典型表现</td><td>高热、咳嗽、咳大量脓臭痰</td><td>慢性咳嗽伴大量脓痰和反复咯血</td></tr><tr><td><p>痰液特性</p></td><td><p>量多（可达 300-500ml/d）<br>脓性臭味痰<br>放置后分 3 层</p></td><td><p>按痰液量分中重度<br>急性感染时可达数百 ml/d<br>合并感染时呈黄绿色臭脓痰<br>放置后分 4 层：上层为泡沫，下悬脓性粘液，中为混浊粘液，底层为坏死组织沉淀物</p></td></tr><tr><td>咯血</td><td>1/3 病例，血源性肺脓肿极少咯血</td><td>50％-70％患者反复咯血．血量不等</td></tr><tr><td><p>体征</p></td><td><p>与脓肿大小和部位有关<br>慢性肺脓肿常有杵状指（趾）</p></td><td><p>早期或干性支扩无异常体征；<br>病重或继发感染者可有湿性啰音；<br>慢性支扩可有杵状指（趾）</p></td></tr><tr><td>致病菌</td><td>吸入性肺脓肿多为厌氧菌，血源性肺脓肿多为金黄色葡萄球菌</td><td>引起感染的常见致病菌为：铜绿假单胞菌、金萄、流感嗜血杆菌、肺炎链球菌、卡他莫拉菌</td></tr><tr><td><p>抗感染治疗</p></td><td><p>吸入性：首选青霉素<br>血源性：耐 β 内酰胺酶青霉素类、头抱<br>阿米巴性：甲硝唑</p></td><td><p>轻症者阿莫西林、1、2 代头孢<br>重症者：头孢他啶、头孢吡肟<br>厌氧菌感染：加甲硝唑或替硝唑</p></td></tr><tr><td><p>脓液引流 / 痰液引流</p></td><td><p>祛痰、雾化、舒张支气管<br>体位引流、纤支镜冲洗引流</p></td><td><p>祛痰、雾化、舒张支气管<br>体位引流、纤支镜冲洗引流</p></td></tr></tbody></table><ul><li>杵状指是由于慢性缺氧引起，急性肺脓肿一般无</li><li>肺脓肿的首选药不是厌氧菌的特效药甲硝唑，而是青霉素</li><li>急性肺脓肿抗菌治疗的疗程是 8-12 周</li><li>治疗原则：抗生素治疗 + 脓液引流</li></ul><hr><h1 id="附加知识点"><a class="anchor" href="#附加知识点">#</a> 附加知识点</h1><ul><li><p>铁锈色痰是肺炎链球菌肺炎的特征性痰液，可有外周血白细胞增高、胸片示右上肺片状阴影，可诊断为肺炎链球菌肺炎。首选青霉素治疗。一般经过治疗后，高热常在 24 小时内消退，或数日内逐渐下降，如体温降而复升或 3 天仍不下降，应考虑肺外感染，如并发脓胸、心包炎或关节炎等。</p></li><li><p>葡萄球菌是革兰染色阳性球菌，可分为凝固酶阳性的葡萄球菌 (主要为金黄色葡萄球菌) 和凝固酶阴性的葡萄球菌 (如表皮葡萄球菌、腐生葡萄球菌等)。葡萄球菌的致病力可用血浆凝固酶来测定，阳性者致病力较强。金黄色葡萄球菌凝固酶阳性，致病力强，是化脓性感染的主要原因。</p></li><li><p>病毒性肺炎为吸入性感染，常有气管 - 支气管炎。病毒性肺炎为间质性炎，感染可波及肺泡，病变吸收后可留有肺纤维化。病毒性肺炎的临床症状一般较轻，突出症状为咳嗽。</p></li><li><p>病毒性肺炎的确诊有赖于：病原学检查，包括病毒分离、血清学检查及病毒抗原检查。血清学检查常用方法是检测特异性 IgG 抗体，由于人体对抗体的产生必需经过一段时间，至少 2-4 周，因此本检测只能作为回顾性诊断，并无早期诊断价值。</p></li><li><p>肺炎衣原体肺炎多见于年老体弱、营养不良等患者，有咽痛、肌痛等症状，肺部一般有阳性体征。</p></li><li><p>肺脓肿根据感染途径不同，分吸入性肺脓肿、血源性肺脓肿和继发性肺脓肿。</p><ul><li><p>吸入性肺脓肿最常见，占 60% 左右。脓肿常为单发。约 1/3 患者有不同程度的咯血，偶有中、大量咯血而突然窒息死亡。患者每日可咳出大量脓臭痰，静置后可分为 3 层 (分为 4 层者为支气管扩张症的痰液特点)。</p></li><li><p>血源性肺脓肿的致病菌以金黄色葡萄球菌最多见 (吸入性肺脓肿的致病菌以厌氧菌最多见)。常表现为两肺外野的多发性脓肿。血源性肺脓肿多先有原发病灶引起的畏寒、高热等感染性中毒症状，经数日或数周后才出现咳嗽、咳痰，痰量不多，极少咯血。</p></li></ul></li></ul>]]></content>
      <categories>
        <category>医学</category>
        <category>研究生入学考试</category>
        <category>西医综合-内科学</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>呼吸系统</tag>
      </tags>
  </entry>
  <entry>
    <title>第1周 程序设计与C++概述</title>
    <url>/shoka/program/cpp/course01/week01/</url>
    <content><![CDATA[<div class="note info"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><a href="https://www.icourse163.org/course/XJTU-46006" target="_blank" rel="noopener">https://www.icourse163.org/course/XJTU-46006</a></p></div><h1 id="课堂笔记"><a class="anchor" href="#课堂笔记">#</a> 课堂笔记</h1><h2 id="计算机语言的分类"><a class="anchor" href="#计算机语言的分类">#</a> 计算机语言的分类</h2><ul><li><p>“翻译” 的两种方式：</p><ul><li><p><strong>编译型语言</strong>：<br>一次将编写的整个程序 &quot;翻译&quot; 成机器语言的指令，保存成文件，以后执行不再 “翻译”，只要执行翻译过的文件就行了。<br>如：Fortran、C、C++、Pascal 等。</p></li><li><p><strong>解释型语言</strong>：<br>翻译一句执行一句，直到执行完所有命令，或遇到错误。<br>如：Basic、ASP、PHP、Python、Java 等。</p></li></ul></li><li><p>编译型语言编程的步骤：</p></li></ul><pre class="mermaid"><svg id="mermaid-1590862908943" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width:610.59px" viewBox="0 0 610.59375 214"><g class="output"><g class="clusters"><g class="cluster" id="subGraph2" transform="translate(511.78125,107)" style="opacity:1"><rect width="181.625" height="198" x="-90.8125" y="-99"></rect><g class="label" transform="translate(0, -85)" id="mermaid-1590862908943Text"><g transform="translate(-4.1953125,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">3</tspan></text></g></g></g><g class="cluster" id="subGraph1" transform="translate(289.34375,107)" style="opacity:1"><rect width="163.25" height="198" x="-81.625" y="-99"></rect><g class="label" transform="translate(0, -85)" id="mermaid-1590862908943Text"><g transform="translate(-4.1953125,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">2</tspan></text></g></g></g><g class="cluster" id="subGraph0" transform="translate(82.859375,107)" style="opacity:1"><rect width="149.71875" height="198" x="-74.859375" y="-99"></rect><g class="label" transform="translate(0, -85)" id="mermaid-1590862908943Text"><g transform="translate(-4.1953125,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">1</tspan></text></g></g></g></g><g class="edgePaths"><g class="edgePath" style="opacity:1"><path class="path" d="M108.859375,62.5L157.71875,62.5L182.71875,62.5L207.71875,62.5L263.34375,62.5" marker-end="url(#arrowhead58)" style="fill:none"></path><defs><marker id="arrowhead58" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M315.34375,62.5L370.96875,62.5L395.96875,62.5L420.96875,62.5L485.78125,62.5" marker-end="url(#arrowhead59)" style="fill:none"></path><defs><marker id="arrowhead59" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M132.71875,151.5L157.71875,151.5L182.71875,151.5L207.71875,151.5L232.71875,151.5" marker-end="url(#arrowhead60)" style="fill:none"></path><defs><marker id="arrowhead60" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M345.96875,151.5L370.96875,151.5L395.96875,151.5L420.96875,151.5L445.96875,151.5" marker-end="url(#arrowhead61)" style="fill:none"></path><defs><marker id="arrowhead61" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g></g><g class="nodes"><g class="node default" id="C" transform="translate(511.78125,62.5)" style="opacity:1"><rect rx="0" ry="0" x="-26" y="-19.5" width="52" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-16,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">连接</tspan></text></g></g></g><g class="node default" id="G" transform="translate(511.78125,151.5)" style="opacity:1"><rect rx="0" ry="0" x="-65.8125" y="-19.5" width="131.625" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-55.8125,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">可执行文件.exe</tspan></text></g></g></g><g class="node default" id="B" transform="translate(289.34375,62.5)" style="opacity:1"><rect rx="0" ry="0" x="-26" y="-19.5" width="52" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-16,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">编译</tspan></text></g></g></g><g class="node default" id="F" transform="translate(289.34375,151.5)" style="opacity:1"><rect rx="0" ry="0" x="-56.625" y="-19.5" width="113.25" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-46.625,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">目标文件.obj</tspan></text></g></g></g><g class="node default" id="A" transform="translate(82.859375,62.5)" style="opacity:1"><rect rx="0" ry="0" x="-26" y="-19.5" width="52" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-16,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">编辑</tspan></text></g></g></g><g class="node default" id="E" transform="translate(82.859375,151.5)" style="opacity:1"><rect rx="0" ry="0" x="-49.859375" y="-19.5" width="99.71875" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-39.859375,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">源文件.cpp</tspan></text></g></g></g></g></g></svg></pre><h2 id="c程序的结构"><a class="anchor" href="#c程序的结构">#</a> C++ 程序的结构</h2><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span> </span><span class="token comment">// 编译预处理 包含基本输入输出库头文件 </span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token comment">// 使用标准库名字空间</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">/* 主函数 */</span><br><span class="token punctuation">{</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello World"</span><span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello C++"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="实例"><a class="anchor" href="#实例">#</a> 实例</h2><h3 id="输入输出字符串"><a class="anchor" href="#输入输出字符串">#</a> 输入输出字符串</h3><ul><li>实例：生日贺卡</li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">char</span> name1<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span>name2<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>	cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>name1<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>	cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>name2<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">"######################################"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span>name1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Happy birthday to you!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">" sincerely yours "</span><span class="token operator">&lt;&lt;</span>name2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">"######################################"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><blockquote><p>要点总结</p></blockquote><ol><li>显示字符串常量</li></ol><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>cout<span class="token operator">&lt;&lt;</span><span class="token string">"***************"</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ol start="2"><li>用符号表示字符串</li></ol><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><span class="token comment">//str 可以表示长度不超过 50 的一串字符</span><br></pre></td></tr></table></figure><blockquote><p>第 2 章，将知道 str 称为字符数组</p></blockquote><ol start="3"><li>输入字符串</li></ol><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>cin<span class="token operator">>></span>str<span class="token punctuation">;</span> <span class="token comment">// 输入一个词</span><br>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入一行</span><br></pre></td></tr></table></figure><ol start="4"><li>输出字符串</li></ol><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>cout<span class="token operator">&lt;&lt;</span>str<span class="token punctuation">;</span><br></pre></td></tr></table></figure><h3 id="变量声明和四则运算"><a class="anchor" href="#变量声明和四则运算">#</a> 变量声明和四则运算</h3><ul><li>实例：加法计算器<br>编写程序，计算两个整数的和。</li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span> <span class="token comment">// 说明用分别 a</span><br>	<span class="token comment">//int a,b; //× 变量不能重复声明</span><br>	cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span> <span class="token comment">// 输入 a,b 的值</span><br>	c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// 计算 a,b 的和</span><br>	cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">// 显示结果 c 的值</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><blockquote><p>要点总结</p></blockquote><ol><li>变量的声明</li></ol><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span> <span class="token comment">// 声明整型变量</span><br><span class="token keyword">double</span> da<span class="token punctuation">,</span> db<span class="token punctuation">,</span> dc<span class="token punctuation">;</span> <span class="token comment">// 声明双精度变量</span><br><span class="token keyword">int</span> d<span class="token punctuation">;</span><br><span class="token keyword">int</span> e<span class="token punctuation">;</span><br></pre></td></tr></table></figure><blockquote><p>C++ 中一个符号只能说明一次，而且先声明，后使用。</p></blockquote><ol start="2"><li>输入 cin</li></ol><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span><br>cin<span class="token operator">>></span>a<span class="token punctuation">;</span><br>cin<span class="token operator">>></span>b<span class="token punctuation">;</span><br></pre></td></tr></table></figure><ol start="3"><li>运算<br>加法 <code>+</code> ，减法 <code>-</code> ， 乘法 <code>*</code> ，除法 <code>/</code> ，求余 <code>%</code></li></ol><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>c<span class="token operator">=</span><span class="token number">128</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 百分号两边的数必须是整数</span><br></pre></td></tr></table></figure><h3 id="数学函数和while循环"><a class="anchor" href="#数学函数和while循环">#</a> 数学函数和 while 循环</h3><ul><li>实例：计算存款本息<br>编写程序，计算银行存款本息。<br>用户输入存款金额 <code>money</code> , 存款期 <code>years</code> 和年利率 <code>rate</code> ，根据公式</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo>=</mo><mi>m</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>y</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>r</mi><mi>a</mi><mi>t</mi><mi>e</mi><msup><mo stretchy="false">)</mo><mrow><mi>y</mi><mi>e</mi><mi>a</mi><mi>r</mi><mi>s</mi></mrow></msup></mrow><annotation encoding="application/x-tex">sum=money(1+rate)^{years}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:.03588em">y</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.02778em">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.714392em"><span style="top:-3.1130000000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:.03588em">y</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:.02778em">r</span><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>计算到期存款本息。</p><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span> </span><span class="token comment">// 数学函数包含在头文件 cmath 中</span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>	<span class="token keyword">double</span> money<span class="token punctuation">,</span>years<span class="token punctuation">,</span>rate<span class="token punctuation">,</span>sum<span class="token punctuation">;</span><span class="token comment">// 声明变量</span><br>	cout<span class="token operator">&lt;&lt;</span> <span class="token string">"请输入本金、存款年限和利息，用空格隔开 "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">// 输入提示</span><br>	cin<span class="token operator">>></span>money<span class="token operator">>></span>years<span class="token operator">>></span>rate<span class="token punctuation">;</span><span class="token comment">// 输入</span><br>	<span class="token keyword">while</span><span class="token punctuation">(</span>money<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><br>	<span class="token punctuation">{</span><br>		sum<span class="token operator">=</span>money<span class="token operator">*</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>rate<span class="token punctuation">)</span><span class="token punctuation">,</span>years<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 计算</span><br>		cout<span class="token operator">&lt;&lt;</span> <span class="token string">"本息共 "</span><span class="token punctuation">;</span><span class="token comment">// 输出提示</span><br>		cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">// 显示</span><br>		cout<span class="token operator">&lt;&lt;</span> <span class="token string">"请输入本金、存款年限和利息，用空格隔开 "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">// 再次输入提示</span><br>		cin<span class="token operator">>></span>money<span class="token operator">>></span>years<span class="token operator">>></span>rate<span class="token punctuation">;</span><span class="token comment">// 再次输入</span><br>	<span class="token punctuation">}</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><blockquote><p>要点总结</p></blockquote><ol><li>数学函数的使用</li></ol><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><br></pre></td></tr></table></figure><p>乘方: <code>pow(x,y)</code><br>正弦: <code>sin(x)</code><br>余弦: <code>cos (x)</code><br>正切: <code>tan (x)</code> , 三角函数的角度单位 x 均为弧度<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">e^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.664392em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.664392em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span> : <code>exp(x)</code><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>e</mi></msub><mi>x</mi></mrow><annotation encoding="application/x-tex">\log_ex</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.93858em;vertical-align:-.24414em"></span><span class="mop"><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.057252em"><span style="top:-2.4558600000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24414em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">x</span></span></span></span>: <code>log(x)</code> e 为底<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><mi>x</mi></mrow><annotation encoding="application/x-tex">\log_{10}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.93858em;vertical-align:-.24414em"></span><span class="mop"><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.20696799999999996em"><span style="top:-2.4558600000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24414em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">x</span></span></span></span> : <code>log10(x)</code> 10 为底<br>平方根: <code>sqrt(x)</code><br>绝对值: <code>fabs(x)</code></p><blockquote><p>函数名字母均小写<br>自变量均为双精度实数， 结果也是双精度实数</p></blockquote><ol start="2"><li>循环，有条件地重复执行一段程序</li></ol><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token operator">&lt;</span>循环体<span class="token operator">></span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ol start="3"><li>编程的好习惯：给用户提示</li></ol><h2 id="c程序的基本要素"><a class="anchor" href="#c程序的基本要素">#</a> C++ 程序的基本要素</h2><h3 id="标识符"><a class="anchor" href="#标识符">#</a> 标识符</h3><ul><li><strong>标识符</strong>：程序中变量、类型、函数和标号的名称。<br>a,b,name,int, char,main,void 等</li><li><strong>关键字</strong>：系统已有的标识符<br>常见关键字：<ul><li>using, namespace, void, return</li><li>int, float, double, char, bool, signed, unsigned, long, short ,const , true, false, sizeof</li><li>if, else, for, do, while, switch, case, continue, break</li><li>class, struct, private, public, this, new, delete</li></ul></li><li><strong>自定义标识符</strong>：自己给变量、函数等起的名字。<br>命名规则：<ul><li>由字母、数字和下划线组成</li><li>第 1 个符号不能是数字</li><li>长度：不同编译器规定不同，但至少识别前 6 个<br>字符，有的长度可达 32 个字符，甚至更长。</li><li>区分大小写（大小写敏感）</li></ul></li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><br><span class="token keyword">int</span> A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">;</span><br><span class="token keyword">double</span> a1<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>c3<span class="token punctuation">;</span><br><span class="token keyword">double</span> table_width<span class="token punctuation">,</span> table_height<span class="token punctuation">;</span><br><span class="token keyword">char</span> _name<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _address<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token number">1</span>a<span class="token punctuation">,</span><span class="token number">2</span>b<span class="token punctuation">,</span><span class="token number">3</span>c<span class="token punctuation">;</span> <span class="token comment">//× 不合法的标识符</span><br></pre></td></tr></table></figure><h3 id="变量和常量"><a class="anchor" href="#变量和常量">#</a> 变量和常量</h3><ul><li><strong>变量</strong>：表示的数据可以改变的符号。</li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> a<span class="token punctuation">;</span><br><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>a<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>cin<span class="token operator">>></span>name；<br>cout<span class="token operator">&lt;&lt;</span>name<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li><strong>常量</strong>：直接写出的数据，以及表示的数据不能改变的符号。</li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello world"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br></pre></td></tr></table></figure><h3 id="运算符和表达式"><a class="anchor" href="#运算符和表达式">#</a> 运算符和表达式</h3><ul><li><strong>运算符</strong>：表示运算的符号<ul><li>算术运算符 <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code></li><li>比较运算符 <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code></li></ul></li><li><strong>表达式</strong>：表示运算的式子<ul><li>可以是一个变量、一个常量 <code>a</code> <code>b</code> <code>5</code></li><li>也可以是用运算符将变量、常量连接起来 <code>3+5</code> <code>a+b</code> <code>a&gt;b</code></li><li>还可以是用运算符将表达式连接起来的式子 <code>(a+b)*(a-b)</code></li><li>表达式中使用圆括号可以改变运算的优先级。括号中的运算比括号外的优先计算。</li></ul></li></ul><h3 id="语句"><a class="anchor" href="#语句">#</a> 语句</h3><ul><li>语句是一个表达完整的命令</li><li>C++ 中，语句的标志就是分号 <code>;</code> ，而不是等号。一个式子后面写上分号，就是一条语句。</li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token comment">// 这是一个说明语句，说明用 a,b 表示整数</span><br>a<span class="token operator">+</span>b <span class="token comment">// 这是一个表达式，虽然能表达求和运算，但运算结果并没有说明如何处理</span><br>c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// 语句，计算 a 和 b 的和，将结果存入 c 中</span><br><br>a<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// 在 C++ 中也是语句，但这个语句没什么作用</span><br>a<span class="token punctuation">;</span> <span class="token comment">// 也是语句，也没什么作用</span><br><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment">// 这是 3 条语句，什么也没有，什么也不做，空语句</span><br>c<span class="token operator">=</span>a<span class="token operator">+</span>b <span class="token comment">// 虽然有等号，但没有分号，也不是语句</span><br></pre></td></tr></table></figure><ul><li>等号也是运算符，等号连接起来的式子是表达式，如 <code>c=a+b</code></li><li>只有加上分号，才是语句 <code>c=a+b;</code></li><li>等号的左边必须是变量<br><code>5=3</code> <code>(a+b)=c+d</code> ×<br><code>a+(b=c+d)</code> <code>a+(b=c)+d</code> √</li></ul><h3 id="输入和输出"><a class="anchor" href="#输入和输出">#</a> 输入和输出</h3><ul><li>输入 <code>cin</code></li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>cin<span class="token operator">>></span>v1<span class="token operator">>></span>V2<span class="token operator">>></span>V3<span class="token operator">>></span>V4<span class="token punctuation">;</span><span class="token comment">//cin 输入流对象 >> 提取运算符</span><br><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><br>cin<span class="token operator">>></span>a<span class="token punctuation">;</span><br>cin<span class="token operator">>></span>b<span class="token punctuation">;</span><br>cin<span class="token operator">>></span>c<span class="token punctuation">;</span><br>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>输出 <code>cout</code></li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>cout<span class="token operator">&lt;&lt;</span>v1<span class="token operator">&lt;&lt;</span>v2<span class="token operator">&lt;&lt;</span>v3<span class="token operator">&lt;&lt;</span>v4<span class="token punctuation">;</span><span class="token comment">//cout 输出流对象 &lt;&lt; 插入运算符</span><br>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">"&lt;&lt;"</span> sum<span class="token operator">:</span>"<span class="token operator">&lt;&lt;</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br></pre></td></tr></table></figure><h3 id="函数"><a class="anchor" href="#函数">#</a> 函数</h3><p>能完成一定功能的有名的程序序列，是组成 C++ 程序的基本单位。</p><ul><li>main 函数</li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><br>	cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span> cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">+</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li><p>系统函数<br><code>sin(x)</code> , <code>cos(x)</code> , <code>exp(x)</code> , <code>sqrt(x)</code></p></li><li><p>自定义函数</p></li></ul><h1 id="课堂讨论"><a class="anchor" href="#课堂讨论">#</a> 课堂讨论</h1><ol><li>自然语言和计算机语言有哪些相似和不同之处？</li></ol><blockquote><p>机器语言与自然语言一样，都具有一定的语法，文法，逻辑规则等。<br>不同点有：</p><ul><li>自然语言是人与人交流的工具，它具有多义性，模糊性，依托人的常识。</li><li>机器语言是计算机能理解的语言，它使计算机按一定的模式工作，依托处理器所支持的指令。<br>比起自然语言，计算机要求更加精准的语法与逻辑规则。<br>错误的输入，如笔误或缺失或多出某些字是不可行的，或者会使得计算机执行的结果错误。</li></ul></blockquote><ol start="2"><li>编译型语言执行效率高还是解释型语言执行效率高？</li></ol><blockquote><p>编译型语言的源代码编译成的机器语言会被保存下来，下次执行时就不需要再编译一次，而是直接执行保存的机器语言，执行效率更高。<br>解释型语言则翻译一句执行一句，直到命令全部执行完或出现错误，不具有高效性，但是利于人理解。</p></blockquote><ol start="3"><li>为什么 C++ 的 main 函数要唯一？</li></ol><blockquote><p>main 函数是主函数，是程序执行的起点。作为程序的执行入口，如果不唯一，那么程序就找不到执行的入口来运行程序，多入口程序不仅会导致程序混乱，而且还会增加内存负担。</p></blockquote><ol start="4"><li>为什么使用 <code>cin.getline()</code> 输入的时候每输入一个数据要回车？而使用 <code>cin&gt;&gt;</code> 输入可以一行数据多个数据？</li></ol><blockquote><p><code>cin.getline()</code> ，可以理解为按行输入，以回车为输入的分界符，当输入完一个数据时需要回车。<br><code>cin&gt;&gt;</code> ，可以理解为按词输入，以空格、回车或 tab 键作为分界符，输入完一个数据以空格分开就行，可以输入在一行。</p></blockquote><h1 id="随堂测验"><a class="anchor" href="#随堂测验">#</a> 随堂测验</h1><ol><li class="quiz"><p>C++ 是一种 <span class="gap"></span> 计算机语言。</p><ul class="options"><li>面向过程的</li><li class="correct">面向对象的</li><li>数据库编程</li><li>网络编程</li></ul></li><li class="quiz"><p>编写 C++ 程序的一般步骤依次是 <span class="gap"></span> 。</p><ul class="options"><li>编辑、调试、编译、运行</li><li class="correct">编辑、编译、连接、运行</li><li>编译、调试、编辑、运行</li><li>编译、编辑、连接、运行</li></ul></li><li class="quiz"><p>下列哪行程序的作用是在屏幕上显示 “Hello world” 这句话。</p><ul class="options"><li><code>#include&lt;iostream&gt;</code></li><li><code>using namespace std;</code></li><li class="correct"><code>cout&lt;&lt;&quot; Hello world &quot;;</code></li><li><code>return 0;</code></li></ul></li><li class="quiz true"><p>C++ 中的 main () 函数有且只能有一个。</p></li><li class="quiz true"><p>main 函数的书写中，main 后面紧跟一对圆括号，里面可以什么都不写，再后面是一对大括号，其中写程序。</p></li><li class="quiz"><p>设在程序中用 address 表示通信地址，说明为 <code>char address[100];</code> 若想输入象 &quot;No.28, Xian Ning Xi Road&quot; 这样（单词间有空格）的地址，应该使用下列哪个语句？</p><ul class="options"><li><code>cin&gt;&gt;address;</code></li><li><code>cin&gt;&gt;address(s,100);</code></li><li><code>cin.getline(s,100);</code></li><li class="correct"><code>cin.getline(address,100);</code></li></ul></li><li class="quiz"><p>若想用 width 和 height 表示屏幕的宽度和高度（单位：像素，整数），在 C++ 中使用下列哪个语句来声明？</p><ul class="options"><li class="correct"><code>int width, height;</code></li><li><code>double width, height;</code></li><li><code>char width, height;</code></li><li><code>char width[40], height[40];</code></li></ul></li><li class="quiz"><p>C++ 中使用数学函数，需要包含的头文件是 <span class="gap"></span> 。</p><ul class="options"><li>iostream</li><li class="correct">cmath</li><li>namespace</li><li>main</li></ul></li><li class="quiz true"><p>C++ 中的每一条语句后面都必须写分号。</p></li><li class="quiz true"><p>C++ 中使用变量，必须先声明，后使用。</p></li></ol><h1 id="单元测验"><a class="anchor" href="#单元测验">#</a> 单元测验</h1><ol><li class="quiz"><p>下列哪项不是 C++ 的语句？</p><ul class="options"><li><code>a+b;</code></li><li><code>a;</code></li><li class="correct"><code>c=a+b</code></li><li><code>c=a+b;</code></li></ul><blockquote><p>语句末尾必须有分号。常量、变量、表达式末尾加分号也是语句。<br>直接一个分号也是语句 —— 空语句。空语句可以增加程序的可读性，可以作为待写的函数体、循环体、语句块。</p></blockquote></li><li class="quiz"><p>设整型变量 a,b,c 已经声明，下列哪项语句的顺序是正确的？</p><ul class="options"><li><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><br> cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">;</span><br> cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span><br></pre></td></tr></table></figure></li><li class="correct"><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span><br>c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><br> cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span><br> cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">;</span><br> c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><br> cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>一般计算的顺序是输入、计算、输出。</p></blockquote></li><li class="quiz"><p>下列哪个符号不是 C++ 的关键字？</p><ul class="options"><li class="correct">distance</li><li>int</li><li>using</li><li>return</li></ul><blockquote><p>语言已经规定其意义的符号，一般是关键字。其他的都见过，有特殊意义了。</p></blockquote></li><li class="quiz"><p>下列哪个不是 C++ 合法的标识符？</p><ul class="options"><li><code>int_stu</code></li><li class="correct"><code>zhao@xjtu</code></li><li><code>_2015</code></li><li><code>_height</code></li></ul><blockquote><p>表示符必须以字母或下划线开始，由字母、数字和下划线组成。</p></blockquote></li><li class="quiz"><p>C++ 程序中 <code>cout&lt;&lt;endl;</code> 的作用是 <span class="gap"></span> 。</p><ul class="options"><li>表示输出结束。</li><li>表示程序结束。</li><li>表示语句结束。</li><li class="correct">表示换行（输出换行符）。</li></ul><blockquote><p>实际是用符号表示数据，是换行符。</p></blockquote></li><li class="quiz"><p>英文单词 terminating 的含义是 <span class="gap"></span> 。</p><ul class="options"><li class="correct">结束、终止</li><li>模仿</li><li>学期</li><li>换行</li></ul><blockquote><p>虽不是英语课，编程不免遇到英文，遇到不会的词及时查一查，一学英语，二解问题，以后遇到，不再困惑。</p></blockquote></li><li class="quiz true"><p>C++ 中变量的名字只能用一个字母表示。</p><blockquote><p>数学中的变量习惯上是一个字母，而程序中的变量可是一串字符，只要符合标识符的命名规则。就是用符号代替数据，是一个代号，不限一个，甚至可以比较长，如 6-32 个等。</p></blockquote></li><li class="quiz false"><p>一行程序中，如果连续写了两个分号，编译时会出错。</p><blockquote><p>连续写两个分号，第 2 个分号就是一条空语句，空语句实际是什么也不做，语法是正确的，编译不会出错。<br>空语句可以增加程序的可读性，可以作为待写的函数体、循环体、语句块。所以，空语句是可以有用的。</p></blockquote></li><li class="quiz true"><p>C++ 中使用变量，必须先声明。</p><blockquote><p>这是语法规定</p></blockquote></li><li class="quiz true"><p>C++ 中的输入可以使用 cin，一个 cin 可以输入多项数据，每项前面加两个大于号。</p><blockquote><p><code>cin&gt;&gt;a&gt;&gt;b;</code> 就是一例。</p></blockquote></li></ol><h1 id="编程作业"><a class="anchor" href="#编程作业">#</a> 编程作业</h1><h2 id="题目1-我爱c20分"><a class="anchor" href="#题目1-我爱c20分">#</a> 题目 1. 我爱 C++（20 分）</h2><ul><li><p><strong>题目内容</strong><br>在屏幕上显示下列两句话</p><blockquote><p>Hello C++.<br>I like programming.</p></blockquote><p>提示：本题与 helloworld 类似，只是显示多行信息。</p></li><li><p><strong>输入格式</strong><br>无</p></li><li><p><strong>输出格式</strong><br>两行，单词间一个空格，行末标点为英文句点，每行末尾均有句点，前面没有空格，大小写严格按给出的写，均为英文符号。</p></li><li><p><strong>输入样例</strong></p></li><li><p><strong>输出样例</strong><br>Hello C++.<br>I like programming.</p></li></ul><h3 id="解题代码"><a class="anchor" href="#解题代码">#</a> 解题代码</h3><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello C++."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">"I like programming."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="题目2-来自系统的问候20分"><a class="anchor" href="#题目2-来自系统的问候20分">#</a> 题目 2. 来自系统的问候（20 分）</h2><ul><li><p><strong>题目内容</strong><br>编写程序，输入一个人的名字，系统显示 <code>Hello ***.</code> 。<br>人名中间可能会有空格。</p><p>程序运行结果如下：</p><blockquote><p>Zhang Wei<br>Hello Zhang Wei.</p></blockquote><p>提示：输入带空格的字符串，用 <code>cin.getline()</code> 。</p></li><li><p><strong>输入格式</strong><br>一个字符串，中间可能有空格。</p></li><li><p><strong>输出格式</strong><br>Hello ***.<br>注意：单词间一个空格，行末紧跟一个英文句点。</p></li><li><p><strong>输入样例</strong><br>Zhang Wei</p></li><li><p><strong>输出样例</strong><br>Hello Zhang Wei.</p></li></ul><h3 id="解题代码-2"><a class="anchor" href="#解题代码-2">#</a> 解题代码</h3><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>	cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello "</span><span class="token operator">&lt;&lt;</span>name<span class="token operator">&lt;&lt;</span><span class="token string">"."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="题目3-乘法计算器20分"><a class="anchor" href="#题目3-乘法计算器20分">#</a> 题目 3. 乘法计算器（20 分）</h2><ul><li><p><strong>题目内容</strong><br>编写一个乘法计算器程序。用户输入两个数，计算它们的乘积并显示。</p><p>程序运行结果如下：</p><blockquote><p>3.4 72<br>244.8</p></blockquote><p>提示：声明三个 double 类型的变量，乘法用 * 号。</p></li><li><p><strong>输入格式</strong><br>两个实数，中间用空格隔开。</p></li><li><p><strong>输出格式</strong><br>计算结果，实数。</p></li><li><p><strong>输入样例</strong><br>3.4 72</p></li><li><p><strong>输出样例</strong><br>244.8</p></li></ul><h3 id="解题代码-3"><a class="anchor" href="#解题代码-3">#</a> 解题代码</h3><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><br>	cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">*</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="题目4-单位换算20分"><a class="anchor" href="#题目4-单位换算20分">#</a> 题目 4. 单位换算（20 分）</h2><ul><li><p><strong>题目内容</strong><br>编写一个程序，将英寸换算为厘米。输入英寸，输出厘米。<br>换算关系： <code>1inch=2.54cm</code></p><p>程序运行结果如下：</p><blockquote><p>14<br>14inch=35.56cm</p></blockquote><p>提示：显示：输入的数、&quot;inch=&quot;、换算结果和 &quot;cm&quot;。</p></li><li><p><strong>输入格式</strong><br>一个实数。</p></li><li><p><strong>输出格式</strong><br>换算式，单位为小写英文字母，等号为英文等号，单位和数字之间没有空格，如：<br>14inch=35.56cm</p></li><li><p><strong>输入样例</strong><br>14</p></li><li><p><strong>输出样例</strong><br>14inch=35.56cm</p></li></ul><h3 id="解题代码-4"><a class="anchor" href="#解题代码-4">#</a> 解题代码</h3><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">int</span> inch<span class="token punctuation">;</span><br>	cin<span class="token operator">>></span>inch<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span>inch<span class="token operator">&lt;&lt;</span><span class="token string">"inch="</span><span class="token operator">&lt;&lt;</span>inch<span class="token operator">*</span><span class="token number">2.54</span><span class="token operator">&lt;&lt;</span><span class="token string">"cm"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="题目5-平方根计算器20分"><a class="anchor" href="#题目5-平方根计算器20分">#</a> 题目 5. 平方根计算器（20 分）</h2><ul><li><p><strong>题目内容</strong><br>编写程序，计算一个正数的平方根。用户输入一个正数（可能为实数），输出它的平方根。</p><p>程序运行结果如下：</p><blockquote><p>2<br>1.41421</p></blockquote><p>提示：开平方使用函数 <code>sqrt(x)</code> ，x 是双精度型，需要包含头文件 <code>cmath</code> 。</p></li><li><p><strong>输入格式</strong><br>一个正数</p></li><li><p><strong>输出格式</strong><br>平方根</p></li><li><p><strong>输入样例</strong><br>2</p></li><li><p><strong>输出样例</strong><br>1.41421</p></li></ul><h3 id="解题代码-5"><a class="anchor" href="#解题代码-5">#</a> 解题代码</h3><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">double</span> num<span class="token punctuation">;</span><br>	cin<span class="token operator">>></span>num<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h1 id="基础练习"><a class="anchor" href="#基础练习">#</a> 基础练习</h1><p>太简单了，再见</p><h1 id="中级练习"><a class="anchor" href="#中级练习">#</a> 中级练习</h1><h2 id="题目1-计算公式的值对数10分"><a class="anchor" href="#题目1-计算公式的值对数10分">#</a> 题目 1. 计算公式的值 (对数)（10 分）</h2><ul><li><p><strong>题目内容</strong><br>输入 x、a，计算以 a 为底 <code>x+sqrt(x*x+1))</code> 的对数 （a&gt;0，a 不等于 1）的函数值。</p><p>提示：C++ 中没有以任意数 a 为底的对数函数，但可以使用换底公式（请自己查）</p></li><li><p><strong>输入格式</strong><br>实数 x，a，之间用空格分隔</p></li><li><p><strong>输出格式</strong><br>计算出的结果</p></li><li><p><strong>输入样例</strong><br>3 10</p></li><li><p><strong>输出样例</strong><br>0.789741</p></li></ul><h3 id="解题代码-6"><a class="anchor" href="#解题代码-6">#</a> 解题代码</h3><blockquote><p>换底公式</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi></msub><mi>b</mi><mo>=</mo><mfrac><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>c</mi></msub><mi>b</mi></mrow><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>c</mi></msub><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\log_ab=\frac{\log_cb}{\log_ca}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.93858em;vertical-align:-.24414em"></span><span class="mop"><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.057252em"><span style="top:-2.4558600000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24414em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.30158em;vertical-align:-.9301400000000001em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em"><span style="top:-2.3139999999999996em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop"><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.057252em"><span style="top:-2.4558600000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24414em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.6769999999999996em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mop"><span class="mop">lo<span style="margin-right:.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.057252em"><span style="top:-2.4558600000000004em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24414em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.9301400000000001em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></blockquote><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">double</span> x<span class="token punctuation">,</span> a<span class="token punctuation">;</span><br>	cin<span class="token operator">>></span>x<span class="token operator">>></span>a<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="题目2-e的近似值10分"><a class="anchor" href="#题目2-e的近似值10分">#</a> 题目 2. e 的近似值（10 分）</h2><ul><li><strong>题目内容</strong><br>输入 n，计算 <code>y=(1+1/n)^n</code> 其中 <code>^</code> 表示乘方。</li><li><strong>输入格式</strong><br>输入整数 n</li><li><strong>输出格式</strong><br>输出 y 的值</li><li><strong>输入样例</strong><br>100</li><li><strong>输出样例</strong><br>2.70481</li></ul><h3 id="解题代码-7"><a class="anchor" href="#解题代码-7">#</a> 解题代码</h3><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">int</span> n<span class="token punctuation">;</span><br>	cin<span class="token operator">>></span>n<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1.0</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1.0 而不是 1/n 的目的是强制 double</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="题目3-计算公式的值三角等10分"><a class="anchor" href="#题目3-计算公式的值三角等10分">#</a> 题目 3. 计算公式的值（三角等）（10 分）</h2><ul><li><strong>题目内容</strong><br>输入大于 0 的数 x (double)，计算<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mroot><mi>x</mi><mn>2</mn></mroot><mo>−</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">y=\sin(x)-\ln(x)+\sqrt[2]{x}-5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.03588em">y</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-.190845em"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.7172060000000001em"><span style="top:-2.8949860000000003em"><span class="pstrut" style="height:2.5em"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.8491550000000001em"><span class="svg-align" style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord" style="padding-left:.833em"><span class="mord mathdefault">x</span></span></span><span style="top:-2.809155em"><span class="pstrut" style="height:3em"></span><span class="hide-tail" style="min-width:.853em;height:1.08em"><svg width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.190845em"><span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">5</span></span></span></span></span></p>的函数值。</li><li><strong>输入格式</strong><br>大于 0 的数 x</li><li><strong>输出格式</strong><br>计算出来的 y</li><li><strong>输入样例</strong><br>1</li><li><strong>输出样例</strong><br>- 3.15853</li></ul><h3 id="解题代码-8"><a class="anchor" href="#解题代码-8">#</a> 解题代码</h3><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">double</span> x<span class="token punctuation">;</span><br>	cin<span class="token operator">>></span>x<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="题目4-计算公式的值开方10分"><a class="anchor" href="#题目4-计算公式的值开方10分">#</a> 题目 4. 计算公式的值（开方）（10 分）</h2><ul><li><p><strong>题目内容</strong><br>输入 x，计算</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mi>x</mi><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>2</mn></mrow></msqrt></mfrac></mrow><annotation encoding="application/x-tex">y=\frac{x}{\sqrt{x^2-3x+2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em"></span><span class="mord mathdefault" style="margin-right:.03588em">y</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:2.03756em;vertical-align:-.93em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em"><span style="top:-2.196611em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.913389em"><span class="svg-align" style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord" style="padding-left:.833em"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.740108em"><span style="top:-2.9890000000000003em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mord">2</span></span></span><span style="top:-2.873389em"><span class="pstrut" style="height:3em"></span><span class="hide-tail" style="min-width:.853em;height:1.08em"><svg width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.12661100000000003em"><span></span></span></span></span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.93em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>的函数值。</p><p>提示：x 的平方通过 x<em>x 来计算，3x 写成表达式时不能省略乘法运算符</em>。</p></li><li><p><strong>输入格式</strong><br>实数 x (x&gt;2, 或者 x&lt;1)</p></li><li><p><strong>输出格式</strong><br>计算出的 y</p></li><li><p><strong>输入样例</strong><br>5</p></li><li><p><strong>输出样例</strong><br>1.44338</p></li></ul><h3 id="解题代码-9"><a class="anchor" href="#解题代码-9">#</a> 解题代码</h3><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">double</span> x<span class="token punctuation">;</span><br>	cin<span class="token operator">>></span>x<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>C++</category>
        <category>计算机程序设计（C++）-西安交通大学</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第2章 支气管扩张症</title>
    <url>/shoka/medical/graduate/course01/chapter02/</url>
    <content><![CDATA[<h1 id="支扩"><a class="anchor" href="#支扩">#</a> 支扩</h1><h2 id="病因"><a class="anchor" href="#病因">#</a> 病因</h2><pre>Error: Evaluation failed: TypeError: Cannot set property 'rank' of undefined
    at n (file:///E:/blog/node_modules/hexo-renderer-markdown-it-ex/lib/markdown-it-mermaid/mermaid.min.js:31:295729)
    at t.exports (file:///E:/blog/node_modules/hexo-renderer-markdown-it-ex/lib/markdown-it-mermaid/mermaid.min.js:31:543999)
    at Object.t.exports (file:///E:/blog/node_modules/hexo-renderer-markdown-it-ex/lib/markdown-it-mermaid/mermaid.min.js:31:601954)
    at longestPath (file:///E:/blog/node_modules/hexo-renderer-markdown-it-ex/lib/markdown-it-mermaid/mermaid.min.js:31:295504)
    at f (file:///E:/blog/node_modules/hexo-renderer-markdown-it-ex/lib/markdown-it-mermaid/mermaid.min.js:41:59139)
    at u (file:///E:/blog/node_modules/hexo-renderer-markdown-it-ex/lib/markdown-it-mermaid/mermaid.min.js:41:58966)
    at t.exports (file:///E:/blog/node_modules/hexo-renderer-markdown-it-ex/lib/markdown-it-mermaid/mermaid.min.js:41:58937)
    at file:///E:/blog/node_modules/hexo-renderer-markdown-it-ex/lib/markdown-it-mermaid/mermaid.min.js:41:45263
    at notime (file:///E:/blog/node_modules/hexo-renderer-markdown-it-ex/lib/markdown-it-mermaid/mermaid.min.js:31:3029)
    at file:///E:/blog/node_modules/hexo-renderer-markdown-it-ex/lib/markdown-it-mermaid/mermaid.min.js:41:45238</pre><h2 id="好发部位"><a class="anchor" href="#好发部位">#</a> 好发部位</h2><ul><li>大量咯痰 ➡️ 支扩、肺脓肿 ➡️ 多见于下叶</li></ul><blockquote><p>痰流到下叶才比较好咳出，同理，体位越低的地方越容易发生肺脓肿</p></blockquote><ul><li><p>无痰 ➡️ 干性支扩 ➡️ 多见于上叶</p></li><li><p>肺脓肿 ➡️ 吸入性多见 ➡️ 多见于<strong>右叶</strong></p></li></ul><blockquote><p>右侧气管几乎是垂直下降，较长且管径较小。左侧气管走行较高，短且管径较大。因此，纤毛的异物（包括细菌）排出功能右侧不如左侧好。同时，掉入异物一般较易进入左肺</p></blockquote><table><tbody><tr><td>支气管扩张</td><td>左下叶和左舌叶支气管</td></tr><tr><td>干性支扩</td><td>左上叶</td></tr><tr><td rowspan="4">吸入性肺脓肿</td><td>右肺（单发）</td></tr><tr><td>仰卧位：右上叶后段或下叶背段</td></tr><tr><td>坐位：右下叶后基底段</td></tr><tr><td>右侧卧位：右上叶前段或后段</td></tr><tr><td>血源性肺脓肿</td><td>两肺外野（多发）</td></tr><tr><td>原发性肺结核</td><td>上叶下部或下叶上部近胸膜处</td></tr><tr><td>继发性肺结核</td><td>上叶尖后段和下叶背段</td></tr></tbody></table><h2 id="辅助检查"><a class="anchor" href="#辅助检查">#</a> 辅助检查</h2><h3 id="x线"><a class="anchor" href="#x线">#</a> X 线</h3><ul><li>早期轻症者胸片：常无特殊发现</li><li>典型胸片：轨道征、囊状扩张呈卷发状</li><li>支气管造影：过去为确诊手段，现在主要用于外科手术前定位</li></ul><h3 id="ct"><a class="anchor" href="#ct">#</a> CT</h3><p>HRCT 可确诊</p><blockquote><p>肺间质性疾病也用 HRCT 确诊</p></blockquote><h3 id="纤支镜"><a class="anchor" href="#纤支镜">#</a> 纤支镜</h3><p>可发现部分患者出血原因、足赛部位，局部灌洗</p><h2 id="治疗"><a class="anchor" href="#治疗">#</a> 治疗</h2><p>原则是控制感染，保持引流通畅，必要时手术治疗。</p><h3 id="体位引流"><a class="anchor" href="#体位引流">#</a> 体位引流</h3><ul><li>根据病变的部位采取不同的体位，原则上应使患肺处于高位，引流支气管开口朝下，以利于痰液流入大支气管和气管排出。</li><li>每日 2～4 次，每次 15-30 分钟。</li><li>体位引流时，间歇作深呼吸后用力咳痰，同时旁人协助用手轻拍患部，可提高引流效果。</li></ul><h3 id="纤支镜吸痰"><a class="anchor" href="#纤支镜吸痰">#</a> 纤支镜吸痰</h3><p>体位引流效果不佳时用</p><h3 id="控制感染"><a class="anchor" href="#控制感染">#</a> 控制感染</h3><p>急性感染期主要措施</p><h3 id="手术"><a class="anchor" href="#手术">#</a> 手术</h3><ul><li>反复呼吸道急性感染或反复大咯血</li><li>患者病变范围局限</li><li>药物治疗不能控制的大咯血</li></ul><h1 id="呼吸系统解题思路"><a class="anchor" href="#呼吸系统解题思路">#</a> 呼吸系统解题思路</h1><pre class="mermaid"><svg id="mermaid-1590862917517" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width:324px" viewBox="0 0 324 287"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity:1"><path class="path" d="M162,63L162,97.5L162,132" marker-end="url(#arrowhead16)" style="fill:none"></path><defs><marker id="arrowhead16" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M136.36111111111111,171L91,205.5L91,240" marker-end="url(#arrowhead17)" style="fill:none"></path><defs><marker id="arrowhead17" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M187.63888888888889,171L233,205.5L233,240" marker-end="url(#arrowhead18)" style="fill:none"></path><defs><marker id="arrowhead18" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity:1" transform="translate(162,97.5)"><g transform="translate(-24,-9.5)" class="label"><rect rx="0" ry="0" width="48" height="19" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1">病程短</tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform="translate(91,205.5)"><g transform="translate(-32,-9.5)" class="label"><rect rx="0" ry="0" width="64" height="19" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1">大量脓痰</tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform="translate(233,205.5)"><g transform="translate(-36.453125,-9.5)" class="label"><rect rx="0" ry="0" width="72.90625" height="19" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1">痰液、X线</tspan></text></g></g></g><g class="nodes"><g class="node default" id="A" transform="translate(162,35.5)" style="opacity:1"><rect rx="0" ry="0" x="-154" y="-27.5" width="308" height="55" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-144,-17.5)"><text><tspan xml:space="preserve" dy="1em" x="1">老慢支、肺气肿、支扩、支喘、肺脓肿、</tspan><tspan xml:space="preserve" dy="1em" x="1">肺炎、肺结核、肺癌、间质性肺疾病</tspan></text></g></g></g><g class="node default" id="B" transform="translate(162,151.5)" style="opacity:1"><rect rx="0" ry="0" x="-58" y="-19.5" width="116" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-48,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">肺脓肿、肺炎</tspan></text></g></g></g><g class="node default" id="C" transform="translate(91,259.5)" style="opacity:1"><rect rx="0" ry="0" x="-34" y="-19.5" width="68" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-24,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">肺脓肿</tspan></text></g></g></g><g class="node default" id="D" transform="translate(233,259.5)" style="opacity:1"><rect rx="0" ry="0" x="-58" y="-19.5" width="116" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-48,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">鉴别各型肺炎</tspan></text></g></g></g></g></g></svg></pre><table><thead><tr><th>特异临床表现</th><th>对应疾病</th></tr></thead><tbody><tr><td>大量脓痰</td><td>肺脓肿、支扩（大量咯血）</td></tr><tr><td>剧烈咳嗽无痰或少量</td><td>病毒性肺炎、支原体肺炎</td></tr><tr><td>长期低热盗汗</td><td>肺结核</td></tr><tr><td>固定局限性湿啰音</td><td>支扩、中心型肺癌</td></tr><tr><td>满布哮鸣音</td><td>支喘</td></tr><tr><td>Velcro 啰音</td><td>间质性肺疾病</td></tr><tr><td>P2 亢进</td><td>肺心病</td></tr></tbody></table><hr><h1 id="附加知识点"><a class="anchor" href="#附加知识点">#</a> 附加知识点</h1><ul><li><p>早期或干性支气管扩张可无异常肺部体征。病变重或继发感染时可闻及下胸部、背部固定而持久的局限性粗湿啰音。有时闻及哮鸣音。部分慢性患者伴有柞状指 (趾)。其中最有诊断意义的体征是背部固定持久的局限性粗湿啰音。</p></li><li><p>咳大量脓痰的常见疾病有两个，即支气管扩张和肺脓肿。首先排除慢性支气管炎和肺气肿。吸入性肺脓肿 1/3 的患者有不同程度咯血。体检可闻及双肺底局限性粗湿啰音，为支气管扩张的典型体征。</p></li><li><p>支气管造影可直接显像扩张的支气管，为确诊支气管扩张的经典方法，但由于属于有创检查，现已被敏感性更高的高分辨 CT (HRCT) 所取代。胸部断层扫描常用于肺部肿块的鉴别，不能用于支气管扩张的诊断。胸腔镜取活组织检查为有创检查，且不能确诊支气管扩张。</p></li><li><p>支气管扩张的严重程度可根据痰量估计： 轻度 &lt;10ml/d，中度为 10-50ml/d , 重度&gt; 150ml/d。</p></li><li><p>支气管扩张的治疗原则是治疗基础疾病、控制感染、改善气流受限、清除气道分泌物等。急性感染期的主要治疗措施是控制感染。使用支气管舒张剂、体位引流都是保持呼吸道通畅的方法。</p></li><li><p>支气管扩张早期轻症患者胸部平片常无异常发现。支气管柱状扩张的典型 X 线表现为 “双轨征”，系增厚的支气管壁影；囊状支气管扩张的气道表现为显著的囊腔，腔内可存在气液平面。</p></li></ul>]]></content>
      <categories>
        <category>医学</category>
        <category>研究生入学考试</category>
        <category>西医综合-内科学</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>呼吸系统</tag>
      </tags>
  </entry>
  <entry>
    <title>第2周 简单信息的表示和基本运算</title>
    <url>/shoka/program/cpp/course01/week02/</url>
    <content><![CDATA[<h1 id="课堂笔记"><a class="anchor" href="#课堂笔记">#</a> 课堂笔记</h1><h2 id="数据类型"><a class="anchor" href="#数据类型">#</a> 数据类型</h2><blockquote><p>不同的表示形式<br>不同的存储空间<br>不同的运算</p></blockquote><h3 id="整数-int"><a class="anchor" href="#整数-int">#</a> 整数 int</h3><table><thead><tr><th>类型</th><th>类型名<sup>类型说明符</sup></th><th>字节数<sup> win32 位</sup></th><th>数值范围</th></tr></thead><tbody><tr><td>整型</td><td>int</td><td>4</td><td>-2<sup>31</sup>(-2147483648)～2<sup>31</sup>-1(2147483647)</td></tr><tr><td>短整型</td><td>short 或 short int</td><td>2</td><td>-32768 ～ 32767</td></tr><tr><td>长整型</td><td>long 或 long int</td><td>4</td><td>-2<sup>31</sup>～ 2<sup>31</sup>-1</td></tr><tr><td>无符号整型</td><td>unsigned [int]</td><td>4</td><td>0～ 2<sup>32</sup>-1</td></tr><tr><td>无符号短整型</td><td>unsigned short [int]</td><td>2</td><td>0～ 65535</td></tr><tr><td>无符号长整型</td><td>unsigned long [int]</td><td>4</td><td>0～ 2<sup>32</sup>-1</td></tr></tbody></table><blockquote><p>表示的数较小，就用短整型<br>表示的数较大，就用整型或长整型<br>表示的数均是非负数，就用无符号型</p><p>方括号表示可选，如 unsigned [int]，表示使用 <code>unsigned int</code> 也可以，使用 <code>unsigned</code> 也可以</p></blockquote><ul><li>整型数：一个数不带小数点，可以带正负号。如： <code>1</code> , <code>12</code> , <code>+123</code> , <code>-1234</code></li><li>十六进制整数：<strong>前缀</strong> <code>0x</code> (x 大小写均可)。如： <code>0xFF</code> , <code>0x10</code> , <code>0x21</code> , <code>-0XFF</code> , <code>-0X10</code> , <code>-0X21</code></li><li>八进制整数：<strong>前缀</strong> <code>0</code> 。如： <code>010</code> , <code>021</code> , <code>-010</code> , <code>-021</code></li><li>十进制、十六进制、八进制，没小数点，都是整型，都占 4 个字节。<br>如： <code>16</code> ， <code>0x10</code> , <code>020</code> 在计算机中存的都是 16 这个数。</li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>cout<span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token number">0x10</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token number">020</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><span class="token comment">// 输出 16 16 16</span><br></pre></td></tr></table></figure><ul><li>无符号整型数：加<strong>后缀</strong> <code>U</code> 或 <code>u</code> 。如： <code>1U</code> , <code>12U</code> , <code>123U</code> , <code>2014u</code><br>无符号，就意味着可以写绝对值更大的数。</li></ul><h3 id="实数-float-double"><a class="anchor" href="#实数-float-double">#</a> 实数 float double</h3><p>C++ 采用 IEEE754 标准，有两种格式：</p><table><thead><tr><th>类型</th><th>类型名<sup>类型说明符</sup></th><th>字节数</th><th>数值范围</th></tr></thead><tbody><tr><td>单精度浮点型</td><td>float</td><td>4</td><td>±3.4×10<sup>-38</sup> ～ ± 3.4×10<sup>38</sup></td></tr><tr><td>双精度浮点型</td><td>double</td><td>8</td><td>±1.8×10<sup>-308</sup> ～ ±1.8×10<sup>308</sup></td></tr></tbody></table><ul><li>双精度数：数据带小数点<ul><li><p>小数形式： <code>1.0</code> , <code>1.</code> , <code>0.1</code> , <code>.1</code></p><blockquote><p><code>1</code> 是整数型，占 4 个字节； <code>1.</code> 是双精度浮点型，占 8 个字节<br><code>1/2</code> 和 <code>1.0/2</code> 的运算结果不一样</p></blockquote></li><li><p>指数形式： <code>1.2E-2</code> 表示 1.2×10<sup>-2</sup>， <code>1.2e+2</code> 表示 1.2×10<sup>2</sup>， <code>-1.2E2</code> 表示 - 1.2×10<sup>2</sup></p></li></ul></li><li>单精度数：带小数点，加后缀 <code>F</code> 或 <code>f</code> ，如 <code>12.5F</code> ， <code>1.25E-2F</code> ， <code>-12.5f</code></li></ul><h3 id="字符-char"><a class="anchor" href="#字符-char">#</a> 字符 char</h3><p>字符型 char 是<strong>单个字符</strong>的表示。</p><ul><li><p><strong>方法</strong>：<br>将字母写在一对单引号中表示字符，如： <code>'A'</code> , <code>'B'</code> , <code>'C'</code> ， <code>'a'</code> , <code>'b'</code> , <code>'c'</code> ， <code>'0'</code> , <code>'1'</code> , <code>'2'</code> , <code>'3'</code> ， <code>'#'</code> , <code>'$'</code> , <code>'%'</code></p></li><li><p><strong>字节数</strong>：<br>每个字符占一个字节，保存英文字符的 ASCII 码值。</p><blockquote><p>实际也是一个整数，可以参与整型数能进行的运算，如 <code>'a'+1</code> 。</p></blockquote></li><li><p><strong>注意</strong>：</p><ul><li><code>'a'</code> 和 <code>a</code> 是不一样的： <code>'a'</code> 是字符，表示 a 本身， <code>a</code> 标识符，如变量，代表别的数据</li><li><code>'0'</code> 和 <code>0</code> 是有本质区别的：<br><code>'0'</code> ，是字符，1 字节，存 ASCII 码 <code>48</code> ，二进制 <code>0011 0000</code><br><code>0</code> ，是整数，4 字节，存的是 <code>0</code> ，二进制 <code>0000...0</code> （32 个 0）</li></ul></li></ul><table><thead><tr><th>类型</th><th>类型名<sup>类型说明符</sup></th><th>字节数</th><th>数值范围</th></tr></thead><tbody><tr><td>字符型</td><td>char</td><td>1</td><td>-128 ～127</td></tr><tr><td>无符号字符型</td><td>unsigned char</td><td>1</td><td>0 ～255</td></tr></tbody></table><h4 id="转义字符"><a class="anchor" href="#转义字符">#</a> 转义字符</h4><p>用一个反斜杠 + 一个字母 (或数字) 表示，它也是<strong> 1 个字符</strong>。</p><blockquote><ul><li>有些 ASCII 符号是不可显示的，如换行符、回车符、退格符、水平制表符等。</li><li>有些是有的特殊意义的，比如单引号、双引号、反斜杠等。</li></ul></blockquote><table><thead><tr><th>转义字符</th><th>表示</th><th>转义字符</th><th>表示</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行符</td><td><code>\r</code></td><td>回车</td></tr><tr><td><code>\b</code></td><td>退格</td><td><code>\t</code></td><td>水平制表符</td></tr><tr><td><code>\'</code></td><td>单引号</td><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\0</code></td><td>空字符 <sup>字符串的结束符</sup></td><td><code>\f</code></td><td>分页符</td></tr></tbody></table><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre>cout<span class="token operator">&lt;&lt;</span><span class="token string">'\''</span><span class="token punctuation">;</span> <span class="token comment">// 显示单引号</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">'\"'</span><span class="token punctuation">;</span> <span class="token comment">// 显示双引号</span><br><br><span class="token comment">// 将 "Hello World" 显示到两行上</span><br><span class="token comment">// 方法 1</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">"World"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><span class="token comment">// 方法 2</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello"</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token string">"World"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><span class="token comment">// 方法 3</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello \nWorld"</span><span class="token punctuation">;</span><br><br><span class="token comment">/*<br>显示<br>1234 12  567<br>12   143 12<br>按列对齐<br>*/</span><br><br><span class="token comment">// 方法 1，加入空格，需要自己数空格</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token number">1234</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token number">567</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span><span class="token number">143</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><span class="token comment">// 方法 2，加入 \t，相当于每个间隔 8 位</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token number">1234</span><span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span><span class="token number">567</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span><span class="token number">143</span><span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><br><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">"1-abcde\n#12345"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><span class="token comment">/* 显示内容：<br>1-abcde<br>#12345<br>*/</span><br><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">"2-abcde\r#12345"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><span class="token comment">/* 显示内容：<br>#12345<br>备注：显示到 \r 时回车到本行第一个字符，后续内容覆盖显示<br>*/</span><br><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">"3-abcde\t#12345"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><span class="token comment">/* 显示内容：<br>3-abcde	#12345<br>*/</span><br><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">"4-abcde\f#12345"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><span class="token comment">/* 屏幕显示内容：<br>4-abcde#12345<br>备注：打印机上到 \f 则会换页<br>*/</span><br><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">"5-abcde\b#12345"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><span class="token comment">/* 显示内容：<br>5-abcd#12345<br>备注：显示到 \b 时退格到 e，接着覆盖显示后续内容<br>*/</span><br><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">"9-abcde\0#12345"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><span class="token comment">/* 显示内容：<br>10-abcde<br>备注：显示到 \0 时，表示字符串已经结束，后续内容不再显示<br>*/</span><br><br>cout<span class="token operator">&lt;&lt;</span><span class="token string">"10-abcde\141#12345"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br><span class="token comment">/* 显示内容：<br>10-abcdea#123456<br>备注：显示到 \141 表示一个八进制数，转换为十进制为 97，显示的是 a<br>*/</span><br></pre></td></tr></table></figure><h3 id="字符串"><a class="anchor" href="#字符串">#</a> 字符串</h3><p>是连续的<strong>多个字符</strong></p><ul><li><strong>方法</strong>：<br>字符串写在一对双引号之间，如 <code>&quot;Hello World&quot;</code> <code>&quot;程序设计&quot;</code></li><li><strong>字节数</strong>：<ul><li>字符串占的字节数等于 <code>字符串长度+1</code></li></ul></li></ul><blockquote><p>为什么 + 1？</p><ul><li>末尾加了一个结束符，用空字符 <code>'\0'</code> <sup>ASCII 码第一个字符</sup>表示，数值上是 0。</li><li>空字符 <code>'\0'</code> ，什么也没有，ASCII 码值为 0；<br>空格 <code>' '</code> ，占一个字符位，不显示图案，ASCII 码值为 32，两者不同。</li></ul></blockquote><table><thead><tr><th>H</th><th>e</th><th>l</th><th>l</th><th>o</th><th></th><th>w</th><th>o</th><th>r</th><th>l</th><th>d</th><th>'\0'</th></tr></thead></table><blockquote><ul><li><code>&quot;Hello World&quot;</code> ，长度 11 (10 个字母 + 1 个空格)，占 12 字节</li><li><code>&quot;程序设计&quot;</code> ，长度 8 (4 个汉字 8 字节)，占 9 个字节</li></ul></blockquote><h3 id="逻辑型布尔型bool"><a class="anchor" href="#逻辑型布尔型bool">#</a> 逻辑型（布尔型）bool</h3><p>表示 “真”，“假” 这样判断的结果</p><ul><li>取值：<br>true，表示 &quot;真&quot;<br>false，表示&quot; 假 &quot;</li><li>存储：<br>true，存的是 1<br>false，存的是 0</li><li>非 0 数值，当逻辑值相当于 true</li><li>数值 0，当逻辑值相当于 fasle</li><li>逻辑型数存放的实际也是整数，可以进行数学运算</li></ul><h3 id="计算字节数-sizeof"><a class="anchor" href="#计算字节数-sizeof">#</a> 计算字节数 sizeof ()</h3><ul><li>C++ 没有规定不同类型的数占的字节数</li><li>字节数会因计算机系统、编译器的不同而不同</li><li>用 <code>sizeof()</code> <strong>运算符</strong>测试某类型数所占字节数</li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>类型名<span class="token operator">></span><span class="token punctuation">)</span> <span class="token comment">// 类型占字节数</span><br><br>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">// 整型数的字节数</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token punctuation">;</span><span class="token comment">// 短整型的字节数</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>数据<span class="token operator">></span><span class="token punctuation">)</span><span class="token comment">// 数据的字节数</span><br><br>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"程序设计"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br></pre></td></tr></table></figure><blockquote><p>sizeof 用法很像函数，但 C++ 却称它是运算符。<br>sizeof (常量、变量、表达式) 都可。</p></blockquote><h2 id="数据表示方法"><a class="anchor" href="#数据表示方法">#</a> 数据表示方法</h2><p>常量指不能改变的量，变量指值可以变的量。</p><h3 id="字面常量"><a class="anchor" href="#字面常量">#</a> 字面常量</h3><p>字面量、直接常量：直接写出的数据。</p><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span><br><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">1.3</span><span class="token punctuation">;</span><br><span class="token string">"Hello world!"</span><span class="token punctuation">,</span><span class="token string">"C++"</span><span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token number">2015</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><h3 id="符号常量-const-define"><a class="anchor" href="#符号常量-const-define">#</a> 符号常量 const #define</h3><p>用符号表示数据，一旦确定了表示哪个数据，以后就不能再改变。</p><ul><li>说明方法一 <code>const</code></li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">const</span> <span class="token operator">&lt;</span>类型说明符<span class="token operator">></span> <span class="token operator">&lt;</span>符号常量名<span class="token operator">></span> <span class="token operator">=</span><span class="token operator">&lt;</span>数据<span class="token operator">></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><br><span class="token keyword">const</span> <span class="token keyword">double</span> pai<span class="token operator">=</span><span class="token number">3.1415926</span><span class="token punctuation">;</span><br><span class="token keyword">const</span> <span class="token keyword">char</span> A<span class="token operator">=</span><span class="token string">'E'</span><span class="token punctuation">;</span><br><span class="token keyword">const</span> <span class="token keyword">char</span> CPP<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"C++ Programming"</span><span class="token punctuation">;</span><br><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> K<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><br><br><span class="token comment">// 以下为错误的说明语句</span><br>N<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span><br>pai<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span><br>A<span class="token operator">=</span><span class="token string">'F'</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><blockquote><p>行末有分号，是语句</p></blockquote><ul><li>说明方法二 <code>#define</code></li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token comment">// 在 main 函数前</span><br><span class="token macro property">#<span class="token directive keyword">define</span> &lt;符号名称> &lt;数据></span><br><br><span class="token macro property">#<span class="token directive keyword">define</span> PAI 3.14</span><br></pre></td></tr></table></figure><blockquote><p>注意：行末没有分号，这<strong>不是 C++ 语句</strong>，称为预处理。<br>程序编译时，先将 &lt;符号名称&gt; 全部替换为 &lt; 数据 &gt;，然后才正式编译，所以这样的说明称为<strong>编译预处理</strong>。</p></blockquote><h3 id="变量"><a class="anchor" href="#变量">#</a> 变量</h3><p>变量是用符号表示数据，它表示的数据是可以变的。</p><ul><li>变量的<strong>说明</strong><br>也叫变量的声明，意味着编译系统会给这个变量在内存中分配一个存储单元。所以变量的声明也叫变量的定义。</li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token operator">&lt;</span>类型说明符<span class="token operator">></span> <span class="token operator">&lt;</span>变量名表<span class="token operator">></span> <span class="token punctuation">;</span><br><br><span class="token keyword">int</span> a<span class="token punctuation">;</span><br><span class="token keyword">double</span> d1<span class="token punctuation">,</span>d2<span class="token punctuation">;</span><br><span class="token keyword">char</span> c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>变量的<strong>初始化</strong><br>在声明变量的同时说明它代表的数据是什么。</li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token operator">&lt;</span>类型说明符<span class="token operator">></span> <span class="token operator">&lt;</span>变量名<span class="token number">1</span><span class="token operator">>=</span><span class="token operator">&lt;</span>值或表达式<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>变量名<span class="token number">2</span><span class="token operator">>=</span><span class="token operator">&lt;</span>值或表达式<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><br><span class="token keyword">double</span> pai<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">2.71828</span><span class="token punctuation">;</span><br><span class="token keyword">char</span> A<span class="token operator">=</span><span class="token string">'?'</span><span class="token punctuation">,</span> B<span class="token operator">=</span><span class="token string">'%'</span><span class="token punctuation">;</span><br>cout<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token operator">*</span>pai<span class="token operator">*</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>变量的<strong>赋值</strong><br>等号 <code>=</code> 称为赋值运算符，其作用之一是将右边表达式的值，放到左边变量的存储单元中去。<br>表达式：用运算符连接起来的式子，单个变量、常量也是表达式。</li></ul><figure class="highlight cpp"><figcaption><span class="lang">C++</span></figcaption><table><tr><td class="code"><pre><span class="token operator">&lt;</span>变量名<span class="token operator">>=</span><span class="token operator">&lt;</span>值或表达式<span class="token operator">></span><span class="token punctuation">;</span><br><br><span class="token keyword">const</span> <span class="token keyword">double</span> PAI<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// 声明常量 PAI</span><br><span class="token keyword">double</span> r<span class="token punctuation">,</span> area<span class="token punctuation">;</span> <span class="token comment">// 声明变量 r，area 分别表示半径和面积</span><br>r<span class="token operator">=</span><span class="token number">5.0</span><span class="token punctuation">;</span> <span class="token comment">// 为 r 赋值</span><br>cin<span class="token operator">>></span>r<span class="token punctuation">;</span> <span class="token comment">// 通过输入为 r 赋值</span><br>area<span class="token operator">=</span>PAI<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span> <span class="token comment">// 计算圆的面积并赋值给 area</span><br>cout<span class="token operator">&lt;&lt;</span>area<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">// 显示结果</span><br></pre></td></tr></table></figure><ul><li>使用<strong>注意</strong>点</li></ul><ol><li>先定义，再使用</li><li>只能定义一次，不能重复定义</li><li>先赋值，再参与计算</li><li>变量可以多次赋值，而常量是不能赋值的</li><li>变量的定义可以出现在使用前的任何地方，但建议在程序的开始定义变量</li><li>少用或不用字面常量</li></ol><h2 id="运算"><a class="anchor" href="#运算">#</a> 运算</h2><h3 id="算术运算"><a class="anchor" href="#算术运算">#</a> 算术运算</h3><ul><li>算术运算包括加 <code>+</code> 、减 <code>-</code> 、乘 <code>*</code> 、除 <code>/</code> 、求余数 <code>%</code> 、乘方、指数、对数、三角函数等。</li><li>运算符作用的对象称为<strong>操作数</strong>， <code>%</code> 运算的两个操作数，必须都是整数</li></ul><blockquote><p>注意：</p><ol><li>乘法运算符不能省略，数学中写 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">b^2-4ac</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.897438em;vertical-align:-.08333em"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0"></span><span class="mord">4</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span></span></span></span>，程序中应写为 <code>b*b-4.0*a*c</code></li><li>除数是表达式时，注意加括号，例如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>x</mi><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{x}{2a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-.345em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.695392em"><span style="top:-2.6550000000000002em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:.04em"></span></span><span style="top:-3.394em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，应写为 <code>x/2.0/a</code> 或 <code>x/(2.0*a)</code> ，不能写成 <code>x/2*a</code> 或 <code>x/2a</code></li></ol></blockquote><h3 id="数学函数-includecmath"><a class="anchor" href="#数学函数-includecmath">#</a> 数学函数 #include&lt;cmath&gt;</h3><ul><li>C++ 中没有乘方运算符，也没有指数、对数、三角函数的运算符，它们是通过函数的调用实现的。如</li></ul><p><code>pow(x,n)</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">x^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.664392em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.664392em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><br><code>exp(x)</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">e^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.664392em;vertical-align:0"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.664392em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span><br><code>log(x)</code> x 的自然对数的对数<br><code>log10(x)</code> x 的常用对数<br><code>sin(x)</code> x 的正弦（弧度）<br><code>cos(x)</code> x 的余弦（弧度）<br><code>tan(x)</code> x 的正切（弧度）<br><code>1/tan(x)</code> 余切<br><code>asin(x)</code> 反正弦函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x∈[-1,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.5782em;vertical-align:-.0391em"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.16666666666666666em"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></p><figure class="highlight cpp"><figcaption><span class="lang">C++</span><span>undefined</span></figcaption><table><tr><td class="code"><pre><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><br><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span> </span><span class="token comment">// 数学函数包含在头文件 cmath 中</span><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>	<span class="token keyword">double</span> x<span class="token punctuation">;</span><br>	cin<span class="token operator">>></span>x<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">"sin(x)="</span><span class="token operator">&lt;&lt;</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">"cos(x)="</span><span class="token operator">&lt;&lt;</span><span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	cout<span class="token operator">&lt;&lt;</span><span class="token string">"tan(x)="</span><span class="token operator">&lt;&lt;</span><span class="token function">tan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><br>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h1 id="课堂讨论"><a class="anchor" href="#课堂讨论">#</a> 课堂讨论</h1><ol><li>说说数据和数据类型的区别和联系？为什么要有数据类型？</li></ol><blockquote><ul><li>区别：<br>数据：具体的数字或字符，如 <code>1</code> <code>2</code> <code>3</code> 等等。<br>数据类型：是对数据的分类，包括整型、浮点型、字符型、布尔型等。</li><li>联系：<br>数据类型是具有相同性质数据的一个集合。</li><li>为什么要有数据类型？<br>有了数据类型，可以将数据进行分类。分成所需内存大小不同的数据，可节省空间、充分利用内存，加快电脑的编译速度。</li></ul></blockquote><ol start="2"><li>整数，有符号，在计算机中是如何存储的？</li></ol><blockquote><ul><li><p>计算机中整数是以二进制补码形式进行存储的。</p></li><li><p>计算机中将整数分为无符号整数 (unsigned) 和有符号整数 (signed)。</p><ul><li>对于无符号整数，它的原码、反码、补码都是相同的，直接采用其二进制形式表示即可。</li><li>对于有符号整数，规定取最高位作为其符号位，若最高位为 0 表示正数，否则为负数。<br>其原码、反码、补码之间的关系是：反码等于原码除符号位全部取反；补码等于反码 + 1。</li></ul><p>例子：</p><ul><li>计算机中存一个字节的 <code>1</code> ：<br>0 <sup>符号位</sup> 000000 <sup>补足的 0</sup> 1 <sup>1 的二进制值</sup><br>正数存的其实也是补码，不过正数的补码即是它本身<br>所以计算机就存： <code>00000001</code></li><li>计算机中存一个字节的 <code>-1</code> ：<br>先取 <code>+1</code> 的值：<br>0 <sup>符号位</sup> 000000 <sup>补足的 0</sup> 1 <sup>1 的二进制值</sup><br>取反：<br>1 <sup>取反</sup> 111111<sup> 取反</sup> 0 <sup>取反</sup><br>取补码：即反码 + 1<br>1 111111 1<br>所以计算机就存： <code>11111111</code></li></ul></li></ul></blockquote><ol start="3"><li>什么是浮点数？浮点数在计算机中是如何存储的？</li></ol><blockquote><ul><li>浮点数是属于有理数中某特定子集的数的数字表示，在计算机中用以近似表示任意某个实数。</li><li>浮点数的存储有单精度 float 类型和双精度 double 类型，这两种数据类型都是遵循 IEEE 标准的，float 以 32 位长度存储数据，double 以 64 位长度存储数据。</li><li>两种存储类型的基本格式是一致的，都是使用二进制科学表示法。<br>二进制科学表示法的公式为：S=M*2<sup>N</sup> ，即数据主要由三部分构成：符号位<sup> 0 正 1 负</sup> + 阶码<sup>指数位 N</sup> <sup>采用移位存储</sup> + 尾数位<sup> M</sup>。<ul><li>float 型数据，其二进制有 32 位，其中符号位 1 位，阶码 8 位，尾数 23 位；</li><li>double 型数据，其二进制为 64 位，符号位 1 位，阶码 11 位，尾数 52 位。</li></ul></li></ul></blockquote><h1 id="随堂练习"><a class="anchor" href="#随堂练习">#</a> 随堂练习</h1><ol><li class="quiz"><p>32 位系统中，C++ 的 int 型数据占的空间一般为 <span class="gap"></span> 字节。</p><ul class="options"><li>8</li><li>2</li><li class="correct">4</li><li>10</li></ul></li><li class="quiz"><p>下列哪个是 C++ 语言的合法的字符常量 <span class="gap"></span> 。</p><ul class="options"><li><code>&quot;\0&quot;</code></li><li><code>'054'</code></li><li class="correct"><code>'\x89'</code></li><li><code>'\092'</code></li></ul></li></ol>]]></content>
      <categories>
        <category>编程</category>
        <category>C++</category>
        <category>计算机程序设计（C++）-西安交通大学</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第8周 期末考试</title>
    <url>/shoka/program/java/course01/exam/</url>
    <content><![CDATA[<div class="note info"><p>以下为个人学习笔记和习题整理<br>课程：零基础学 Java 语言 - 浙江大学 - 翁恺 @ 中国大学 MOOC<br><a href="https://www.icourse163.org/course/ZJU-1001541001" target="_blank" rel="noopener">https://www.icourse163.org/course/ZJU-1001541001</a></p></div><h1 id="客观题"><a class="anchor" href="#客观题">#</a> 客观题</h1><h2 id="单选题"><a class="anchor" href="#单选题">#</a> 单选题</h2><ol><li class="quiz"><p>以下哪个不是 Java 语言的关键字？</p><ul class="options"><li>goto</li><li>switch</li><li>if</li><li class="correct">Scanner</li></ul></li><li class="quiz"><p>对于以下代码：</p><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><p>for 循环结束后，i 的值是多少？</p><ul class="options"><li>11</li><li>10</li><li>没有确定的值</li><li class="correct">i 不再存在了</li></ul></li><li class="quiz"><p>以下哪个 for 语句是错误的？</p><ul class="options"><li class="correct"><code>for (i=0; i&lt;10, j&lt;10; i++);</code></li><li><code>for (;;);</code></li><li><code>for (i=0; i&lt;10; i--);</code></li><li><code>for (i=0; j&lt;10; j++);</code></li></ul></li><li class="quiz"><p>对于以下代码段：</p><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><br><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><br><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><p>以下操作可以编译的是：</p><ul class="options"><li class="correct">s3 = s1 + s2;</li><li>s3 = s1 - s2;</li><li>s3 = s1 ^ s2;</li><li>s3 = s1 &amp; s2;</li></ul></li><li class="quiz"><p>以下哪个是定义和创建数组的正确方式？</p><ul class="options"><li><code>int a[] = new [5];</code></li><li class="correct"><code>int a[] = {1,2,3,4,5};</code></li><li><code>int a[5];</code></li><li><code>int a = new int[5];</code></li></ul></li><li class="quiz"><p>下代码片段的输出是？</p><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">boolean</span> m <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br><span class="token keyword">if</span> <span class="token punctuation">(</span> m<span class="token operator">=</span><span class="token boolean">false</span> <span class="token punctuation">)</span><br>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">else</span><br>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"True"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul class="options"><li>没有输出</li><li>编译错误</li><li class="correct">True</li><li>False</li></ul><blockquote><p>if (m=false) 相当于 m = false if ( m )</p></blockquote></li><li class="quiz"><p>表达式 <code>'B'+'8'-'3'</code> 表示的字符是：</p><ul class="options"><li>g</li><li class="correct">G</li><li>69</li><li>5</li></ul></li><li class="quiz"><p>循环语句 <code>while (!x&amp;&amp;!y)</code> 中的循环条件表达式等价于</p><ul class="options"><li><code>x=false &amp;&amp; y=false</code></li><li class="correct"><code>!(x || y)</code></li><li><code>!(x==false || y==false)</code></li><li><code>!(x==false &amp;&amp; y==false)</code></li></ul></li><li class="quiz"><p>假设字符变量 ch 中存放有大写英文字母，将其转换为相应的小写英文字母的表达式是</p><ul class="options"><li>ch-=32</li><li class="correct">ch+=32</li><li>ch=ch-'a'-'A'</li><li>ch=ch-32</li></ul></li><li class="quiz"><p>以下哪个是有效的 Java 程序入口函数？</p><ul class="options"><li>public static void main();</li><li>public static int main(String[] args);</li><li class="correct">public static void main(String[] args);</li><li>public static void main(int argc, String[] args)</li></ul></li><li class="quiz"><p>对于 <code>String s;</code> ，以下哪句是对的？</p><ul class="options"><li class="correct">s 是一个变量，它将要管理一个 String 的对象</li><li>s 是一个变量，它现在正管理着一个 String 的对象</li><li>s 是一个变量，其中有一个 String 的对象</li><li>s 现在的值是 null</li></ul></li><li class="quiz"><p>有以下定义： <code>double a,b,c;</code> 则以下哪个表达式与 a/b/c 不等价？</p><ul class="options"><li>(a/b)/c</li><li>a/(b*c)</li><li>a/c/b</li><li class="correct">a/(b/c)</li></ul></li><li class="quiz"><p>以下哪句不能编译？</p><ul class="options"><li><code>if ( a==b ) System.out.println(&quot;no&quot;);</code></li><li><code>if ( a==b ); else System.out.println(&quot;no&quot;);</code></li><li><code>if ( a==b ){} else System.out.println(&quot;no&quot;);</code></li><li class="correct"><code>if ( a==b ) else System.out.println(&quot;no&quot;);</code></li></ul></li><li class="quiz"><p>以下哪个循环并非重复 5 次？</p><ul class="options"><li class="correct"><code>int i; for (i=0; i&lt;=5; i++) {}</code></li><li><code>int i; for (i=1; i&lt;6; i++) {}</code></li><li><code>int i; for (i=1; i&lt;=5; i++) {}</code></li><li><code>int i; for (i=0; i&lt;5; i++) {}</code></li></ul></li><li class="quiz"><p>以下哪个循环能编译？</p><ul class="options"><li>for ( i=10 ; i&lt;100 ) {}</li><li>for ( i=10 ; i++ ) {}</li><li>for ( i=10 , i&lt;100, i++ ) {}</li><li class="correct">for ( i=10 ; i++; ) {}</li></ul></li><li class="quiz"><p>对于以下代码： <code>int i,j=6;</code> 以下哪句话是对的？</p><ul class="options"><li class="correct">i 不会被初始化，而 j 是 6</li><li>不能通过编译</li><li>i 和 j 的初始值都是 6</li><li>i 被初始为 0，而 j 是 6</li></ul></li><li class="quiz"><p>下面的方法，当参数值为 2 的时候返回值是多少</p><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>     <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>     <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <br>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <br>            result <span class="token operator">=</span> result <span class="token operator">+</span> i<span class="token punctuation">;</span> <br>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <br>            result <span class="token operator">=</span> result <span class="token operator">+</span> i  <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <br>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <br>            result <span class="token operator">=</span> result <span class="token operator">+</span> i  <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> <br>    <span class="token punctuation">}</span> <br>    <span class="token keyword">return</span> result<span class="token punctuation">;</span> <br> <span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul class="options"><li class="correct">10</li><li>6</li><li>8</li><li>0</li></ul></li><li class="quiz"><p>给出下面代码，关于该程序以下哪个说法是正确的</p><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <br>     <span class="token keyword">static</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <br>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <br>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>     <span class="token punctuation">}</span>   <br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul class="options"><li>编译错误</li><li>输出为空</li><li>运行时刻异常</li><li class="correct">输出 0</li></ul></li><li class="quiz"><p>以下哪种运算能从变量 x 中取得它的个位数</p><ul class="options"><li>x-10</li><li class="correct">x%10</li><li>x*10</li><li>x/10</li></ul></li><li class="quiz"><p>在代码： <code>while (!e)</code> 中，!e 等价于：</p><ul class="options"><li>e</li><li>!e=1</li><li>e==0</li><li class="correct">e!=true</li></ul></li></ol><h2 id="判断"><a class="anchor" href="#判断">#</a> 判断</h2><ol start="21"><li class="quiz false"><p>Java 语言中不用区分字母的大写小写</p></li><li class="quiz true"><p>Java 的各种数据类型占用固定长度，与具体的软硬件平台环境无关</p></li><li class="quiz true"><p>Java 中数组的下标只能是各种整数数据类型</p></li><li class="quiz false"><p>使用方法 <code>length( )</code> 可以获得字符串及数组的长度</p></li><li class="quiz false"><p>一个数组可以存放不同类型的数值</p></li><li class="quiz false"><p>while 循环的条件满足的时候循环继续，而 do-while 的条件满足的时候循环就结束了</p></li><li class="quiz true"><p>int 是比 long 窄的类型</p></li><li class="quiz true"><p>boolean 和 int 之间不能相互赋值</p></li><li class="quiz false"><p>数组的大小必须在写程序时就确定</p></li><li class="quiz true"><p>数组一旦被创建出来，就不能改变大小</p></li></ol><h1 id="编程题"><a class="anchor" href="#编程题">#</a> 编程题</h1><h2 id="题目1-二进制的前导的零10分"><a class="anchor" href="#题目1-二进制的前导的零10分">#</a> 题目 1. 二进制的前导的零（10 分）</h2><ul><li><p><strong>题目内容</strong><br>计算机内部用二进制来表达所有的值。一个十进制的数字，比如 18，在一个 32 位的计算机内部被表达为 00000000000000000000000000011000。可以看到，从左边数过来，在第一个 1 之前，有 27 个 0。我们把这些 0 称作前导的零。</p><p>现在，你的任务是写一个程序，输入一个整数，输出在 32 位二进制表达下它前导的零的个数。</p></li><li><p><strong>输入格式</strong><br>一个整数，在 32 位的整数可以表达的范围内。</p></li><li><p><strong>输出格式</strong><br>一个整数，表达输入被表达为一个 32 位的二进制数时，在第一个 1 之前的 0 的数量。</p></li><li><p><strong>输入样例</strong><br>256</p></li><li><p><strong>输出样例</strong><br>23</p></li></ul><h3 id="解题代码"><a class="anchor" href="#解题代码">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br>    <br>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>        <span class="token keyword">int</span> number <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>        <br>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>            <span class="token keyword">while</span> <span class="token punctuation">(</span> number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>                number <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><br>                count <span class="token operator">++</span><span class="token punctuation">;</span><br>            <span class="token punctuation">}</span><br>            <br>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
        <category>零基础学Java语言-浙江大学-翁恺</category>
      </categories>
      <tags>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title>第1周 计算</title>
    <url>/shoka/program/java/course01/week01/</url>
    <content><![CDATA[<div class="note info"><p>以下为个人学习笔记和习题整理<br>课程：零基础学 Java 语言 - 浙江大学 - 翁恺 @ 中国大学 MOOC<br><a href="https://www.icourse163.org/course/ZJU-1001541001" target="_blank" rel="noopener">https://www.icourse163.org/course/ZJU-1001541001</a></p></div><h1 id="课堂笔记"><a class="anchor" href="#课堂笔记">#</a> 课堂笔记</h1><h2 id="读输入-字符串输出"><a class="anchor" href="#读输入-字符串输出">#</a> 读输入、字符串输出</h2><figure class="highlight java"><figcaption><span class="lang">java</span><span>scanner</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><br><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token comment">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span><br><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token comment">// 让 in 这个对象做读入下一行的动作，结果交给 System.out 这个对象去打印一行。</span><br><br><span class="token comment">// 字符串的 + 用来连接两个字符串形成更长的字符串。</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token string">" world."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><p>tips：</p><ul><li><code>System.out.println</code> 会换行， <code>System.out.print</code> 则不会换行</li><li>出现警告： <code>Resource leak: 'in' is never closed</code> ，可以在函数的最后加入</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放</span><br></pre></td></tr></table></figure><h2 id="变量"><a class="anchor" href="#变量">#</a> 变量</h2><ul><li><p><strong>形式</strong>：&lt;类型名称&gt; &lt; 变量名称 &gt; = &lt; 初始值 &gt;<br><code>int price, amount; // 同时定义两个变量</code><br><code>int price = 0; // 定义变量并赋值</code><br><code>int price, amount = 100, age;</code></p></li><li><p><strong>类型名称</strong>：Java 是一种<strong>强类型语言</strong>，所有变量在使用前必须定义或声明，所有变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，程序运行过程中也不能改变变量的类型。</p></li><li><p><strong>变量名称</strong>：又称标识符，只能由字母、数字、下划线构成，数字不能出现在第一个位置。此外，Java 的保留字也不能用作标识符。</p></li><li><p>Java 的保留字列表</p></li></ul><table><thead><tr><th>abstract</th><th>do</th><th>implements</th><th>protected</th><th>throws</th></tr></thead><tbody><tr><td>boolean</td><td>double</td><td>import</td><td>public</td><td>transient</td></tr><tr><td>break</td><td>else</td><td>instanceof</td><td>return</td><td>true</td></tr><tr><td>byte</td><td>extends</td><td>int</td><td>short</td><td>try</td></tr><tr><td>case</td><td>false</td><td>interface</td><td>static</td><td>while</td></tr><tr><td>catch</td><td>final</td><td>long</td><td>strictfp</td><td>void</td></tr><tr><td>char</td><td>finally</td><td>native</td><td>super</td><td>volatile</td></tr><tr><td>class</td><td>float</td><td>new</td><td>switch</td></tr><tr><td>const*</td><td>for</td><td>null</td><td>synchronized</td></tr><tr><td>continue</td><td>goto*</td><td>package</td><td>this</td></tr><tr><td>default</td><td>if</td><td>private</td><td>throw</td></tr></tbody></table><ul class="task-list"><li>以下哪些标识符是符合规则的？</li><li class="task-list-item"><input type="checkbox" id="cbx_0" checked disabled><label for="cbx_0">currency</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" checked disabled><label for="cbx_1">lastName</label></li><li class="task-list-item"><input type="checkbox" id="cbx_2" checked disabled><label for="cbx_2">fireplace</label></li><li class="task-list-item"><input type="checkbox" id="cbx_3" disabled><label for="cbx_3">_last_name</label></li><li class="task-list-item"><input type="checkbox" id="cbx_4" checked disabled><label for="cbx_4">xingmin</label></li><li class="task-list-item"><input type="checkbox" id="cbx_5" disabled><label for="cbx_5">class</label></li><li class="task-list-item"><input type="checkbox" id="cbx_6" disabled><label for="cbx_6">goto</label></li><li class="task-list-item"><input type="checkbox" id="cbx_7" disabled><label for="cbx_7">4ever</label></li><li class="task-list-item"><input type="checkbox" id="cbx_8" disabled><label for="cbx_8">time-machine</label></li><li class="task-list-item"><input type="checkbox" id="cbx_9" disabled><label for="cbx_9">Int</label></li><li class="task-list-item"><input type="checkbox" id="cbx_10" disabled><label for="cbx_10">$12</label></li><li class="task-list-item"><input type="checkbox" id="cbx_11" disabled><label for="cbx_11">我是变量</label></li></ul><h2 id="常量-final"><a class="anchor" href="#常量-final">#</a> 常量 final</h2><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">final</span> <span class="token keyword">int</span> AMOUNT <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><br><span class="token comment">//final 是一个修饰符，表示这个变量的值一旦初始化，就不能再修改了。</span><br></pre></td></tr></table></figure><h2 id="变量类型"><a class="anchor" href="#变量类型">#</a> 变量类型</h2><h3 id="整数-int"><a class="anchor" href="#整数-int">#</a> 整数 int</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> price <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>如果用户输入的不是整数，则会报错 <code>java.util.InputMismatchException</code> 。</li><li>程序要求读入多个数字时，可以在一行输入，中间用空格分开，也可以多行输入。</li><li>每次召唤 <code>in.nextInt()</code> ，它就等待用户输入一个整数。</li><li>两个整数的运算结果只能是整数。</li><li>在 Java 中， <code>10</code> 和 <code>10.0</code> 是完全不同的数。</li></ul><h3 id="浮点数-double"><a class="anchor" href="#浮点数-double">#</a> 浮点数 double</h3><ul><li><strong>浮点数运算有误差</strong>：由于二进制的自身限制，浮点计算需要将十进制先转换为二进制，然后对二进制数进行计算，因此导致误差。</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token comment">// 结果为 0.09999999999999987</span><br></pre></td></tr></table></figure><ul><li>整数类型不能表达有小数部分的数；整数运算速度快，占内存小；日常中整数运算多。</li></ul><h2 id="赋值运算"><a class="anchor" href="#赋值运算">#</a> 赋值运算</h2><h3 id="强制类型转换"><a class="anchor" href="#强制类型转换">#</a> 强制类型转换</h3><ul><li>浮点数和整数放在一起运算时，Java 会将整数转换成浮点数，然后进行浮点数运算。</li><li>强制性转换的优先级高于四则运算。</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><br><span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token operator">/</span>b<span class="token punctuation">;</span> <span class="token comment">// 会报错</span><br><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会报错</span><br></pre></td></tr></table></figure><h3 id="运算符优先级"><a class="anchor" href="#运算符优先级">#</a> 运算符优先级</h3><ul><li>单目运算符 <code>+</code> <code>-</code> 优先级最高</li><li>结合关系一般自左向右，单目 + - 和赋值 = 自右向左。</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>result <span class="token operator">=</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> c<span class="token punctuation">;</span><br>result <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><br>result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><h3 id="复合赋值"><a class="anchor" href="#复合赋值">#</a> 复合赋值</h3><ul><li>5 个算术运算符， <code>+ - * / %</code> ，可以和赋值运算符 <code>=</code> 结合起来，形成复合赋值运算。注意，两个运算符中间不要有空格。</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>total <span class="token operator">+=</span> <span class="token punctuation">(</span>sum<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><br>total <span class="token operator">=</span> total <span class="token operator">+</span> <span class="token punctuation">(</span>sum<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><br><br>total <span class="token operator">*</span> <span class="token operator">=</span> sum<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">;</span><br>total <span class="token operator">=</span> total<span class="token operator">*</span><span class="token punctuation">(</span>sum<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>total <span class="token operator">/=</span> <span class="token number">12</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span><br>total <span class="token operator">=</span> total <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>递增递减运算符 <code>++</code> <code>--</code> ，给变量 + 1 或 - 1</li><li>前缀后缀：</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>a <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span><br>t1 <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//t1 先被赋值为 a 即 14， a 自加到 15</span><br>t2 <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment">//a 先自加到 15，t2 被赋值为 a 即 15</span><br></pre></td></tr></table></figure><h1 id="编程题"><a class="anchor" href="#编程题">#</a> 编程题</h1><h2 id="题目1-温度转换5分"><a class="anchor" href="#题目1-温度转换5分">#</a> 题目 1. 温度转换（5 分）</h2><ul><li><p><strong>题目内容</strong><br>写一个将华氏温度转换成摄氏温度的程序，转换的公式是：</p><p><code>°F = (9/5)*°C + 32</code></p><p>其中 C 表示摄氏温度，F 表示华氏温度。</p><p>程序的输入是一个整数，表示华氏温度。输出对应的摄氏温度，也是一个整数。</p><p>提示，为了把计算结果的浮点数转换成整数，需要使用下面的表达式：</p><p><code>(int)x;</code></p><p>其中 x 是要转换的那个浮点数。</p><p><em>注意：除了题目要求的输出，不能输出任何其他内容，比如输入时的提示，输出时的说明等等都不能。这道题目要求转换后的数字，程序就只能输出这个数字，除此之外任何内容都不能输出。</em></p></li><li><p><strong>输入格式</strong><br>一个整数。</p></li><li><p><strong>输出格式</strong><br>一个整数。</p></li><li><p><strong>输入样例</strong><br>100</p></li><li><p><strong>输出样例</strong><br>37</p></li></ul><h3 id="解题代码"><a class="anchor" href="#解题代码">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br><br>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>		<span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<br>		<span class="token comment">// 获得输入的整数</span><br>		<span class="token keyword">int</span> fahrenheit <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<span class="token comment">// 计算摄氏度</span><br>		<span class="token keyword">double</span> centigrade <span class="token operator">=</span> <span class="token punctuation">(</span>fahrenheit <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">/</span> <span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<span class="token comment">// 将浮点数转换为整数输出</span><br>		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>centigrade<span class="token punctuation">)</span><span class="token punctuation">;</span><br>	<span class="token punctuation">}</span><br><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
        <category>零基础学Java语言-浙江大学-翁恺</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第2周 判断</title>
    <url>/shoka/program/java/course01/week02/</url>
    <content><![CDATA[<div class="note info"><p>以下为个人学习笔记和习题整理<br>课程：零基础学 Java 语言 - 浙江大学 - 翁恺 @ 中国大学 MOOC<br><a href="https://www.icourse163.org/course/ZJU-1001541001" target="_blank" rel="noopener">https://www.icourse163.org/course/ZJU-1001541001</a></p></div><h1 id="课堂笔记"><a class="anchor" href="#课堂笔记">#</a> 课堂笔记</h1><h2 id="关系运算"><a class="anchor" href="#关系运算">#</a> 关系运算</h2><ul><li>六个关系运算符：</li></ul><table><thead><tr><th>运算符</th><th>意义</th></tr></thead><tbody><tr><td>==</td><td>相等</td></tr><tr><td>!=</td><td>不相等</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr></tbody></table><ul><li>关系运算结果为 <code>true</code> 或 <code>false</code></li><li>优先级<ul><li>所有关系运算符的优先级比算术运算低，但比赋值运算高</li><li>判断是否相等的 == 和！= 优先级比其他的低</li><li>连续的关系运算是从左到右进行的</li></ul></li><li>判断两个浮点数是否相等的方法</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>f1<span class="token operator">-</span>f2<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.0000001</span><br></pre></td></tr></table></figure><ul class="task-list"><li>下列表达式中错误的有？</li><li class="task-list-item"><input type="checkbox" id="cbx_0" disabled><label for="cbx_0">5 &gt; 3 == 6 &gt; 4</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" checked disabled><label for="cbx_1">6 &gt; 5 &gt; 4</label></li><li class="task-list-item"><input type="checkbox" id="cbx_2" disabled><label for="cbx_2">a == b == true</label></li><li class="task-list-item"><input type="checkbox" id="cbx_3" checked disabled><label for="cbx_3">a == b == 6</label></li><li class="task-list-item"><input type="checkbox" id="cbx_4" checked disabled><label for="cbx_4">a == b &gt; false</label></li><li class="task-list-item"><input type="checkbox" id="cbx_5" checked disabled><label for="cbx_5">(a == b) &gt; false<br><code>true 和 false 不能比较大小</code></label></li></ul><h2 id="判断语句-if-else"><a class="anchor" href="#判断语句-if-else">#</a> 判断语句 if else</h2><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <br><span class="token punctuation">{</span><br>	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><br><span class="token punctuation">}</span><br><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <br><span class="token punctuation">{</span><br>	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><br><span class="token punctuation">}</span><br><span class="token keyword">else</span><br><span class="token punctuation">{</span><br>	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="多路分支-switch-case"><a class="anchor" href="#多路分支-switch-case">#</a> 多路分支 switch case</h2><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><br>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><br>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><br>        <span class="token keyword">break</span><span class="token punctuation">;</span><br>    <span class="token keyword">default</span><span class="token operator">:</span><br>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token keyword">break</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>计算 switch 后面的控制表达式以后，程序会跳到相应的 case，但是如果这个 case 内部没有 break，那么在执行完语句后，就会顺序执行到下面的 case，直到遇到 break 或者 switch 结束。</li></ul><h1 id="小测验"><a class="anchor" href="#小测验">#</a> 小测验</h1><ol><li>写出以下代码段的执行结果：</li></ol><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><br><span class="token keyword">if</span> <span class="token punctuation">(</span> num <span class="token operator">>=</span> max<span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">)</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"huang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"zhu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><pre><code>&gt; huang
&gt; zhu
</code></pre><ol start="2"><li>写出以下代码段的执行结果：</li></ol><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><br><span class="token keyword">if</span> <span class="token punctuation">(</span> limit <span class="token operator">&lt;=</span> limit<span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>    <span class="token keyword">if</span> <span class="token punctuation">(</span> num1 <span class="token operator">==</span> num2 <span class="token punctuation">)</span><br>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lemon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"grape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><pre><code>&gt; lime
&gt; grape
</code></pre><h1 id="编程题"><a class="anchor" href="#编程题">#</a> 编程题</h1><h2 id="题目1-时间换算5分"><a class="anchor" href="#题目1-时间换算5分">#</a> 题目 1. 时间换算（5 分）</h2><ul><li><p><strong>题目内容</strong><br>UTC 是世界协调时，BJT 是北京时间，UTC 时间相当于 BJT 减去 8。现在，你的程序要读入一个整数，表示 BJT 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果分小于 10 分，需要保留十位上的 0。如 1124 表示 11 点 24 分，而 905 表示 9 点 5 分，36 表示 0 点 36 分，7 表示 0 点 7 分。</p><p>有效的输入范围是 0 到 2359，即你的程序不可能从测试服务器读到 0 到 2359 以外的输入数据。</p><p>你的程序要输出这个时间对应的 UTC 时间，输出的格式和输入的相同，即输出一个整数，表示 UTC 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果分小于 10 分，需要保留十位上的 0。</p><p><em>提醒：要小心跨日的换算。</em></p></li><li><p><strong>输入格式</strong><br>一个整数，表示 BJT 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果小时不是 0 而且分小于 10 分，需要保留十位上的 0。</p></li><li><p><strong>输出格式</strong><br>一个整数，表示 UTC 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果小时不是 0 而且分小于 10 分，需要保留十位上的 0。</p></li><li><p><strong>输入样例</strong><br>933</p></li><li><p><strong>输出样例</strong><br>133</p></li></ul><h3 id="解题代码"><a class="anchor" href="#解题代码">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br><br>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>		<span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<br>		<span class="token keyword">int</span> bjt <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<br>		<span class="token keyword">int</span> utc <span class="token operator">=</span> bjt <span class="token operator">-</span> <span class="token number">800</span><span class="token punctuation">;</span><br>		<span class="token keyword">if</span><span class="token punctuation">(</span>utc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><br>		<span class="token punctuation">{</span><br>			utc <span class="token operator">+=</span> <span class="token number">2400</span><span class="token punctuation">;</span> <span class="token comment">// 时为负数，则进行隔日计算</span><br>		<span class="token punctuation">}</span><br>		<br>		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>utc<span class="token punctuation">)</span><span class="token punctuation">;</span><br>	<span class="token punctuation">}</span><br><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="题目2-信号报告5分"><a class="anchor" href="#题目2-信号报告5分">#</a> 题目 2. 信号报告（5 分）</h2><ul><li><p><strong>题目内容</strong><br>无线电台的 RS 制信号报告是由三两个部分组成的：</p><p>R (Readability) 信号可辨度即清晰度.</p><p>S (Strength) 信号强度即大小.</p><p>其中 R 位于报告第一位，共分 5 级，用 1—5 数字表示.</p><blockquote><p>1---Unreadable</p><p>2---Barely readable, occasional words distinguishable</p><p>3---Readable with considerable difficulty</p><p>4---Readable with practically no difficulty</p><p>5---Perfectly readable</p></blockquote><p>报告第二位是 S，共分九个级别，用 1—9 中的一位数字表示</p><blockquote><p>1---Faint signals, barely perceptible</p><p>2---Very weak signals</p><p>3---Weak signals</p><p>4---Fair signals</p><p>5---Fairly good signals</p><p>6---Good signals</p><p>7---Moderately strong signals</p><p>8---Strong signals</p><p>9---Extremely strong signals</p></blockquote><p>现在，你的程序要读入一个信号报告的数字，然后输出对应的含义。如读到 59，则输出：<br><code>Extremely strong signals, perfectly readable.</code></p></li><li><p><strong>输入格式</strong><br>一个整数，信号报告。整数的十位部分表示可辨度，个位部分表示强度。输入的整数范围是 [11,59] 内有效的数字，这个范围外的数字不可能出现在测试数据中。</p></li><li><p><strong>输出格式</strong><br>一句话，表示这个信号报告的意义。按照题目中的文字，先输出表示强度的文字，跟上逗号和空格，然后是表示可辨度的文字，跟上句号。注意可辨度的句子的第一个字母是小写的。注意这里的标点符号都是英文的。</p></li><li><p><strong>输入样例</strong><br>33</p></li><li><p><strong>输出样例</strong><br>Weak signals, readable with considerable difficulty.</p></li></ul><h3 id="解题代码-2"><a class="anchor" href="#解题代码-2">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br><br>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>		<span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<br>		<span class="token keyword">int</span> rs <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<br>		<span class="token keyword">int</span> readability <span class="token operator">=</span> rs <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><br>		<span class="token keyword">int</span> strength <span class="token operator">=</span> rs <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span><br>		<br>		<span class="token keyword">switch</span><span class="token punctuation">(</span>strength<span class="token punctuation">)</span><br>		<span class="token punctuation">{</span><br>			<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Faint signals, barely perceptible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Very weak signals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Weak signals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Fair signals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Fairly good signals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Good signals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Moderately strong signals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Strong signals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Extremely strong signals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>		<span class="token punctuation">}</span><br>		<br>		<span class="token keyword">switch</span><span class="token punctuation">(</span>readability<span class="token punctuation">)</span><br>		<span class="token punctuation">{</span><br>			<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">", unreadable."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">", barely readable, occasional words distinguishable."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">", readable with considerable difficulty."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">", readable with practically no difficulty."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><br>				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">", perfectly readable."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			<span class="token keyword">break</span><span class="token punctuation">;</span><br>		<span class="token punctuation">}</span><br>	<span class="token punctuation">}</span><br><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
        <category>零基础学Java语言-浙江大学-翁恺</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第4周 循环控制</title>
    <url>/shoka/program/java/course01/week04/</url>
    <content><![CDATA[<div class="note info"><p>以下为个人学习笔记和习题整理<br>课程：零基础学 Java 语言 - 浙江大学 - 翁恺 @ 中国大学 MOOC<br><a href="https://www.icourse163.org/course/ZJU-1001541001" target="_blank" rel="noopener">https://www.icourse163.org/course/ZJU-1001541001</a></p></div><h1 id="课堂笔记"><a class="anchor" href="#课堂笔记">#</a> 课堂笔记</h1><h2 id="for-循环"><a class="anchor" href="#for-循环">#</a> for 循环</h2><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span>条件<span class="token punctuation">;</span>单步动作<span class="token punctuation">)</span> <span class="token punctuation">{</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li><strong>初始化</strong>：可以定义一个新变量并赋值，如 <code>int i = 0</code> ，或者直接赋值循环外已定义的变量 <code>i = 0</code> 。</li><li><strong>条件</strong>：维持循环的条件，与 while 条件相同。常用 <code>i&lt;=n</code> 。</li><li><strong>单步动作</strong>：步进，即每轮循环体执行完之后，必须执行的动作。可以用 <code>,</code> 连接多个动作。常用 <code>i++</code> 或 <code>i--</code> 。</li><li>以上每一个表达式都可以省略： <code>for(; 条件;) == while (条件)</code></li><li>可以空循环，但建议加上大括号 {}。</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><br>	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>循环次数 与 控制变量的值：</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><br><span class="token comment">// 循环次数正好为 n，循环结束后 i 的值是 n</span><br><span class="token comment">// 初始化 i 为 0 或 1，循环条件为 i &lt; n 或 i &lt;= n，均影响循环次数及 i 最终的值。</span><br><br><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><br><span class="token comment">// 可以直接在 for 语句中定义变量 i</span><br><span class="token comment">//i 只在循环体中使用，出循环后，i 未定义。</span><br></pre></td></tr></table></figure><ul><li>tips:</li></ul><blockquote><ul><li>如果有固定次数，用 for 循环；</li><li>如果必须要执行一次，用 do-while 循环；</li><li>其它情况用 while 循环。</li></ul></blockquote><h2 id="循环控制-break-vs-continue"><a class="anchor" href="#循环控制-break-vs-continue">#</a> 循环控制 break vs continue</h2><ul><li>break : 跳出循环</li><li>continue ： 跳过循环这一轮剩下的语句，进入下一轮</li></ul><h3 id="嵌套循环"><a class="anchor" href="#嵌套循环">#</a> 嵌套循环</h3><ul><li>break 和 continue 只能对所在的那层循环进行跳出或跳过</li><li>可以在循环前放一个标号来标示循环，带标号的 break 和 continue 对那个循环起作用。</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Outer</span><span class="token operator">:</span><br><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> one <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> one <span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span> <span class="token operator">++</span>one <span class="token punctuation">)</span><br>	<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> five <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> five <span class="token operator">&lt;=</span> amount<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>five <span class="token punctuation">)</span><br>		<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> ten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ten <span class="token operator">&lt;=</span> amount<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>ten <span class="token punctuation">)</span><br>			<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> twenty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> twenty <span class="token operator">&lt;=</span> amount<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">;</span> <span class="token operator">++</span>twenty <span class="token punctuation">)</span><br>				<span class="token keyword">if</span> <span class="token punctuation">(</span> one<span class="token operator">+</span>five<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span>ten<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>twenty<span class="token operator">*</span><span class="token number">20</span> <span class="token operator">==</span> amount <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>					<span class="token keyword">break</span> <span class="token class-name">Outer</span><span class="token punctuation">;</span><br>				<span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="逻辑运算"><a class="anchor" href="#逻辑运算">#</a> 逻辑运算</h2><h3 id="逻辑类型-boolean"><a class="anchor" href="#逻辑类型-boolean">#</a> 逻辑类型 boolean</h3><p>关系运算的结果是一个逻辑值 <code>true</code> 或 <code>false</code> ，可以保存在一个对应的逻辑类型变量中。</p><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br><span class="token keyword">boolean</span> tooHigh<span class="token punctuation">,</span> tooSmall<span class="token punctuation">,</span> tooRough<span class="token punctuation">;</span><br><span class="token keyword">boolean</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a class="anchor" href="#逻辑运算符">#</a> 逻辑运算符！&amp;&amp; ||</h3><p>对逻辑量进行的运算，只有逻辑量可以参与运算</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>!</td><td>逻辑非</td><td>!a</td><td>若 a 是 true，则结果为 false；如果 a 是 false，则结果为 true</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td><td>a&amp;&amp;b</td><td>a 和 b 都为 true 时，结果才为 true；否则就是 false</td></tr><tr><td>||</td><td>逻辑或</td><td>a||b</td><td>a 和 b 有一个为 true 时，结果即为 true；两个都是 false，结果为 false</td></tr></tbody></table><h4 id="运算符优先级总结"><a class="anchor" href="#运算符优先级总结">#</a> 运算符优先级总结</h4><table><thead><tr><th>优先级</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>()</td><td>从左到右</td></tr><tr><td>2</td><td>! + - ++ - -</td><td>从右到左</td></tr><tr><td>3</td><td>* / %</td><td>从左到右</td></tr><tr><td>4</td><td>+ -</td><td>从左到右</td></tr><tr><td>5</td><td>&lt; &lt;= &gt; &gt;=</td><td>从左到右</td></tr><tr><td>6</td><td>== !=</td><td>从左到右</td></tr><tr><td>7</td><td>&amp;&amp;</td><td>从左到右</td></tr><tr><td>8</td><td>||</td><td>从左到右</td></tr><tr><td>9</td><td>= += -= *= /= %=</td><td>从右到左</td></tr></tbody></table><h3 id="逻辑表达式"><a class="anchor" href="#逻辑表达式">#</a> 逻辑表达式</h3><ul><li><code>4 &lt; x &lt; 6</code> 是错误的表达式，因为 <code>4 &lt; x</code> 结果是一个逻辑值，逻辑值不能和数值 6 做关系运算。正确的表达式是 <code>x &gt; 4 &amp;&amp; x &lt;6</code> 。</li><li><code>age &gt; 20 &amp;&amp; age &lt; 30</code> 正确</li><li><code>index &lt;0 || index &gt; 99</code> 正确</li><li><code>!age&lt;20</code> 报错， <code>!(age &lt; 20)</code> 正确</li></ul><h2 id="循环的应用"><a class="anchor" href="#循环的应用">#</a> 循环的应用</h2><h3 id="求和"><a class="anchor" href="#求和">#</a> 求和</h3><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>3</mn><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>4</mn><mo>+</mo><mo>…</mo><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n)=1+1/2+1/3+1/4+…+1/n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">3</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">4</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">n</span></span></span></span></li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><br><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>	sum <span class="token operator">+=</span><span class="token number">1.0</span><span class="token operator">/</span>i<span class="token punctuation">;</span>	<br><span class="token punctuation">}</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只输出两位小数</span><br></pre></td></tr></table></figure><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>3</mn><mo>−</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>4</mn><mo>+</mo><mo>…</mo><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n)=1-1/2+1/3-1/4+…+1/n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord mathdefault" style="margin-right:.10764em">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.72777em;vertical-align:-.08333em"></span><span class="mord">1</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">3</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">4</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:.66666em;vertical-align:-.08333em"></span><span class="minner">…</span><span class="mspace" style="margin-right:.2222222222222222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.2222222222222222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">n</span></span></span></span></li></ul><blockquote><p>方案一：正负交错相乘</p></blockquote><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><br><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> sign <span class="token operator">=</span> <span class="token operator">-</span>sign<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>	sum <span class="token operator">+=</span> sign <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> i<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><blockquote><p>方案二：奇数加，偶数减</p></blockquote><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><br><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>	<span class="token keyword">if</span><span class="token punctuation">(</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>		sum <span class="token operator">+=</span> <span class="token number">1.0</span><span class="token operator">/</span>i<span class="token punctuation">;</span>	<br>	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>		sum <span class="token operator">-=</span> <span class="token number">1.0</span><span class="token operator">/</span>i<span class="token punctuation">;</span><br>	<span class="token punctuation">}</span><br><span class="token punctuation">}</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><h3 id="求最大公约数"><a class="anchor" href="#求最大公约数">#</a> 求最大公约数</h3><ul><li>枚举法</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> a<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> b<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> gcd<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><br><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>a <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>	<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>		<span class="token comment">// 如果 a 和 b 都能被 i 整除，则记下 i</span><br>		gcd <span class="token operator">=</span> i<span class="token punctuation">;</span><br>	<span class="token punctuation">}</span>				<br><span class="token punctuation">}</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"和"</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"的最大公约数是："</span><span class="token operator">+</span>gcd<span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>辗转相除法</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> a<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> b<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> t<span class="token punctuation">;</span><br><span class="token keyword">int</span> origa <span class="token operator">=</span> a<span class="token punctuation">;</span><br><span class="token keyword">int</span> origb <span class="token operator">=</span> b<span class="token punctuation">;</span><br><span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>	t <span class="token operator">=</span> a<span class="token operator">%</span>b<span class="token punctuation">;</span> <span class="token comment">// 得到余数</span><br>	a <span class="token operator">=</span> b<span class="token punctuation">;</span><br>	b <span class="token operator">=</span> r<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//b 等于 0 时，a 就是最大公约数</span><br>	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>origa<span class="token operator">+</span><span class="token string">"和"</span><span class="token operator">+</span>origb<span class="token operator">+</span><span class="token string">"的最大公约数是："</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	<br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h3 id="整数分解"><a class="anchor" href="#整数分解">#</a> 整数分解</h3><ul><li>逆序输出一个整数</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> x <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token keyword">do</span> <span class="token punctuation">{</span><br>	y <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span><br>	x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><h1 id="编程题"><a class="anchor" href="#编程题">#</a> 编程题</h1><h2 id="题目1-素数和5分"><a class="anchor" href="#题目1-素数和5分">#</a> 题目 1. 素数和（5 分）</h2><ul><li><p><strong>题目内容</strong><br>我们认为 2 是第一个素数，3 是第二个素数，5 是第三个素数，依次类推。</p><p>现在，给定两个整数 n 和 m，0&lt;n&lt;=m&lt;=200，你的程序要计算第 n 个素数到第 m 个素数之间所有的素数的和，包括第 n 个素数和第 m 个素数。</p><p><em>注意，是第 n 个素数到第 m 个素数之间的所有的素数，并不是 n 和 m 之间的所有的素数。</em></p></li><li><p><strong>输入格式</strong><br>两个整数，第一个表示 n，第二个表示 m。</p></li><li><p><strong>输出格式</strong><br>一个整数，表示第 n 个素数到第 m 个素数之间所有的素数的和，包括第 n 个素数和第 m 个素数。</p></li><li><p><strong>输入样例</strong><br>2 4</p></li><li><p><strong>输出样例</strong><br>15</p></li></ul><h3 id="解题代码"><a class="anchor" href="#解题代码">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br>	<br>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>		<span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>		<span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<span class="token keyword">int</span> m <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 计数器，初始化为 1</span><br>		<span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 结果值</span><br>		<br>		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> count <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 从 2 开始循环取数，直到 count 大于 m。</span><br>			<span class="token keyword">boolean</span> isPrime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>	<span class="token comment">// 默认是素数</span><br>			<br>			<span class="token comment">// 如果 i 可以被更小的数整除，则不是素数</span><br>			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>				<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不检测整数 2</span><br>					isPrime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <br>					<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 立即跳出检测循环</span><br>				<span class="token punctuation">}</span><br>			<span class="token punctuation">}</span><br>			<br>			<span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>				<span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>					result <span class="token operator">+=</span> i<span class="token punctuation">;</span><br>				<span class="token punctuation">}</span><br>				count <span class="token operator">++</span><span class="token punctuation">;</span><br>			<span class="token punctuation">}</span><br>		<span class="token punctuation">}</span><br><br>		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<br>	<span class="token punctuation">}</span><br><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="题目2-念整数5分"><a class="anchor" href="#题目2-念整数5分">#</a> 题目 2. 念整数（5 分）</h2><ul><li><p><strong>题目内容</strong><br>你的程序要读入一个整数，范围是 [-100000,100000]。然后，用汉语拼音将这个整数的每一位输出出来。</p><p>如输入 1234，则输出：</p><p><code>yi er san si</code></p><p>注意，每个字的拼音之间有一个空格，但是最后的字后面没有空格。当遇到负数时，在输出的开头加上 “fu”，如 - 2341 输出为：</p><p><code>fu er san si yi</code></p></li><li><p><strong>输入格式</strong><br>一个整数，范围是 [-100000,100000]。</p></li><li><p><strong>输出格式</strong><br>表示这个整数的每一位数字的汉语拼音，每一位数字的拼音之间以空格分隔，末尾没有空格。</p></li><li><p><strong>输入样例</strong><br>- 30</p></li><li><p><strong>输出样例</strong><br>fu san ling</p></li></ul><h3 id="解题代码-2"><a class="anchor" href="#解题代码-2">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br>	<br>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>		<span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>		<span class="token keyword">int</span> number <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<span class="token class-name">String</span> py <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// 拼音字符串</span><br>				comma <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// 用来存放拼音之间的空格，默认没有空格</span><br>				result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// 用来合成最后的输出内容</span><br>				<br>		<span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"fu "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>			number <span class="token operator">=</span> <span class="token operator">-</span>number<span class="token punctuation">;</span><br>		<span class="token punctuation">}</span><br>		<br>		<span class="token keyword">do</span> <span class="token punctuation">{</span><br>			<span class="token comment">// 循环取个位数的拼音</span><br>			<span class="token keyword">switch</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>	            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><br>	                py <span class="token operator">=</span> <span class="token string">"ling"</span><span class="token punctuation">;</span><br>	                <span class="token keyword">break</span><span class="token punctuation">;</span><br>	            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><br>	            	py <span class="token operator">=</span> <span class="token string">"yi"</span><span class="token punctuation">;</span><br>	                <span class="token keyword">break</span><span class="token punctuation">;</span><br>	            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><br>	            	py <span class="token operator">=</span> <span class="token string">"er"</span><span class="token punctuation">;</span><br>	                <span class="token keyword">break</span><span class="token punctuation">;</span><br>	            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><br>	                py <span class="token operator">=</span> <span class="token string">"san"</span><span class="token punctuation">;</span><br>	                <span class="token keyword">break</span><span class="token punctuation">;</span><br>	            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><br>	                py <span class="token operator">=</span> <span class="token string">"si"</span><span class="token punctuation">;</span><br>	                <span class="token keyword">break</span><span class="token punctuation">;</span><br>	            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><br>	                py <span class="token operator">=</span> <span class="token string">"wu"</span><span class="token punctuation">;</span><br>	                <span class="token keyword">break</span><span class="token punctuation">;</span><br>	            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><br>	                py <span class="token operator">=</span> <span class="token string">"liu"</span><span class="token punctuation">;</span><br>	                <span class="token keyword">break</span><span class="token punctuation">;</span><br>	            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><br>	                py <span class="token operator">=</span> <span class="token string">"qi"</span><span class="token punctuation">;</span><br>	                <span class="token keyword">break</span><span class="token punctuation">;</span><br>	            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><br>	                py <span class="token operator">=</span> <span class="token string">"ba"</span><span class="token punctuation">;</span><br>	                <span class="token keyword">break</span><span class="token punctuation">;</span><br>	            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span><br>	                py <span class="token operator">=</span> <span class="token string">"jiu"</span><span class="token punctuation">;</span><br>	                <span class="token keyword">break</span><span class="token punctuation">;</span><br>			<span class="token punctuation">}</span><br>			<br>			result <span class="token operator">=</span> py <span class="token operator">+</span> comma <span class="token operator">+</span> result<span class="token punctuation">;</span><br>			number <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 抹去已计算的个位数</span><br>			comma <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token comment">// 计算 1 次后，默认均有空格</span><br>		<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><br>		<br>	<span class="token punctuation">}</span><br><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
        <category>零基础学Java语言-浙江大学-翁恺</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第3周 循环</title>
    <url>/shoka/program/java/course01/week03/</url>
    <content><![CDATA[<div class="note info"><p>以下为个人学习笔记和习题整理<br>课程：零基础学 Java 语言 - 浙江大学 - 翁恺 @ 中国大学 MOOC<br><a href="https://www.icourse163.org/course/ZJU-1001541001" target="_blank" rel="noopener">https://www.icourse163.org/course/ZJU-1001541001</a></p></div><h1 id="课堂笔记"><a class="anchor" href="#课堂笔记">#</a> 课堂笔记</h1><h2 id="while-循环"><a class="anchor" href="#while-循环">#</a> while 循环</h2><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>循环条件<span class="token operator">></span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>    <span class="token operator">&lt;</span>循环体语句<span class="token operator">></span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>先判断条件是否满足，然后再执行循环体，直到条件不满足为止。</li><li>可能一次也不执行。</li></ul><h2 id="do-while-循环"><a class="anchor" href="#do-while-循环">#</a> do-while 循环</h2><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">do</span> <span class="token punctuation">{</span><br>    <span class="token operator">&lt;</span>循环体语句<span class="token operator">></span><span class="token punctuation">;</span><br><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>循环条件<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 句末分号不可丢</span><br></pre></td></tr></table></figure><ul><li>进入时不检查，执行完一轮后，再检查条件是否满足，如果满足则继续执行循环体。</li><li>至少执行一次。</li></ul><h2 id="例子"><a class="anchor" href="#例子">#</a> 例子</h2><h3 id="算平均数"><a class="anchor" href="#算平均数">#</a> 算平均数</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> number<span class="token punctuation">;</span><br><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br><br>number <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">while</span><span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><br>    sum <span class="token operator">+=</span> number<span class="token punctuation">;</span><br>    count <span class="token operator">++</span><span class="token punctuation">;</span><br>    number <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token operator">/</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> number<span class="token punctuation">;</span><br><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br><br><span class="token keyword">do</span> <span class="token punctuation">{</span><br>    number <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        sum <span class="token operator">+=</span> number<span class="token punctuation">;</span><br>        count <span class="token operator">++</span><span class="token punctuation">;</span>    <br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token operator">/</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h3 id="猜数游戏"><a class="anchor" href="#猜数游戏">#</a> 猜数游戏</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token comment">// 每次召唤 Math.random () 就得到一个 [0,1) 范围内的随机数</span><br><span class="token comment">// [0,1)-->[0,100)-->[1,100]</span><br><br><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> a<span class="token punctuation">;</span><br><br><span class="token keyword">do</span> <span class="token punctuation">{</span><br>    a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    count <span class="token operator">++</span><span class="token punctuation">;</span><br>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜大了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜小了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜你猜对啦！你一共猜了"</span><span class="token operator">+</span>count<span class="token operator">+</span><span class="token string">"次。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>为什么方法正确的话，100 以内的数最多猜 7 次就够了？</li></ul><blockquote><pre><code>二分法：
</code></pre><p>对于某个数使用二分法的最少次数的公式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>&gt;</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">2^n&gt;k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.703492em;vertical-align:-.0391em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.664392em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.2777777777777778em"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:.2777777777777778em"></span></span><span class="base"><span class="strut" style="height:.69444em;vertical-align:0"></span><span class="mord mathdefault" style="margin-right:.03148em">k</span></span></span></span>，其中 n 为最少次数，k 为一共有多少数。<br>因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">2^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.8141079999999999em;vertical-align:0"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.8141079999999999em"><span style="top:-3.063em;margin-right:.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> 是 128，大于 100，可以判断 100 以内只需要 7 次。</p></blockquote><h1 id="小测验"><a class="anchor" href="#小测验">#</a> 小测验</h1><ol><li class="quiz"><p>以下哪种运算能从变量 x 中取得它的个位数？</p><ul class="options"><li>x/10</li><li class="correct">x%10</li><li>x*10</li><li>x=10</li></ul></li><li class="quiz false"><p>while 循环的条件满足的时候循环继续，而 do-while 的条件满足的时候循环就结束了。</p></li><li class="quiz essay"><p>以下代码片段执行结束后，变量 i 的值是多少？</p><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><br><span class="token keyword">do</span> <span class="token punctuation">{</span><br>    i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">5</span>；<br><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><blockquote><p>21</p></blockquote></li></ol><h1 id="编程题"><a class="anchor" href="#编程题">#</a> 编程题</h1><h2 id="作业1-奇偶个数5分"><a class="anchor" href="#作业1-奇偶个数5分">#</a> 作业 1. 奇偶个数（5 分）</h2><ul><li><strong>题目内容</strong><br>你的程序要读入一系列正整数数据，输入 - 1 表示输入结束，-1 本身不是输入的数据。程序输出读到的数据中的奇数和偶数的个数。</li><li><strong>输入格式</strong><br>一系列正整数，整数的范围是（0,100000）。如果输入 - 1 则表示输入结束。</li><li><strong>输出格式</strong><br>两个整数，第一个整数表示读入数据中的奇数的个数，第二个整数表示读入数据中的偶数的个数。两个整数之间以空格分隔。</li><li><strong>输入样例</strong><br>9 3 4 2 5 7 -1</li><li><strong>输出样例</strong><br>4 2</li></ul><h3 id="解题代码"><a class="anchor" href="#解题代码">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br><br>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>        <span class="token keyword">int</span> number <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><br>            odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><br>            even <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <br>        <br>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><br>            <span class="token punctuation">{</span><br>                even <span class="token operator">++</span><span class="token punctuation">;</span><br>            <span class="token punctuation">}</span><br>            <span class="token keyword">else</span><br>            <span class="token punctuation">{</span><br>                odd <span class="token operator">++</span><span class="token punctuation">;</span><br>            <span class="token punctuation">}</span><br>            number <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>odd <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> even<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="作业2-数字特征值5分"><a class="anchor" href="#作业2-数字特征值5分">#</a> 作业 2. 数字特征值（5 分）</h2><ul><li><p><strong>题目内容</strong><br>对数字求特征值是常用的编码算法，奇偶特征是一种简单的特征值。对于一个整数，从个位开始对每一位数字编号，个位是 1 号，十位是 2 号，以此类推。这个整数在第 n 位上的数字记作 x，如果 x 和 n 的奇偶性相同，则记下一个 1，否则记下一个 0。按照整数的顺序把对应位的表示奇偶性的 0 和 1 都记录下来，就形成了一个二进制数字。比如，对于 342315，这个二进制数字就是 001101。</p><p>这里的计算可以用下面的表格来表示：</p></li></ul><table><tbody><tr><td>数字</td><td>3</td><td>4</td><td>2</td><td>3</td><td>1</td><td>5</td></tr><tr><td>数位</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td></tr><tr><td>数字</td><td>奇</td><td>偶</td><td>奇</td><td>偶</td><td>偶</td><td>奇</td></tr><tr><td>数位</td><td>奇</td><td>偶</td><td>偶</td><td>奇</td><td>偶</td><td>奇</td></tr><tr><td>奇偶一致</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>二进制位值</td><td>32</td><td>16</td><td>8</td><td>4</td><td>2</td><td>1</td></tr></tbody></table><ul><li class="nodot"><p>按照二进制位值将 1 的位的位值加起来就得到了结果 13。</p><p>你的程序要读入一个非负整数，整数的范围是 [0,100000]，然后按照上述算法计算出表示奇偶性的那个二进制数字，输出它对应的十进制值。</p><p><em>提示：将整数从右向左分解，数位每次加 1，而二进制值每次乘 2。</em></p></li><li><p><strong>输入格式</strong><br>一个非负整数，整数的范围是 [0,1000000]。</p></li><li><p><strong>输出格式</strong><br>一个整数，表示计算结果。</p></li><li><p><strong>输入样例</strong><br>342315</p></li><li><p><strong>输出样例</strong><br>13</p></li></ul><h3 id="解题代码-2"><a class="anchor" href="#解题代码-2">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br><br>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><br>        <span class="token keyword">int</span> number <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><br>            digit<span class="token punctuation">,</span> <span class="token comment">// 个位数存储</span><br>            binary <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 二进制位值，第一个循环时为 1            </span><br>            count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 循环次数</span><br>            result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 结果值</span><br>        <br>        <span class="token keyword">do</span> <span class="token punctuation">{</span><br>            digit <span class="token operator">=</span> number <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 计算当前循环的个位数</span><br>            <br>            <span class="token keyword">if</span> <span class="token punctuation">(</span> digit <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> count <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><br>            <span class="token punctuation">{</span> <span class="token comment">// 个位数与循环次数的奇偶一致</span><br>                result <span class="token operator">+=</span> binary<span class="token punctuation">;</span> <span class="token comment">// 则追加相应二进制位值</span><br>            <span class="token punctuation">}</span><br>            <br>            <span class="token comment">// 以下计算出下一个循环需要的参数</span><br>            number <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 抹去已计算的个位数</span><br>            binary <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 二进制位值每次乘 2</span><br>            count <span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 循环次数加 1</span><br>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 循环条件</span><br>        <br>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
        <category>零基础学Java语言-浙江大学-翁恺</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第5周 数组</title>
    <url>/shoka/program/java/course01/week05/</url>
    <content><![CDATA[<div class="note info"><p>以下为个人学习笔记和习题整理<br>课程：零基础学 Java 语言 - 浙江大学 - 翁恺 @ 中国大学 MOOC<br><a href="https://www.icourse163.org/course/ZJU-1001541001" target="_blank" rel="noopener">https://www.icourse163.org/course/ZJU-1001541001</a></p></div><h1 id="课堂笔记"><a class="anchor" href="#课堂笔记">#</a> 课堂笔记</h1><h2 id="数组"><a class="anchor" href="#数组">#</a> 数组</h2><ul><li>数组是一种容器（放东西的东西）<ul><li>一旦创建，不能再改变大小。</li></ul></li><li>数组中的每个数据叫做元素。<ul><li>所有元素具有相同的数据类型。</li></ul></li></ul><h3 id="数组变量"><a class="anchor" href="#数组变量">#</a> 数组变量</h3><h4 id="定义与初始化"><a class="anchor" href="#定义与初始化">#</a> 定义与初始化</h4><ul><li><code>new</code> 创建数组，各元素会得到默认的 <code>0</code> 值</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token operator">&lt;</span>类型<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>名字<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token operator">&lt;</span>类型<span class="token operator">></span><span class="token punctuation">[</span>元素个数<span class="token punctuation">]</span><span class="token punctuation">;</span><br><br><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个 int 型的数组，有 10 个元素</span><br><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> averages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><blockquote><ul><li>元素个数<strong>必须给出</strong></li><li>元素个数<strong>必须是整数</strong></li><li>元素个数<strong>可以是变量</strong> ：先让用户输入数组的个数，然后将这个数确定为数组的元素个数</li></ul></blockquote><ul><li>直接初始化，用大括号给出数组的所有元素的初始值。</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><blockquote><ul><li>数组大小不需要给出</li><li>可以用 <code>length</code> 获得数组大小</li></ul></blockquote><h3 id="数组元素"><a class="anchor" href="#数组元素">#</a> 数组元素</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 表示数组中的第一个元素，每个元素是一个 int 类型的变量</span><br></pre></td></tr></table></figure><ul><li><p>数组的索引或下标都是从 0 开始的</p><blockquote><p>源自于 C 语言，其编译器从 0 开始更易于计算</p></blockquote></li><li><p>最小的下标是 <code>0</code> ，最大的下标是 <code>元素个数-1</code></p><blockquote><p>编译器不会检查下标是否有效。<br>如果运行时出现了无效下标，会导致程序终止。</p></blockquote></li></ul><h3 id="赋值"><a class="anchor" href="#赋值">#</a> 赋值</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><br><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><br>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><br><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果为：16</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// step1</span><br><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> a1<span class="token punctuation">;</span> <span class="token comment">// step2</span><br><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// step3</span><br><span class="token punctuation">}</span><br><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><p>示意图：</p><pre class="mermaid"><svg id="mermaid-1590862921427" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width:732.39px" viewBox="0 0 732.390625 213"><g class="output"><g class="clusters"><g class="cluster" id="step1" transform="translate(106.125,106.5)" style="opacity:1"><rect width="196.25" height="197" x="-98.125" y="-98.5"></rect><g class="label" transform="translate(0, -84.5)" id="mermaid-1590862921427Text"><g transform="translate(-19.4296875,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">step1</tspan></text></g></g></g><g class="cluster" id="step2" transform="translate(343.41015625,106.5)" style="opacity:1"><rect width="238.3203125" height="197" x="-119.16015625" y="-98.5"></rect><g class="label" transform="translate(0, -84.5)" id="mermaid-1590862921427Text"><g transform="translate(-19.4296875,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">step2</tspan></text></g></g></g><g class="cluster" id="step3" transform="translate(603.48046875,106.5)" style="opacity:1"><rect width="241.8203125" height="197" x="-120.91015625" y="-98.5"></rect><g class="label" transform="translate(0, -84.5)" id="mermaid-1590862921427Text"><g transform="translate(-19.4296875,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">step3</tspan></text></g></g></g></g><g class="edgePaths"><g class="edgePath" style="opacity:1"><path class="path" d="M558.33203125,72L558.33203125,106.5L586.0588107638889,141" marker-end="url(#arrowhead53)" style="fill:none"></path><defs><marker id="arrowhead53" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M645.12890625,72L645.12890625,106.5L617.4021267361111,141" marker-end="url(#arrowhead54)" style="fill:none"></path><defs><marker id="arrowhead54" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M300.01171875,72L300.01171875,106.5L327.7384982638889,141" marker-end="url(#arrowhead55)" style="fill:none"></path><defs><marker id="arrowhead55" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M386.80859375,72L386.80859375,106.5L359.0818142361111,141" marker-end="url(#arrowhead56)" style="fill:none"></path><defs><marker id="arrowhead56" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M106.125,72L106.125,106.5L106.125,141" marker-end="url(#arrowhead57)" style="fill:none"></path><defs><marker id="arrowhead57" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform="translate(645.12890625,106.5)"><g transform="translate(-40.3984375,-9.5)" class="label"><rect rx="0" ry="0" width="80.796875" height="19" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1">遍历修改a2</tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform="translate(386.80859375,106.5)"><g transform="translate(-20.9921875,-9.5)" class="label"><rect rx="0" ry="0" width="41.984375" height="19" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1">a2=a1</tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform=""><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g></g><g class="nodes"><g class="node default" id="B" transform="translate(106.125,160.5)" style="opacity:1"><rect rx="0" ry="0" x="-63.125" y="-19.5" width="126.25" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-53.125,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">{ 1, 2, 3, 4, 5 }</tspan></text></g></g></g><g class="node default" id="a1" transform="translate(106.125,52.5)" style="opacity:1"><rect rx="0" ry="0" x="-18.3984375" y="-19.5" width="36.796875" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-8.3984375,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">a1</tspan></text></g></g></g><g class="node default" id="B2" transform="translate(343.41015625,160.5)" style="opacity:1"><rect rx="0" ry="0" x="-63.125" y="-19.5" width="126.25" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-53.125,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">{ 1, 2, 3, 4, 5 }</tspan></text></g></g></g><g class="node default" id="A21" transform="translate(300.01171875,52.5)" style="opacity:1"><rect rx="0" ry="0" x="-18.3984375" y="-19.5" width="36.796875" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-8.3984375,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">a1</tspan></text></g></g></g><g class="node default" id="A22" transform="translate(386.80859375,52.5)" style="opacity:1"><rect rx="0" ry="0" x="-18.3984375" y="-19.5" width="36.796875" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-8.3984375,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">a2</tspan></text></g></g></g><g class="node default" id="B3" transform="translate(601.73046875,160.5)" style="opacity:1"><rect rx="5" ry="5" x="-63.125" y="-19.5" width="126.25" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-53.125,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">{ 2, 3, 4, 5, 6 }</tspan></text></g></g></g><g class="node default" id="A31" transform="translate(558.33203125,52.5)" style="opacity:1"><rect rx="0" ry="0" x="-18.3984375" y="-19.5" width="36.796875" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-8.3984375,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">a1</tspan></text></g></g></g><g class="node default" id="A32" transform="translate(645.12890625,52.5)" style="opacity:1"><rect rx="0" ry="0" x="-18.3984375" y="-19.5" width="36.796875" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-8.3984375,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">a2</tspan></text></g></g></g></g></g></svg></pre><p><code>数组变量 ≠ 数组</code></p><ul><li><code>数组变量</code> 是 <code>数组</code> 的管理者，而不是所有者，非 <code>数组</code> 本身</li><li><code>数组</code> 必须创建出来，然后交给 <code>数组变量</code> 管理</li><li><code>数组变量</code> 之间的赋值，是管理权限的赋予</li><li><code>数组变量</code> 之间的比较，是判断是否管理同一个 <code>数组</code></li><li>两个 <code>数组</code> 即使内容相同也不等同，判断两个 <code>数组</code> 是否相等，需遍历逐个元素</li><li>复制 <code>数组</code> ，必须遍历源数组，将每个元素逐一拷贝给目的数组</li></ul><h3 id="遍历"><a class="anchor" href="#遍历">#</a> 遍历</h3><h4 id="for-循环"><a class="anchor" href="#for-循环">#</a> for 循环</h4><p>让循环变量 i 从 0 到小于数组的 length，这样循环体内最大的 i 正好是数组最大的有效下标。</p><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token comment">// 在给定的数据中，查找某个数据是否存在</span><br><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> x <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextlnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> loc <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><br><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        loc <span class="token operator">=</span> i<span class="token punctuation">;</span><br>        <span class="token keyword">break</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br><span class="token keyword">if</span><span class="token punctuation">(</span> loc <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"是第"</span><span class="token operator">+</span><span class="token punctuation">(</span>loc<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"不在其中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>常见错误：<ul><li>循环结束条件写成 &lt;= 数组长度</li><li>离开循环后，继续使用 i 的值来做数组元素的下标</li></ul></li></ul><h4 id="for-each-循环"><a class="anchor" href="#for-each-循环">#</a> for-each 循环</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>类型<span class="token operator">></span><span class="token operator">&lt;</span>变量<span class="token operator">></span><span class="token operator">:</span><span class="token operator">&lt;</span>数组<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">{</span><br>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>数组中的每一个元素取出来作为这个类型的变量</li><li>非常适用于遍历读出数组，但是<strong>不能修改</strong>数组，因为只能读出数组中的某一元素，但不知道索引值。</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token comment">// 在给定的数据中，查找某个数据是否存在</span><br><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> x <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextlnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">boolean</span> found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token comment">// 对于 data 数组中的每一个元素，循环的每一轮将其取出作为一个 k。</span><br>    <span class="token comment">// 所以每一轮的 k 都是变化的，第一轮 k=data [0]，第二轮 k=data [2]...</span><br>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br>        <span class="token keyword">break</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br><span class="token keyword">if</span><span class="token punctuation">(</span> found <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"在其中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"不在其中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h3 id="例子"><a class="anchor" href="#例子">#</a> 例子</h3><h4 id="判断是否为素数"><a class="anchor" href="#判断是否为素数">#</a> 判断是否为素数</h4><ul><li>方案一：从 <code>2</code> 到 <code>x-1</code> 测试是否可以整除 <code>循环x次</code></li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> x <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">boolean</span> isPrime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br><br><span class="token keyword">if</span> <span class="token punctuation">(</span> x <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    isPrime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">if</span> <span class="token punctuation">(</span> x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        isPrime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br>        <span class="token keyword">break</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br><br><span class="token keyword">if</span> <span class="token punctuation">(</span> isPrime <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"是素数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"不是素数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>方案 2： 去掉偶数后，从 <code>3</code> 到 <code>x-1</code> ，每次加 <code>2</code> <code>循环次数减半x/2</code></li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> x <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">boolean</span> isPrime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br><br><span class="token keyword">if</span> <span class="token punctuation">(</span> x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> x<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x<span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    isPrime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token keyword">if</span> <span class="token punctuation">(</span> x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            isPrime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br>            <span class="token keyword">break</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br><br><span class="token keyword">if</span> <span class="token punctuation">(</span> isPrime <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"是素数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"不是素数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>方案 3：无须到 <code>x-1</code> ，到 <code>sqrt(x)</code> 就够了 <code>遍历次数最少，x的平方根</code></li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> x <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">boolean</span> isPrime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br><br><span class="token keyword">if</span> <span class="token punctuation">(</span> x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> x<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x<span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    isPrime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token keyword">if</span> <span class="token punctuation">(</span> x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            isPrime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br>            <span class="token keyword">break</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br><br><span class="token keyword">if</span> <span class="token punctuation">(</span> isPrime <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"是素数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"不是素数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h4 id="构造素数表"><a class="anchor" href="#构造素数表">#</a> 构造素数表</h4><ul><li>方案 1：构造前 50 个素数的表</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>primes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><br><br>MAIN_LOOP<span class="token operator">:</span><br><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> cnt<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token keyword">if</span><span class="token punctuation">(</span> x<span class="token operator">%</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            <span class="token keyword">continue</span> MAIN_LOOP<span class="token punctuation">;</span> <span class="token comment">// 不是素数则跳过</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>    primes<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// 只有素数才会被赋值</span><br>    <span class="token comment">// 执行顺序：primes [cnt] = x; cnt++;</span><br><span class="token punctuation">}</span><br><span class="token comment">//for-each 遍历输出所有元素值</span><br><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">:</span>primes<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>方案 2：构造 100 以内的素数表</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始化时，所有元素 = false</span><br><br><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> isPrime<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 遍历后全部赋值为 true</span><br><span class="token punctuation">}</span><br><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> isPrime<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果 i 没有被标记为非素数</span><br>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> k <span class="token operator">&lt;</span> isPrime<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            <span class="token comment">// 将 2i、3i、4i 直至 ai &lt; n 的数标记为非素数</span><br>            isPrime<span class="token punctuation">[</span>i<span class="token operator">*</span>k<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br><br><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>isPrime<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="二维数组"><a class="anchor" href="#二维数组">#</a> 二维数组</h2><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><p>可以理解为 a 是一个 3 行 5 列 的矩阵：</p><table><tbody><tr><td>a[0][0]</td><td>a[0][1]</td><td>a[0][2]</td><td>a[0][3]</td><td>a[0][4]</td></tr><tr><td>a[1][0]</td><td>a[1][1]</td><td>a[1][2]</td><td>a[1][3]</td><td>a[1][4]</td></tr><tr><td>a[2][0]</td><td>a[2][1]</td><td>a[2][2]</td><td>a[2][3]</td><td>a[2][4]</td></tr></tbody></table><h3 id="遍历-2"><a class="anchor" href="#遍历-2">#</a> 遍历</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">*</span>j<span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li><code>a[i][j]</code> 是一个 int</li><li>表示第 <code>i</code> 行第 <code>j</code> 列上的单元<ul><li>不存在 <code>a[i,j]</code> 的写法</li></ul></li></ul><h3 id="初始化"><a class="anchor" href="#初始化">#</a> 初始化</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><br>    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><br><span class="token punctuation">}</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>编译器来数数</li><li>每行一个 {}，逗号分隔</li><li>最后的逗号可以存在，来自 C 语言的古老传统</li><li>如果省略，表示补零</li></ul><h3 id="例子-2"><a class="anchor" href="#例子-2">#</a> 例子</h3><h4 id="tic-tac-toe游戏"><a class="anchor" href="#tic-tac-toe游戏">#</a> tic-tac-toe 游戏</h4><ul><li>读入矩阵</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">final</span> <span class="token keyword">int</span> SIZE <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><br><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><br><span class="token keyword">boolean</span> gotResult <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> numOfX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> numOfO <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br><br><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>SIZE<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>检查行</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    numOfX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>    numOfO <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token keyword">if</span> <span class="token punctuation">(</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            numOfX <span class="token operator">++</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>            numOfO <span class="token operator">++</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>    <span class="token keyword">if</span> <span class="token punctuation">(</span> numOfX <span class="token operator">==</span> SIZE <span class="token operator">||</span> numOfO <span class="token operator">==</span> SIZE <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        gotResult <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br>        <span class="token keyword">break</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>检查列</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>gotResult <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        numOfX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>        numOfO <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>        <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            <span class="token keyword">if</span> <span class="token punctuation">(</span> board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>                numOfX <span class="token operator">++</span><span class="token punctuation">;</span><br>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>                numOfO <span class="token operator">++</span><span class="token punctuation">;</span><br>            <span class="token punctuation">}</span><br>        <span class="token punctuation">}</span><br>        <span class="token keyword">if</span> <span class="token punctuation">(</span> numOfX <span class="token operator">==</span> SIZE <span class="token operator">||</span> numOfO <span class="token operator">==</span> SIZE <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            gotResult <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br>            <span class="token keyword">break</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>检查对角线</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>gotResult <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    numOfX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>    numOfO <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token keyword">if</span> <span class="token punctuation">(</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            numOfX <span class="token operator">++</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>            numOfO <span class="token operator">++</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>    <span class="token keyword">if</span> <span class="token punctuation">(</span> numOfX <span class="token operator">==</span> SIZE <span class="token operator">||</span> numOfO <span class="token operator">==</span> SIZE <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        gotResult <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>检查反对角线</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>gotResult <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    numOfX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>    numOfO <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token keyword">if</span> <span class="token punctuation">(</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>SIZE<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            numOfX <span class="token operator">++</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>            numOfO <span class="token operator">++</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>    <span class="token keyword">if</span> <span class="token punctuation">(</span> numOfX <span class="token operator">==</span> SIZE <span class="token operator">||</span> numOfO <span class="token operator">==</span> SIZE <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        gotResult <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> gotResult <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">if</span> <span class="token punctuation">(</span> numOfX <span class="token operator">==</span> SIZE <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"X WIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"O WIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h1 id="小测验"><a class="anchor" href="#小测验">#</a> 小测验</h1><ol><li class="quiz"><p>若有定义： <code>int a[2][3];</code> ，则以下选项中不越界的正确的访问有：</p><ul class="options"><li>a[2][0]</li><li>a[2][3]</li><li class="correct">a[0][0]</li><li>a[0][3]</li></ul></li><li class="quiz"><p>以下程序片段的输出结果是：</p><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><br><span class="token keyword">for</span> <span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul class="options"><li class="correct">369</li><li>不能编译</li><li>123</li><li>运行时下标越界</li></ul></li></ol><h1 id="编程题"><a class="anchor" href="#编程题">#</a> 编程题</h1><h2 id="题目1-多项式加法5分"><a class="anchor" href="#题目1-多项式加法5分">#</a> 题目 1. 多项式加法（5 分）</h2><ul><li><p><strong>题目内容</strong><br>一个多项式可以表达为 x 的各次幂与系数乘积的和，比如：</p><p><code>2x6+3x5+12x3+6x+20</code></p><p>现在，你的程序要读入两个多项式，然后输出这两个多项式的和，也就是把对应的幂上的系数相加然后输出。</p><p>程序要处理的幂最大为 100。</p></li><li><p><strong>输入格式</strong><br>总共要输入两个多项式，每个多项式的输入格式如下：</p><p>每行输入两个数字，第一个表示幂次，第二个表示该幂次的系数，所有的系数都是整数。第一行一定是最高幂，最后一行一定是 0 次幂。</p><p>注意第一行和最后一行之间不一定按照幂次降低顺序排列；如果某个幂次的系数为 0，就不出现在输入数据中了；0 次幂的系数为 0 时还是会出现在输入数据中。</p></li><li><p><strong>输出格式</strong><br>从最高幂开始依次降到 0 幂，如：</p><p><code>2x6+3x5+12x3-6x+20</code></p><p>注意其中的 x 是小写字母 x，而且所有的符号之间都没有空格，如果某个幂的系数为 0 则不需要有那项。</p></li><li><p><strong>输入样例</strong><br>6 2<br>5 3<br>3 12<br>1 6<br>0 20<br>6 2<br>5 3<br>2 12<br>1 6<br>0 20</p></li><li><p><strong>输出样例</strong><br>4x6+6x5+12x3+12x2+12x+40</p></li></ul><h3 id="解题代码"><a class="anchor" href="#解题代码">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br>    <br>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <br>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> poly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><br>        <span class="token keyword">boolean</span> isFirst <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 是否为首个</span><br>        <br>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 循环读入两个多项式</span><br>            <span class="token keyword">do</span> <span class="token punctuation">{</span><br>                a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 幂</span><br>                b <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 系数</span><br><br>                poly<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+=</span> b<span class="token punctuation">;</span> <span class="token comment">// 幂 => 系数和</span><br>                <br>            <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span> a <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 幂为 0 时，当前多项式结束</span><br>        <span class="token punctuation">}</span><br>        <br>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 从高到低</span><br>            <span class="token keyword">if</span><span class="token punctuation">(</span> poly<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 系数不为 0 的则显示</span><br>                <br>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFirst <span class="token operator">&amp;&amp;</span> poly<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 非首个，且系数和大于 0，添加 + </span><br>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>                <span class="token punctuation">}</span><br>                <br>                <span class="token keyword">if</span> <span class="token punctuation">(</span>poly<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 系数为 1 时，不显示系数和                </span><br>                    <span class="token keyword">if</span><span class="token punctuation">(</span>poly<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 系数为 - 1 时，只显示 -</span><br>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>poly<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示 系数和</span><br>                    <span class="token punctuation">}</span><br>                <span class="token punctuation">}</span><br>                <br>                <span class="token comment">// 幂为 0 时 不显示 x 和幂值，幂为 1 时不显示幂值</span><br>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <br>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <br>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <br>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示 幂值</span><br>                    <span class="token punctuation">}</span><br>                <span class="token punctuation">}</span><br>                <br>                isFirst <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 第一轮输出后，赋值为非首个</span><br>                <br>            <span class="token punctuation">}</span><br>        <span class="token punctuation">}</span><br>        <br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
        <category>零基础学Java语言-浙江大学-翁恺</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第6周 使用对象</title>
    <url>/shoka/program/java/course01/week06/</url>
    <content><![CDATA[<div class="note info"><p>以下为个人学习笔记和习题整理<br>课程：零基础学 Java 语言 - 浙江大学 - 翁恺 @ 中国大学 MOOC<br><a href="https://www.icourse163.org/course/ZJU-1001541001" target="_blank" rel="noopener">https://www.icourse163.org/course/ZJU-1001541001</a></p></div><h1 id="课堂笔记"><a class="anchor" href="#课堂笔记">#</a> 课堂笔记</h1><h2 id="字符类型-char"><a class="anchor" href="#字符类型-char">#</a> 字符类型 char</h2><ul><li>字符也是 Java 中基础的数据类型之一<ul><li>用<strong>单引号</strong>表示的字符： <code>'a'</code> , <code>'1'</code></li></ul></li><li>Java 采用 <code>Unicode16</code> 表达字符，在所有的机器上，不管 CPU、操作系统和本地语言，字符类型是一致和统一的。</li><li>一个汉字也是 Unicode 的一个字符，所以也是 Java 的一个字符。</li></ul><h3 id="字符计算"><a class="anchor" href="#字符计算">#</a> 字符计算</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><br>c<span class="token operator">++</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果为：B</span><br><br><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token string">'Z'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果为：25</span><br><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果为：66</span><br></pre></td></tr></table></figure><ul><li>一个字符加一个数字得到 Unicode 码表中的那个数之后的字符</li><li>两个字符的减，得到它们在表中的距离</li><li>char 也可以和 int 之间相互赋值，输出字符在 Unicode 码表中的位置</li></ul><h3 id="大小写转换"><a class="anchor" href="#大小写转换">#</a> 大小写转换</h3><ul><li>字母和数字在 Unicode 表中是顺序排列的</li><li>大写字母和小写字母是分开排列的，不在一起</li><li><code>'a' - 'A'</code> 可以得到两段之间的距离</li><li><code>a + 'a' - 'A'</code> 可以把一个大写字母变成小写字母</li><li><code>a + 'A' - 'a'</code> 可以把一个小写字母变成大写字母</li></ul><h3 id="字符大小比较"><a class="anchor" href="#字符大小比较">#</a> 字符大小比较</h3><ul><li>字符可以比较大小，依据是它们在 Unicode 表中的编号<blockquote><p>'0' &lt; '9'<br>'A' &lt; 'Z'<br>'a' &gt; 'Z'<br>'Z' &lt; 'a'</p></blockquote></li></ul><h3 id="逃逸字符"><a class="anchor" href="#逃逸字符">#</a> 逃逸字符</h3><ul><li>用来表达无法印出来的控制字符或特殊字符，它由一个反斜杠 &quot;\&quot; 开头，后面跟上另一个字符，这两个字符合起来，组成了一个字符。</li></ul><table><tbody><tr><td>字符</td><td>意义</td><td>字符</td><td>意义</td></tr><tr><td>\b</td><td>回退一格（但不删除）</td><td>&quot;</td><td>双引号</td></tr><tr><td>\t</td><td>到下一个表格位</td><td>’</td><td>单引号</td></tr><tr><td>\n</td><td>换行</td><td>\</td><td>反斜杠本身</td></tr><tr><td>\r</td><td>回车</td></tr></tbody></table><h2 id="包裹类型"><a class="anchor" href="#包裹类型">#</a> 包裹类型</h2><ul><li><p>对于基本数据类型，Java 提供了对应的包裹 (wrap) 类型。</p></li><li><p>这些包裹类型将一个基本数据类型的数据转换成对象的形式，从而使得它们可以像对象一样参与运算和传递。</p></li><li><p>下表列出了基本数据类型所对应的包裹类型：</p></li></ul><table><thead><tr><th>基本类型</th><th>包裹类型</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><ul><li>除了 int 和 char 以外，包裹类型就是把基本类型的名字的第一个字母大写。</li><li>在 Java 的系统类库中，所有第一个字母大写的，都是类的名字。所以在编辑程序的时候，一定要小心大小写，以免一不小心犯错。</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token comment">// 定义包裹类型变量</span><br><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><br><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token comment">// 获得包裹类型的值</span><br><span class="token class-name">Integer</span> iii <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> i <span class="token operator">=</span> iii<span class="token punctuation">;</span><br></pre></td></tr></table></figure><h3 id="用途"><a class="anchor" href="#用途">#</a> 用途</h3><ul><li><p>当需要让一个类或对象做事情的时候，使用 <code>.</code> 运算符。</p></li><li><p>获得该类型的最大最小值</p></li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<br><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<br></pre></td></tr></table></figure><ul><li>判断这个字符是否是数字</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>判断这个字符是不是字母</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isLetter</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>判断这个字符是不是字母或数字</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>判断这个字符是不是⼩写字母</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>判断这个字符是不是⼤写字母</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>判断这个字符是不是⼀种空格</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isWhitespace</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>把这个字符转换成⼩写</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>把这个字符转换成⼤写</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><br></pre></td></tr></table></figure><h2 id="字符串"><a class="anchor" href="#字符串">#</a> 字符串</h2><ul><li>用<strong>双引号</strong>括起来的 0 个或多个字符就是一个字符串字面量<br><code>“hello”</code> <code>“1”</code> <code>“”</code></li></ul><h3 id="输入字符串"><a class="anchor" href="#输入字符串">#</a> 输入字符串</h3><ul><li>读入一个单词，单词的标志是空格、tab、换行</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>读入一整行</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><h3 id="字符串变量-string"><a class="anchor" href="#字符串变量-string">#</a> 字符串变量 String</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">String</span> s<span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>String 是一个类。</li><li>String 的变量和数组变量类似，它并不存放字符串，不是字符串的所有者，它是字符串的管理者。</li></ul><h4 id="new-创建对象"><a class="anchor" href="#new-创建对象">#</a> new 创建对象</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>创建了一个 String 的对象</li><li>用 &quot;a string&quot; 初始化这个对象</li><li>创建管理这个对象的变量 s</li><li>让 s 管理这个对象</li></ul><pre class="mermaid"><svg id="mermaid-1590862925095" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width:89.61px" viewBox="0 0 89.609375 163"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity:1"><path class="path" d="M44.8046875,116L44.8046875,81.5L44.8046875,47" marker-end="url(#arrowhead8)" style="fill:none"></path><defs><marker id="arrowhead8" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity:1" transform="translate(44.8046875,81.5)"><g transform="translate(-16,-9.5)" class="label"><rect rx="0" ry="0" width="32" height="19" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1">管理</tspan></text></g></g></g><g class="nodes"><g class="node default" id="A" transform="translate(44.8046875,27.5)" style="opacity:1"><rect rx="5" ry="5" x="-36.8046875" y="-19.5" width="73.609375" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-26.8046875,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">a string</tspan></text></g></g></g><g class="node default" id="B" transform="translate(44.8046875,135.5)" style="opacity:1"><circle x="-13.2421875" y="-19.5" r="19.5" class="label-container"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-3.2421875,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">s</tspan></text></g></g></g></g></g></svg></pre><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li>编译器创建一个 String 类的对象交给 s 来管理</li></ul><h4 id="变量赋值"><a class="anchor" href="#变量赋值">#</a> 变量赋值</h4><pre class="mermaid"><svg id="mermaid-1590862928174" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width:216.25px" viewBox="0 0 216.25 163"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity:1"><path class="path" d="M45.4140625,47L45.4140625,81.5L85.38454861111111,116" marker-end="url(#arrowhead10)" style="fill:none"></path><defs><marker id="arrowhead10" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g><g class="edgePath" style="opacity:1"><path class="path" d="M170.5390625,47L170.5390625,81.5L130.56857638888889,116" marker-end="url(#arrowhead11)" style="fill:none"></path><defs><marker id="arrowhead11" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width:1;stroke-dasharray:1,0"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity:1" transform="translate(45.4140625,81.5)"><g transform="translate(-14.734375,-9.5)" class="label"><rect rx="0" ry="0" width="29.46875" height="19" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1">new</tspan></text></g></g><g class="edgeLabel" style="opacity:1" transform="translate(170.5390625,81.5)"><g transform="translate(-12.859375,-9.5)" class="label"><rect rx="0" ry="0" width="25.71875" height="19" style="fill:#e8e8e8"></rect><text><tspan xml:space="preserve" dy="1em" x="1">b=a</tspan></text></g></g></g><g class="nodes"><g class="node default" id="A" transform="translate(45.4140625,27.5)" style="opacity:1"><rect rx="5" ry="5" x="-37.4140625" y="-19.5" width="74.828125" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-27.4140625,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">String a</tspan></text></g></g></g><g class="node default" id="B" transform="translate(170.5390625,27.5)" style="opacity:1"><rect rx="5" ry="5" x="-37.7109375" y="-19.5" width="75.421875" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-27.7109375,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">String b</tspan></text></g></g></g><g class="node default" id="C" transform="translate(107.9765625,135.5)" style="opacity:1"><rect rx="0" ry="0" x="-50" y="-19.5" width="100" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-40,-9.5)"><text><tspan xml:space="preserve" dy="1em" x="1">一个字符串</tspan></text></g></g></g></g></g></svg></pre><ul><li>字符串变量中，a、b 是管理者，不是所有者。b=a 是 b 和 a 都管理 a 的字符串。</li><li>int 变量中，a、b 是所有者，b=a 是改变本身。</li></ul><h4 id="内容比较-equals"><a class="anchor" href="#内容比较-equals">#</a> 内容比较 equals</h4><ul><li>比较是否同一个</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">if</span><span class="token punctuation">(</span> input <span class="token operator">==</span> <span class="token string">"bye"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li><code>equals</code> 比较内容是否相同</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">if</span><span class="token punctuation">(</span> input<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h3 id="字符串连接"><a class="anchor" href="#字符串连接">#</a> 字符串连接 +</h3><ul><li>用加号 (+) 可以连接两个字符串<br><code>&quot;hello&quot; + &quot;world&quot;</code> → <code>&quot;helloworld&quot;</code></li><li>当 <code>+</code> 的一边是字符串而另一边不是时，会将另一边表达为字符串，然后做连接<br><code>&quot;I’m &quot; + 18</code> → <code>&quot;I’m 18&quot;</code><br><code>1 + 2 + &quot;age&quot;</code> → <code>&quot;3age&quot;</code><br><code>&quot;age&quot; + 1 + 2</code> → <code>&quot;age12&quot;</code></li></ul><h3 id="字符串运算"><a class="anchor" href="#字符串运算">#</a> 字符串运算 .</h3><ul><li>字符串是对象，对它的所有操作都是通过 <code>.</code> 这个运算符来进行的</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>字符串<span class="token punctuation">.</span>操作<br></pre></td></tr></table></figure><ul><li><p>对 <code>.</code> 左边的这个字符串，做右边的那个操作</p></li><li><p>左边的字符串可以是变量，也可以是常量</p></li><li><p>Java 的字符串是一种特殊的 <code>不可变</code> 对象，所有的字符串操作都是<strong>产生一个新的字符串</strong>，而不是对原来的字符串的修改。</p></li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ABC</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc</span><br></pre></td></tr></table></figure><h4 id="大小比较-compareto"><a class="anchor" href="#大小比较-compareto">#</a> 大小比较 compareTo</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><br>s1<span class="token punctuation">.</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token comment">// 可以不区分大小写地比较大小</span><br></pre></td></tr></table></figure><ul><li>如果 s1 比 s2 小，那么结果是负的</li><li>如果 s1 和 s2 相等，那么结果是 0</li><li>如果 s1 比 s2 大，那么结果是正的</li></ul><h4 id="获得长度-length"><a class="anchor" href="#获得长度-length">#</a> 获得长度 length ()</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Hellola"</span><span class="token punctuation">;</span><br>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出： 7</span><br><br><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"one"</span><span class="token punctuation">;</span><br>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：3</span><br><br><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><br>str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出： 0</span><br><br><span class="token class-name">String</span> str3<span class="token punctuation">;</span><br>str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error! 因为 str3 没有管理任何 String 对象</span><br></pre></td></tr></table></figure><h4 id="访问字符串里的字符-charat"><a class="anchor" href="#访问字符串里的字符-charat">#</a> 访问字符串里的字符 charAT</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s<span class="token punctuation">.</span><span class="token function">charAT</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>返回在 index 上的单个字符</li><li>index 的范围是 <code>0</code> 到 <code>length()-1</code></li><li>第一个字符的 index 是 0，和数组一样</li><li>但是不能用 for-each 循环来遍历字符串</li></ul><h4 id="得到子串-substring"><a class="anchor" href="#得到子串-substring">#</a> 得到子串 substring</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>得到从 n 号位置到末尾的全部内容</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>得到从 b 号位置到 e 号位置<strong>之前</strong>的内容</li></ul><h4 id="寻找字符-indexof"><a class="anchor" href="#寻找字符-indexof">#</a> 寻找字符 indexOf</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s<span class="token punctuation">.</span><span class="token function">index0f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>得到 c 字符所在的位置，-1 表示不存在</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s<span class="token punctuation">.</span><span class="token function">index0f</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>n<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>从 n 号位置开始寻找 c 字符</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s<span class="token punctuation">.</span><span class="token function">index0f</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>找到字符串 t 所在的位置</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s<span class="token punctuation">.</span><span class="token function">lastIndex0f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><br>s<span class="token punctuation">.</span><span class="token function">lastIndex0f</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>n<span class="token punctuation">)</span><br>s<span class="token punctuation">.</span><span class="token function">lastIndex0f</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>从右边开始找，各部分参数同上</li></ul><h4 id="以x起始或结束-startswith-endswith"><a class="anchor" href="#以x起始或结束-startswith-endswith">#</a> 以 x 起始或结束 startsWith endsWith</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><br>s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><br></pre></td></tr></table></figure><h4 id="去除两端空格-trim"><a class="anchor" href="#去除两端空格-trim">#</a> 去除两端空格 trim</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br></pre></td></tr></table></figure><h4 id="内容替换-replace"><a class="anchor" href="#内容替换-replace">#</a> 内容替换 replace</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">)</span><br></pre></td></tr></table></figure><h4 id="大小写转换-tolowercase-touppercase"><a class="anchor" href="#大小写转换-tolowercase-touppercase">#</a> 大小写转换 toLowerCase toUpperCase</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br></pre></td></tr></table></figure><h1 id="编程题"><a class="anchor" href="#编程题">#</a> 编程题</h1><h2 id="题目1-单词长度5分"><a class="anchor" href="#题目1-单词长度5分">#</a> 题目 1. 单词长度（5 分）</h2><ul><li><p><strong>题目内容</strong><br>你的程序要读入一行文本，其中以空格分隔为若干个单词，以 <code>.</code> 结束。你要输出这行文本中每个单词的长度。这里的单词与语言无关，可以包括各种符号，比如 “it's” 算一个单词，长度为 4。注意，行中可能出现连续的空格。</p></li><li><p><strong>输入格式</strong><br>输入在一行中给出一行文本，以 <code>.</code> 结束，结尾的句号不能计算在最后一个单词的长度内。</p></li><li><p><strong>输出格式</strong><br>在一行中输出这行文本对应的单词的长度，每个长度之间以空格隔开，行末没有最后的空格。</p></li><li><p><strong>输入样例</strong><br>It's great to see you here.</p></li><li><p><strong>输出样例</strong><br>4 5 2 3 3 4</p></li></ul><h3 id="解题代码"><a class="anchor" href="#解题代码">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br>    <br>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <br>        <span class="token class-name">String</span> s <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字符串输入</span><br>        <span class="token class-name">String</span> comma <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><br>        <span class="token keyword">int</span> len<span class="token punctuation">;</span> <span class="token comment">// 字符串长度</span><br>        <br>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>            <br>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>                len <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span><br>                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>comma <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><br>                <span class="token punctuation">}</span>               <br>                <span class="token keyword">break</span><span class="token punctuation">;</span><br>            <span class="token punctuation">}</span><br>            <br>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>comma <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><br>            <br>            s <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下一个字符串输入</span><br>            comma <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token comment">// 下一个字符串前有空格</span><br>        <span class="token punctuation">}</span><br>                <br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="题目2-gps数据处理5分"><a class="anchor" href="#题目2-gps数据处理5分">#</a> 题目 2. GPS 数据处理（5 分）</h2><ul><li><p><strong>题目内容</strong><br>NMEA-0183 协议是为了在不同的 GPS（全球定位系统）导航设备中建立统一的 BTCM（海事无线电技术委员会）标准，由美国国家海洋电子协会（NMEA-The National Marine Electronics Associa-tion）制定的一套通讯协议。GPS 接收机根据 NMEA-0183 协议的标准规范，将位置、速度等信息通过串口传送到 PC 机、PDA 等设备。</p><p>NMEA-0183 协议是 GPS 接收机应当遵守的标准协议，也是目前 GPS 接收机上使用最广泛的协议，大多数常见的 GPS 接收机、GPS 数据处理软件、导航软件都遵守或者至少兼容这个协议。</p><p>NMEA-0183 协议定义的语句非常多，但是常用的或者说兼容性最广的语句只有 $GPGGA、$GPGSA、$GPGSV、$GPRMC、$GPVTG、$GPGLL 等。</p><p>其中 $GPRMC 语句的格式如下：</p><p><code>$GPRMC,024813.640,A,3158.4608,N,11848.3737,E,10.05,324.27,150706,,,A*50</code></p><p>这里整条语句是一个文本行，行中以逗号 <code>,</code> 隔开各个字段，每个字段的大小（长度）不一，这里的示例只是一种可能，并不能认为字段的大小就如上述例句一样。</p><blockquote><p>字段 0：$GPRMC，语句 ID，表明该语句为 Recommended Minimum Specific GPS/TRANSIT Data（RMC）推荐最小定位信息<br>字段 1：UTC 时间，hhmmss.sss 格式<br>字段 2：状态，A = 定位，V = 未定位<br>字段 3：纬度 ddmm.mmmm，度分格式（前导位数不足则补 0）<br>字段 4：纬度 N（北纬）或 S（南纬）<br>字段 5：经度 dddmm.mmmm，度分格式（前导位数不足则补 0）<br>字段 6：经度 E（东经）或 W（西经）<br>字段 7：速度，节，Knots<br>字段 8：方位角，度<br>字段 9：UTC 日期，DDMMYY 格式<br>字段 10：磁偏角，（000 - 180）度（前导位数不足则补 0）<br>字段 11：磁偏角方向，E = 东 W = 西<br>字段 16：校验值</p></blockquote><p>这里， <code>*</code> 为校验和识别符，其后面的两位数为校验和，代表了 <code>$</code> 和 <code>*</code> 之间所有字符（不包括这两个字符）的异或值的十六进制值。上面这条例句的校验和是十六进制的 50，也就是十进制的 80。</p><p>提示： <code>^</code> 运算符的作用是异或。将 <code>$</code> 和 <code>*</code> 之间所有的字符做 <code>^</code> 运算 (第一个字符和第二个字符异或，结果再和第三个字符异或，依此类推) 之后的值对 65536 取余后的结果，应该和 <code>*</code> 后面的两个十六进制数字的值相等，否则的话说明这条语句在传输中发生了错误。注意这个十六进制值中是会出现 A-F 的大写字母的。另外，如果你需要的话，可以用 <code>Integer.parseInt(s)</code> 从 String 变量 s 中得到其所表达的整数数字；而 <code>Integer.parseInt(s, 16)</code> 从 String 变量 s 中得到其所表达的十六进制数字。</p><p>现在，你的程序要读入一系列 GPS 输出，其中包含 $GPRMC，也包含其他语句。在数据的最后，有一行单独的 <code>END</code> 表示数据的结束。</p><p>你的程序要从中找出 $GPRMC 语句，计算校验和，找出其中校验正确，并且字段 2 表示已定位的语句，从中计算出时间，换算成北京时间。一次数据中会包含多条 $GPRMC 语句，以最后一条语句得到的北京时间作为结果输出。</p><p>你的程序一定会读到一条有效的 $GPRMC 语句。</p></li><li><p><strong>输入格式</strong><br>多条 GPS 语句，每条均以回车换行结束。最后一行是 END 三个大写字母。</p></li><li><p><strong>输出格式</strong><br>6 位数时间，表达为： <code>hh:mm:ss</code><br>其中，hh 是两位数的小时，不足两位时前面补 0；mm 是两位数的分钟，不足两位时前面补 0；ss 是两位数的秒，不足两位时前面补 0。</p></li><li><p><strong>输入样例</strong><br>$GPRMC,024813.640,A,3158.4608,N,11848.3737,E,10.05,324.27,150706,,,A*50<br>END</p></li><li><p><strong>输出样例</strong><br>10:48:13</p></li></ul><h3 id="解题代码-2"><a class="anchor" href="#解题代码-2">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br>    <br>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <br>        <span class="token class-name">String</span> str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字符串输入</span><br>        <span class="token class-name">String</span> substr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><br>        <span class="token class-name">Integer</span> check<span class="token punctuation">,</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ss <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>        <span class="token keyword">int</span> code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>        <br>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">!</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"END"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <br>            <br>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"$GPRMC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>                str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下一个字符串输入</span><br>                <span class="token keyword">continue</span><span class="token punctuation">;</span><br>            <span class="token punctuation">}</span><br>            <br>            <span class="token comment">// 将 $ 和 * 之间所有的字符做 ^ 运算</span><br>            substr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>            <span class="token comment">// 获得 * 后的校验符的十六进制数</span><br>            check <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>            <br>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> substr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>                code <span class="token operator">^=</span> substr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><br>            <span class="token punctuation">}</span><br>            <br>            <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">%</span> <span class="token number">65536</span> <span class="token operator">==</span> check<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 数据合法</span><br>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>                <br>                <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//  已定位</span><br>                    <br>                    hh <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>                    mm <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>                    ss <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>                    <br>                    <span class="token comment">// 输出北京时间</span><br>                    hh <span class="token operator">=</span> <span class="token punctuation">(</span> hh <span class="token operator">+</span> <span class="token number">8</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">;</span><br><br>                    <span class="token keyword">if</span> <span class="token punctuation">(</span> hh <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>                    <span class="token punctuation">}</span><br><br>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>hh<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>mm<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <br>                <span class="token punctuation">}</span>               <br>            <span class="token punctuation">}</span><br>                        <br>            str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下一个字符串输入</span><br>        <span class="token punctuation">}</span><br>                <br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
        <category>零基础学Java语言-浙江大学-翁恺</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第7周 函数</title>
    <url>/shoka/program/java/course01/week07/</url>
    <content><![CDATA[<div class="note info"><p>以下为个人学习笔记和习题整理<br>课程：零基础学 Java 语言 - 浙江大学 - 翁恺 @ 中国大学 MOOC<br><a href="https://www.icourse163.org/course/ZJU-1001541001" target="_blank" rel="noopener">https://www.icourse163.org/course/ZJU-1001541001</a></p></div><h1 id="课堂笔记"><a class="anchor" href="#课堂笔记">#</a> 课堂笔记</h1><h2 id="函数"><a class="anchor" href="#函数">#</a> 函数</h2><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token comment">// 定义一个求和函数</span><br><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><br>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><br>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i<span class="token operator">=</span>a<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"到"</span>b<span class="token operator">+</span><span class="token string">"的和是"</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token comment">// 调用函数</span><br>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h3 id="定义函数"><a class="anchor" href="#定义函数">#</a> 定义函数</h3><ul><li>函数是一块代码，接收零个或多个参数，做一件事情，并返回零个或一个值，用来形成可重复使用的代码。</li><li>可以先想象成数学中的函数： <code>y=f(x)</code></li><li>Java 的函数必须定义在类的内部，成为类的成员。</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>返回值类型<span class="token operator">></span> <span class="token operator">&lt;</span>方法名称<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>参数表<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token operator">&lt;</span>方法体<span class="token operator">></span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li><p><strong>返回类型</strong>：是这个函数运行结束时要返回给调用者的数据的类型，函数可以返回基本数据类型、对象或者 void。返回 void 表示这个函数不返回任何值。</p></li><li><p><strong>函数名称</strong>：是一个 Java 名字，一样要遵循和变量一样的命名规则。</p></li><li><p><strong>参数表</strong>：是 0 个或 1 个或多个参数定义，用逗号 <code>,</code> 分隔。</p></li><li><p>在这个阶段，我们要在所有的函数的返回类型前面加上关键字 <code>static</code> 。 <code>static</code> 表示这个函数属于这个类，而不属于这个类的任何对象，因此我们才可以不制造这个类的对象，而直接从 <code>main()</code> 函数中调用它。</p></li></ul><h3 id="调用函数"><a class="anchor" href="#调用函数">#</a> 调用函数</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre>函数名<span class="token punctuation">(</span>参数值<span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li><code>()</code> 起到了表示函数调用的重要作用</li><li>即使没有参数也需要 <code>()</code></li><li>如果函数有参数，调用函数时必须传递给它数量、类型正确的值</li><li>可以传递给函数的值是表达式的结果，包括<ul><li>字面量</li><li>变量</li><li>函数的返回值</li><li>计算的结果</li></ul></li></ul><h3 id="函数返回"><a class="anchor" href="#函数返回">#</a> 函数返回</h3><ul><li>函数知道每一次是哪里调用它，函数结束的时候会返回到正确的地方。</li></ul><h4 id="从函数中返回值"><a class="anchor" href="#从函数中返回值">#</a> 从函数中返回值</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">return</span><span class="token punctuation">;</span><br><span class="token keyword">return</span> 表达式<span class="token punctuation">;</span><br></pre></td></tr></table></figure><ul><li><code>return</code> 停止函数的执行，并送回一个值</li><li>一个函数里可以出现多个 <code>return</code> 语句，但是保持单一出口是好的做法。</li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span><br>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        ret <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">// 出口一</span><br>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>        ret <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">// 出口二</span><br>    <span class="token punctuation">}</span><br>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token comment">// 出口三</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><ul><li>可以赋值给变量</li><li>可以再传递给函数</li><li>甚至可以丢弃<ul><li>有的时候要的是副作用</li></ul></li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> c<span class="token punctuation">;</span><br>c <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>c <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><br>c <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>c <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br></pre></td></tr></table></figure><h4 id="没有返回值的函数"><a class="anchor" href="#没有返回值的函数">#</a> 没有返回值的函数</h4><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">void</span> 函数名<span class="token punctuation">(</span>参数表<span class="token punctuation">)</span><br></pre></td></tr></table></figure><ul><li>不能使用带值的 return<ul><li>可以没有 return</li></ul></li><li>调用的时候不能做返回值赋值</li></ul><h3 id="参数传递"><a class="anchor" href="#参数传递">#</a> 参数传递</h3><h4 id="类型不匹配"><a class="anchor" href="#类型不匹配">#</a> 类型不匹配</h4><ul><li>当函数期望的参数类型比调用函数时给的值的类型<strong>宽</strong>的时候，编译器能悄悄替你把类型转换好 <code>自动</code></li></ul><blockquote><p><code>char</code> → <code>int</code> → <code>double</code></p></blockquote><ul><li>当函数期望的参数类型比调用函数时给的值的类型<strong>窄</strong>的时候，需要你写<strong>强制类型转换</strong> <code>手动</code></li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">5.0</span><br></pre></td></tr></table></figure><ul><li>当函数期望的参数类型与调用函数时给的值的类型之间<strong>无法转换</strong>的时候，报错！</li></ul><h4 id="传值"><a class="anchor" href="#传值">#</a> 传值</h4><ul><li>Java 语言在调用函数时，永远只能传值给函数</li><li>每个函数都有自己的变量空间，参数也位于这个独立的空间中，和其它函数没有关系</li></ul><h4 id="本地变量"><a class="anchor" href="#本地变量">#</a> 本地变量</h4><ul><li><p>概念</p><ul><li>函数每次运行，都产生一个独立的变量空间，在这个空间中的变量，是函数的这次运行所独有的，称作本地变量</li><li>定义在函数内部的变量，就是本地变量</li><li>参数也是本地变量</li></ul></li><li><p>变量的生存期和作用域</p><ul><li>生存期：什么时候这个变量开始出现，到什么时候它消亡</li><li>作用域：在（代码的）什么范围内可以访问这个变量（这个变量可以起作用）</li><li>对于本地变量，这两个问题的答案是统一的：大括号内 —— 块</li></ul></li><li><p>规则</p><ul><li>本地变量是定义在块内的<ul><li>它可以是定义在函数的块内</li><li>也可以是定义在语句的块内</li><li>甚至可以随便拉一对大括号来定义变量</li></ul></li><li>程序运行加入这个块之前，其中的变量不存在，离开这个块，其中的变量就消失了</li><li>块外面定义的变量在里面仍然有效</li><li><strong>不能</strong>在一个块内定义<strong>同名</strong>的变量，也<strong>不能</strong>定义块外面<strong>定义过</strong>的变量</li><li>本地变量不会被默认初始化</li><li>参数在进入函数的时候就被初始化了</li></ul></li></ul><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br><span class="token punctuation">{</span><br>    <span class="token keyword">int</span> scp1<span class="token punctuation">;</span><span class="token comment">//scp1 出现了</span><br>    <span class="token punctuation">{</span> <span class="token comment">//scp1 还是存在的</span><br>        <span class="token keyword">int</span> scp2<span class="token punctuation">;</span> <span class="token comment">//scp2 出现了</span><br>        <span class="token punctuation">{</span><span class="token comment">//scp1 与 scp2 都还是存在的</span><br>            <span class="token keyword">int</span> scp3<span class="token punctuation">;</span><span class="token comment">//scp1、scp2、scp3 都存在</span><br>        <span class="token punctuation">}</span><br>        <span class="token comment">//scp3 不存在了</span><br>        <span class="token comment">//scp1 与 scp2 还存在</span><br>    <span class="token punctuation">}</span><br>    <span class="token comment">//scp2 不存在了</span><br>    <span class="token comment">//scp1 还存在</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h1 id="编程题"><a class="anchor" href="#编程题">#</a> 编程题</h1><h2 id="题目1-分解质因数5分"><a class="anchor" href="#题目1-分解质因数5分">#</a> 题目 1. 分解质因数（5 分）</h2><ul><li><p><strong>题目内容</strong><br>每个非素数（合数）都可以写成几个素数（也可称为质数）相乘的形式，这几个素数就都叫做这个合数的质因数。比如，6 可以被分解为 2x3，而 24 可以被分解为 2x2x2x3。</p><p>现在，你的程序要读入一个 [2,100000] 范围内的整数，然后输出它的质因数分解式；当读到的就是素数时，输出它本身。</p></li><li><p><strong>输入格式</strong><br>一个整数，范围在 [2,100000] 内。</p></li><li><p><strong>输出格式</strong><br>形如：<br><code>n=axbxcxd</code><br>或<br><code>n=n</code><br>所有的符号之间都没有空格，x 是小写字母 x。</p></li><li><p><strong>输入样例</strong><br>18</p></li><li><p><strong>输出样例</strong><br>18=2x3x3</p></li></ul><h3 id="解题代码"><a class="anchor" href="#解题代码">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br>    <span class="token comment">// 判断是否为素数的函数</span><br>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br>            <span class="token punctuation">}</span><br>        <span class="token punctuation">}</span><br>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <br>        <span class="token keyword">int</span> number <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token class-name">String</span> comma <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><br><br>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <br>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历小于输入值的整数</span><br>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果 number 能被 i 整除</span><br>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 且 i 为素数</span><br>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>comma <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出</span><br>                    comma <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">;</span><br>                    number <span class="token operator">/=</span> i<span class="token punctuation">;</span><br>                <span class="token punctuation">}</span><br>            <span class="token punctuation">}</span>           <br>        <span class="token punctuation">}</span>           <br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure><h2 id="题目2-完数5分"><a class="anchor" href="#题目2-完数5分">#</a> 题目 2. 完数（5 分）</h2><ul><li><p><strong>题目内容</strong><br>一个正整数的因子是所有可以整除它的正整数。而一个数如果恰好等于除它本身外的因子之和，这个数就称为完数。例如 6=1＋2＋3 (6 的因子是 1,2,3)。</p><p>现在，你要写一个程序，读入两个正整数 n 和 m（1&lt;=n&lt;m&lt;1000），输出 [n,m] 范围内所有的完数。</p><p><em>提示：可以写一个函数来判断某个数是否是完数。</em></p></li><li><p><strong>输入格式</strong><br>两个正整数，以空格分隔。</p></li><li><p><strong>输出格式</strong><br>其间所有的完数，以空格分隔，最后一个数字后面没有空格。如果没有，则输出一个空行。</p></li><li><p><strong>输入样例</strong><br>1 10</p></li><li><p><strong>输出样例</strong><br>6</p></li></ul><h3 id="解题代码-2"><a class="anchor" href="#解题代码-2">#</a> 解题代码</h3><figure class="highlight java"><figcaption><span class="lang">java</span></figcaption><table><tr><td class="code"><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><br><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><br>    <span class="token comment">// 判断是否为完数的函数</span><br>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPerfect</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>                sum <span class="token operator">+=</span> j<span class="token punctuation">;</span><br>            <span class="token punctuation">}</span><br>        <span class="token punctuation">}</span><br>        <span class="token keyword">return</span> sum <span class="token operator">==</span> i<span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <br>        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token keyword">int</span> m <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token class-name">String</span> comma <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><br>        <br>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> n <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isPerfect</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>comma <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><br>                comma <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span><br>            <span class="token punctuation">}</span>           <br>        <span class="token punctuation">}</span>           <br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
        <category>零基础学Java语言-浙江大学-翁恺</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>

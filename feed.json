{
    "version": "https://jsonfeed.org/version/1",
    "title": "Yume Shoka | 優萌初華",
    "subtitle": "有夢書架",
    "icon": "https://shoka.lostyu.me/images/favicon.ico",
    "description": "琉璃的医学 & 编程笔记",
    "home_page_url": "https://shoka.lostyu.me",
    "items": [
        {
            "id": "https://shoka.lostyu.me/inter-discipline/health-informatics/specialization-1/course-1/week-1/",
            "url": "https://shoka.lostyu.me/inter-discipline/health-informatics/specialization-1/course-1/week-1/",
            "title": "Week 1. Overview of Health Informatics",
            "date_published": "2020-06-24T05:46:26.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：Health Informatics-Johns Hopkins University @ coursera<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY291cnNlcmEub3JnL3NwZWNpYWxpemF0aW9ucy9oZWFsdGgtaW5mb3JtYXRpY3M=\">https://www.coursera.org/specializations/health-informatics</span></p></div><h1 id=\"health-information-technology-for-patients\"><a class=\"anchor\" href=\"#health-information-technology-for-patients\">#</a> Health Information Technology for Patients</h1><details><summary><span class=\"details-marker\">&nbsp;</span>In this video, we'll start off with talking about health information technology for patients and explore what's going on today and maybe what's going on in the future.</summary><p>在这个视频中，我们将从针对患者的健康信息技术开始，探讨现在已经发生的，以及未来可能发生的事。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>So, you've all been to the doctor, and you've all filled out pieces of paper and clipboards.</summary><p>大家都看过医生，都填过一些纸和笔记板。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>In fact, you've probably filled out 15 pieces of paper on clipboards and wondering why the heck is this not computerized the way everybody else's is.</summary><p>事实上，你可能已经在笔记板上填了 15 张纸，并且想知道为什么这没有像别的地方一样计算机化。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>The good news is that we do have these sorts of questionnaires now on tablets, and you can fill them out either in a doctor's office or at home.</summary><p>好消息是，现在在平板电脑上确实有这类问卷，您可以在医生办公室或家里填写这些问卷。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>So, what questions might come up if you're filling these questionnaires at home is like, what is the accuracy of this information, how should you use this information?</summary><p>如果您在家填写这些问卷，可能会出现哪些问题？这些信息的准确性是多少？您应该如何使用这些信息？</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>But wait, there's more, there are coming different types or new types of questionnaires.</summary><p>但是等等，这里还有更多不同类型的，或者新类型的问卷。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>Sometimes these are called patient reported outcome forms or patient questionnaires.</summary><p>有时，这些被称为由患者报告的结局表格，或患者问卷。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>We're asking information that can come only from the patient, like, how do you feel, are you depressed, are you able to walk, are you able to do the things that you normally do, how do you sleep?</summary><p>我们询问一些只能由患者提供的信息，例如，您的感觉如何，您是否沮丧，是否能够走路，是否能够做您常做的事，睡觉如何？</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>These are not things that we get typically from the clipboard type of questionnaire, we need to get this information.</summary><p>这些不是我们通常从剪贴板式的调查表中获得的东西，而我们需要获取这些信息。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>The type of informatics question that comes out of this is, well, what do you do with this information? Is it true? Can you make clinical decisions based on this?</summary><p>由此产生的信息学问题的类型是，您如何处理这些信息？ 这些是真实的吗？您可以据此做出临床决策吗？</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>If somebody says they're suicidal on this form that's been filled out at home on a computer, what obligations do you have to intervene?</summary><p>如果有人在家里用计算机填写这份表格，说他有自杀倾向，那么您有义务采取哪些干预措施？</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>Making the questionnaire available may raise new questions and new problems about what to do with the information.</summary><p>提供调查表可能会引起有关如何处理信息的新问题。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>You may notice at the top of this, it's called a computer adaptive testing, and here it's the machine, rather the piece of paper the machine can kind of skip around and ask questions that are more relevant to you.</summary><p>您可能会注意到顶部这里，一个计算机自适应的测试。机器不像纸，机器可以跳过并提出与您更相关的问题。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>This can be done through skip logic like if you answer this then answer that, or it can be more sophisticated.</summary><p>这些可以通过跳过逻辑来完成，比如你先回答了这个再回答了那个，或者他可以更复杂。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>Well, if I've established that you're not suicidal, so I'm not going to pursue the suicidal questions, adding the questionnaire on a computer using more capability than you could have on a piece of paper.</summary><p>好吧，如果我确定您没有自杀倾向，那么我就不会继续追问自杀相关的问题。在计算机上填写调查表，可以比在纸上拥有更多的功能。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>I already mentioned that patients may fill things out at home, the main way that patients see their health data these days that's connected to the doctor or the hospital is through something called a patient portal.</summary><p>前面已经提到过，患者可能在家中填写东西。患者主要通过一个所谓的患者门户，来查看他们这些天的健康数据，并与医生或者医院联系。</p></details><p><img data-src=\"http://capitalallergy.com/wp-content/uploads/2014/08/patient-portal2-e1462412347810.jpg\" alt=\"patient-portal\" title=\"patient-portal\"><span class=\"image-info\">Source: Capital Allergy &amp; Respiratory Disease Center. Retrieved August 3, 2017</span></p><details><summary><span class=\"details-marker\">&nbsp;</span>You can see the types of information that patients can get at through the patient portal.</summary><p>你可以看到患者通过这个门户可以获得的信息类型。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>It can range anywhere from their appointments, through real patient data like lab testing, to secure messaging, to the entire patient record.</summary><p>它的范围很广，从预约，到真实的患者数据，如实验室测试，到安全消息传递，再到整个患者记录。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>Well, how does medical care change where the patient can see everything?</summary><p>那么，医疗如何改变患者可以看到的一切？</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>Are the notes more honest?</summary><p>这些记录更诚实吗？</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>We know that there are better because patients will correct errors so that's great, but do in fact the conditions change what they write because they don't want to write something about their mental capacity patients, mental capacity or capabilities.</summary><p>我们知道有更好的选择，因为患者会纠正错误，这样的确很棒。但实际上，由于他们不想写一些有关心智能力的内容，病情会改变他们写下的东西。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>No surprise that we have a digital medical devices.</summary><p>我们拥有数字医疗设备也就不足为奇了。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>You've all probably have had your blood pressure taken by a digital sphygmomanometer, a digital blood pressure cuff.</summary><p>你们可能都已经通过数字血压计、数字血压袖带测量过血压。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>Increasingly, there are digital tools for the direct acquisition of medical data.</summary><p>越来越多的数字工具可以直接获取医疗数据。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>So, there are digital stethoscopes, and digital otoscopes, and digital ophthalmoscope.</summary><p>比如数字听诊器，数字耳镜和数字眼底镜。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>The thing that's interesting when you have these digital formats is that you now can record what the doctor has seen, so that's interesting and that's great for record keeping. It's great for teaching.</summary><p>有趣的是，当使用这些数字格式时，您可以记录医生所见的内容，而且对于保存记录非常有用。 非常适合教学。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>You might even have decision support.</summary><p>你甚至可能有决策支持。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>So imagine that you have a digital stethoscope, and the machine is listening in the same time that you are, and could point out by the way, did you hear the abnormal heart sounds that may indicate something bad?</summary><p>那么想象一下你有一个数字听诊器，在你听诊的同时，机器也在听，并且可以顺便指出，你是否听到一些可能提示病变的异常心音？</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>Finally, we've all heard about wearables and devices or Internet of Things.</summary><p>最后，我们都听说过可穿戴设备或物联网。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>Increasingly, there's lot of devices around the patient.</summary><p>病人周围有越来越多的设备。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>Many of you probably use a fitness tracker, you may have a phone that tracks your heart-rate and such.</summary><p>你们中的很多人可能都使用了健身追踪器，你可能拥有一部可以追踪心律或其他指标的手机。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>There are engineer's coming out with devices all the time.</summary><p>新设备层出不穷。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>A fun one is a contact lens that can measure the glucose level in the fluid on your eye so now a diabetic might not need to prick themselves to get blood to measure the glucose, the contact lens could do it for them, or there might be a chip that they can lick and that chip can now measure basic laboratory values.</summary><p>其中一个有趣的设备是一副隐形眼镜，可以测量眼中液体的葡萄糖水平，这样糖尿病患者就可以无需穿刺来检测血糖，隐形眼镜可以为他们做这些。或者可能有一种芯片，患者可以舔一下芯片，该芯片就可以测量基本的实验室值。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>I already mentioned digital stethoscopes to the heart, to the lung.</summary><p>我已经提到过和心脏、肺部有关的数字听诊器。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>There are devices that can read brainwaves, and a whole number of other devices.</summary><p>还有可以读取脑电波的，以及其他很多设备。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>So again, we have informatics problems come out of these.</summary><p>同样，我们也遇到了信息学方面的问题。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>If you have continuous blood-pressure monitoring at home, well, that's a lot of data and number one where is it that it get stored, but even more importantly what does it mean?</summary><p>如果您在家中连续测量血压，那将获得很多数据，首先这些数据存储在哪里，其次更重要的是，这意味着什么？</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>A whole science and practice of blood pressure management has been based on blood pressures that were obtained infrequently at doctors' offices.</summary><p>整个血压管理的科学和实践，都是基于在医生办公室很少获得的血压。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>Well, how did those blood pressures compare with what you get at home?</summary><p>那么，这些血压与您在家得到的血压相比如何？</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>How do you judge whether or not a blood pressure medication is working if you're getting all these blood pressure measurements all the time?</summary><p>如果您一直在进行血压监测，您如何判断降压药是否有效？</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>So, having a device and getting a lot of data is terrific, what the information we get out of that data is not clear and what knowledge we have to work with that information may not be clear as well.</summary><p>因此，拥有一台设备并获取大量数据是惊人的，我们从数据中获得的信息还不清楚，而我们必须使用哪些知识也可能不清楚。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>So, that's it for our grand tour, a very quick tour of the new and upcoming IT for patients.</summary><p>以上就是针对患者的，一些新的、即将推出的信息化技术的快速概览。</p></details>",
            "tags": [
                "交叉学科",
                "医学信息学",
                "Health Informatics - Johns Hopkins University",
                "Course 1. The Social and Technical Context of Health Informatics",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/java/course-2/week-6/",
            "url": "https://shoka.lostyu.me/computer-science/java/course-2/week-6/",
            "title": "第6周 抽象与接口",
            "date_published": "2020-06-17T11:26:41.000Z",
            "content_html": "<h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"抽象abstract\"><a class=\"anchor\" href=\"#抽象abstract\">#</a> 抽象 <code>abstract</code></h2><p>抽象函数：表达概念而无法实现具体代码的函数。<br>抽象类：表达概念而无法构造出实体的类。</p><p>用 <code>abstract</code> 关键字来定义抽象类。</p><p>抽象类的作用仅仅是表达接口，而不是具体的实现细节。</p><p>抽象类中可以存在抽象方法。<br>抽象方法也是使用 <code>abstract</code> 关键字来修饰。<br>抽象的方法是不完全的，它只是一个方法签名而完全没有方法体，不能带 <code>{}</code> 。</p><p>如果一个类有了一个抽象的方法，这个类就必须声明为抽象类。</p><blockquote><p>有抽象函数的类，一定是抽象类。</p></blockquote><p>一个抽象类可以没有任何抽象方法，所有的方法都有方法体，但是整个类是抽象的。<br>设计这样的抽象类主要是为了防止制造它的对象出来。<br>任何继承类抽象类的非抽象类的对象，可以赋给这个变量。</p><blockquote><p>抽象类不能制造对象，但是可以定义变量。</p></blockquote><p>如果父类是抽象类，那么子类<strong>必须覆盖所有</strong>在父类中的抽象方法，否则子类也成为一个抽象类。</p><h3 id=\"两种抽象\"><a class=\"anchor\" href=\"#两种抽象\">#</a> 两种抽象</h3><ul><li>与具体相对：表示一种概念而非实体</li><li>与细节相对：表示在一定程度上忽略细节而着眼大局</li></ul><h2 id=\"接口interface\"><a class=\"anchor\" href=\"#接口interface\">#</a> 接口 <code>interface</code></h2><p>接口是<strong>纯抽象类</strong></p><ul><li>所有的成员函数都是抽象函数</li><li>所有的成员变量都是 <code>public static final</code></li></ul><p>接口规定了长什么样，但是不管里面有什么。</p><blockquote><p><code>interface</code> 是一种特殊的 <code>class</code> ，使用时取代 <code>class</code> 的位置。</p></blockquote><h3 id=\"实现接口implements\"><a class=\"anchor\" href=\"#实现接口implements\">#</a> 实现接口 <code>implements</code></h3><p>类用 <code>extends</code> ，接口用 <code>implements</code><br>类可以实现很多接口<br>接口可以继承接口，但不能继承类<br>接口不能实现接口</p><h3 id=\"面向接口的编程方式\"><a class=\"anchor\" href=\"#面向接口的编程方式\">#</a> 面向接口的编程方式</h3><p>设计程序时先定义接口，再实现类。<br>任何需要在函数间传入传出的一定是接口，而不是具体的类。<br>是 Java 成功的关键之一，因为极适合多人同时写一个大程序。<br>也是 Java 被批评的要点之一，因为代码量膨胀起来很快。</p><h1 id=\"课内代码\"><a class=\"anchor\" href=\"#课内代码\">#</a> 课内代码</h1><h2 id=\"细胞自动机\"><a class=\"anchor\" href=\"#细胞自动机\">#</a> 细胞自动机</h2><p>死亡：如果活着的邻居的数量＜2 或＞3，则死亡<br>新生：如果正好有 3 个邻居活着，则新生<br>其他情况则保持原状</p><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> cellmachine<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> cell<span class=\"token punctuation\">.</span><span class=\"token class-name\">Cell</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> field<span class=\"token punctuation\">.</span><span class=\"token class-name\">Field</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> field<span class=\"token punctuation\">.</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CellMachine</span> <span class=\"token punctuation\">{</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">&lt;</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">&lt;</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\tfield<span class=\"token punctuation\">.</span><span class=\"token function\">place</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">&lt;</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">&lt;</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">Cell</span> cell <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.2</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\tcell<span class=\"token punctuation\">.</span><span class=\"token function\">reborn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">JFrame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 图形窗口</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultCloseOperation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">.</span>EXIT_ON_CLOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认关闭的操作</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setResizable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cells\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">&lt;</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">&lt;</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token class-name\">Cell</span> cell <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token class-name\">Cell</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> neighbour <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getNeighbour</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token keyword\">int</span> numOfLive <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Cell</span> c <span class=\"token operator\">:</span> neighbour <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t\t\tnumOfLive<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token operator\">+</span>row<span class=\"token operator\">+</span><span class=\"token string\">\"][\"</span><span class=\"token operator\">+</span>col<span class=\"token operator\">+</span><span class=\"token string\">\"]:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token string\">\"live\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"dead\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>numOfLive<span class=\"token operator\">+</span><span class=\"token string\">\"-->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> cell<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> numOfLive <span class=\"token operator\">&lt;</span><span class=\"token number\">2</span> <span class=\"token operator\">||</span> numOfLive <span class=\"token operator\">></span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t\t\tcell<span class=\"token punctuation\">.</span><span class=\"token function\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"die\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> numOfLive <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t\tcell<span class=\"token punctuation\">.</span><span class=\"token function\">reborn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reborn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UPDATE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">repaint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> cell<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>awt</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Graphics</span><span class=\"token punctuation\">;</span><br> <br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cell</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> alive <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> alive <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reborn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> alive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> alive<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tg<span class=\"token punctuation\">.</span><span class=\"token function\">drawRect</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> alive <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tg<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> field<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> cell<span class=\"token punctuation\">.</span><span class=\"token class-name\">Cell</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Field</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> field<span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span><br>\t\tfield <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> height<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Cell</span> <span class=\"token function\">place</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cell</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">Cell</span> ret <span class=\"token operator\">=</span> field<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\tfield<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Cell</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> field<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getNeighbour</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cell</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cell</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> row<span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> col<span class=\"token operator\">+</span>j<span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> r <span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>height <span class=\"token operator\">&amp;</span><span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">></span></span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token operator\">&lt;</span>width <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">==</span> row <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">==</span> col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>height<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>width<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\tfield<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> field<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>awt</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Dimension</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>awt</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Graphics</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">JPanel</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> cell<span class=\"token punctuation\">.</span><span class=\"token class-name\">Cell</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">View</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JPanel</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5258995676212660595L</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> GRID_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Field</span> theField<span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\ttheField <span class=\"token operator\">=</span> field<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">&lt;</span>theField<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">&lt;</span>theField<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">Cell</span> cell <span class=\"token operator\">=</span> theField<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> cell <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\tcell<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> col<span class=\"token operator\">*</span>GRID_SIZE<span class=\"token punctuation\">,</span> row<span class=\"token operator\">*</span>GRID_SIZE<span class=\"token punctuation\">,</span> GRID_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Dimension</span> <span class=\"token function\">getPreferredSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dimension</span><span class=\"token punctuation\">(</span>theField<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>GRID_SIZE<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> theField<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>GRID_SIZE<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">&lt;</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">&lt;</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\tfield<span class=\"token punctuation\">.</span><span class=\"token function\">place</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">JFrame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultCloseOperation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">.</span>EXIT_ON_CLOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setResizable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cells\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"设计理念\"><a class=\"anchor\" href=\"#设计理念\">#</a> 设计理念</h3><ol><li>数据与表现分离<br>程序的业务逻辑与表现无关<br>表现可以是图形的也可以是文本的<br>表现可以是当地的也可以是远程的</li></ol><blockquote><p>表现与数据的关系<br><code>View</code> 只管根据 <code>Field</code> 画出图形， <code>Field</code> 只管数据的存放。<br>一旦数据更新以后，通知 <code>View</code> 重新画出整个画面，不去精心设计哪个局部需要更新，这样简化了程序逻辑，是在计算机运算速度提高的基础上实现的。</p></blockquote><ol start=\"2\"><li><p>责任驱动的设计<br>将程序要实现的功能分配到合适的类 / 对象中去是设计中非常中要的一环</p></li><li><p>网格化<br>图形界面本身有更高的解析度<br>但是将画面网格化以后，数据就更容易处理了</p></li></ol><h2 id=\"狐狸与兔子\"><a class=\"anchor\" href=\"#狐狸与兔子\">#</a> 狐狸与兔子</h2><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> cell<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>awt</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Graphics</span><span class=\"token punctuation\">;</span><br> <br><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Cell</span> <span class=\"token punctuation\">{</span>\t<br>\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> animal<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>awt</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Fox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cell</span> <span class=\"token punctuation\">{</span><br><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>为什么没有 <code>Cell.setAlive()</code> ？为什么不是在 <code>Cell</code> 提供 <code>setAlive(boolean)</code> 函数？而是采用复杂的 <code>die()</code> 、 <code>reborn()</code> 两个函数？</li></ol><blockquote><p>提高可阅读性，且 <code>Cellmachine</code> 类就是用来实现人机交互，业务逻辑交给 <code>Cell</code> 类。</p></blockquote><ol start=\"2\"><li>为什么 <code>Field.getNeighbour()</code> 不直接看 <code>Cell.isAlive()</code> 来返回一个数字，而是要返回一个数组让外面来数数？</li></ol><blockquote><p><code>Field</code> 这个类的职责是为对象提供一个可定位的安放空间，它不需要知道对象的任何额外信息。这种低耦合设计使得 <code>Cell</code> 变动时 <code>Field</code> 无须作出调整。</p></blockquote><ol start=\"3\"><li>为什么不是由 <code>Cell</code> 自己判断自己的邻居的情况来决定自己是否应该被 <code>die</code> 或 <code>reborn</code> ？</li></ol><blockquote><p><code>Cell</code> 要知道自己被生还是被死，就要获取一个数组， <code>Cell</code> 类， <code>Cellmachine</code> 类， <code>Field</code> 类就会相互使用，面向设计原则有一点是单一原则，各类各司其职，判断细胞是生是死让 <code>Cellmachine</code> 做就行了， <code>Cell</code> 只要负责提供细胞就行了。<br>好处就是简化了 <code>Cellmachine</code> 的代码，增加可读性，降低复杂性。</p></blockquote>",
            "tags": [
                "计算机科学",
                "Java",
                "面向对象程序设计-Java语言-浙江大学-翁恺",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/note/v2yume-setup-log/",
            "url": "https://shoka.lostyu.me/computer-science/note/v2yume-setup-log/",
            "title": "V2Yume配置记录",
            "date_published": "2020-06-16T13:11:48.000Z",
            "content_html": "<div class=\"note info\"><p>以下内容基于：</p><ul><li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3YyYm9hcmQvdjJib2FyZA==\">V2board</span>：多用户管理，aaPanel + LNMP + Laravel + React</li><li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NvbGV0dGVDb250cmVyYXMvdjJyYXktcG9zZWlkb24=\">Poseidon</span> ：V2Ray 服务端，基于 docker 运行</li><li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20v\">CloudFlare</span>：实现 WebSocket-TLS 模式</li></ul></div><h1 id=\"服务器准备\"><a class=\"anchor\" href=\"#服务器准备\">#</a> 服务器准备</h1><p>SSH 连接 Linux 服务器，操作系统 <code>CentOS 7</code><br>最低配置要求为 1Core/512M RAM</p><h2 id=\"安装内核加速\"><a class=\"anchor\" href=\"#安装内核加速\">#</a> 安装内核加速</h2><p>推荐使用 <code>bbr plus</code> 。<br>先安装内核，选择 2，重启后，开启加速，选择 7。</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token function\">wget</span> -N --no-check-certificate <span class=\"token string\">\"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh\"</span><br><span class=\"token function\">chmod</span> +x tcp.sh<br>./tcp.sh<br></pre></div></figure><h2 id=\"同步服务器时间\"><a class=\"anchor\" href=\"#同步服务器时间\">#</a> 同步服务器时间</h2><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\">yum -y <span class=\"token function\">install</span> ntpdate<br>timedatectl set-timezone Asia/Shanghai <span class=\"token comment\">#设置为北京时间</span><br>ntpdate time.nist.gov<br></pre></div></figure><blockquote><p>ntp 常用服务器</p></blockquote><table><thead><tr><th>Name</th><th>IP</th><th>Location</th></tr></thead><tbody><tr><td>210.72.145.44</td><td>210.72.145.44</td><td>中国（国家授时中心）</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL250cC5mdWRhbi5lZHUuY24=\">ntp.fudan.edu.cn</span></td><td></td><td>中国（复旦大学）</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL250cC5hcGkuYno=\">ntp.api.bz</span></td><td></td><td>中国（上海 NTP 服务器）</td></tr><tr><td>133.100.11.8</td><td>133.100.11.8</td><td>日本（福冈大学）</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL2FzaWEucG9vbC5udHAub3Jn\">asia.pool.ntp.org</span></td><td></td><td>台湾（台警大授时中心）</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL3RpbWUud2luZG93cy5jb20=\">time.windows.com</span></td><td></td><td>美国（微软公司授时主机）</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL3RpbWUtYS5uaXN0Lmdvdg==\">time-a.nist.gov</span></td><td>129.6.15.28</td><td>NIST,Gaithersburg,Maryland</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL3RpbWUtYi5uaXN0Lmdvdg==\">time-b.nist.gov</span></td><td>129.6.15.29</td><td>NIST,Gaithersburg,Maryland</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL3RpbWUtYS50aW1lZnJlcS5ibGRyZG9jLmdvdg==\">time-a.timefreq.bldrdoc.gov</span></td><td>132.163.4.101</td><td>NIST,Boulder,Colorado</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL3RpbWUtYi50aW1lZnJlcS5ibGRyZG9jLmdvdg==\">time-b.timefreq.bldrdoc.gov</span></td><td>132.163.4.102</td><td>NIST,Boulder,Colorado</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL3RpbWUtYy50aW1lZnJlcS5ibGRyZG9jLmdvdg==\">time-c.timefreq.bldrdoc.gov</span></td><td>132.163.4.103</td><td>NIST,Boulder,Colorado</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL3V0Y25pc3QuY29sb3JhZG8uZWR1\">utcnist.colorado.edu</span></td><td>128.138.140.44</td><td>UniversityofColorado,Boulder</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL3RpbWUubmlzdC5nb3Y=\">time.nist.gov</span></td><td>192.43.244.18</td><td>NCAR,Boulder,Colorado</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL3RpbWUtbncubmlzdC5nb3Y=\">time-nw.nist.gov</span></td><td>131.107.1.10</td><td>Microsoft,Redmond,Washington</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL25pc3QxLnN5bW1ldHJpY29tLmNvbQ==\">nist1.symmetricom.com</span></td><td>69.25.96.13</td><td>Symmetricom,SanJose,California</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL25pc3QxLWRjLmdsYXNzZXkuY29t\">nist1-dc.glassey.com</span></td><td>216.200.93.8</td><td>Abovenet,Virginia</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL25pc3QxLW55LmdsYXNzZXkuY29t\">nist1-ny.glassey.com</span></td><td>208.184.49.9</td><td>Abovenet,NewYorkCity</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL25pc3QxLXNqLmdsYXNzZXkuY29t\">nist1-sj.glassey.com</span></td><td>207.126.98.204</td><td>Abovenet,SanJose,California</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL25pc3QxLmFvbC1jYS50cnVldGltZS5jb20=\">nist1.aol-ca.truetime.com</span></td><td>207.200.81.113</td><td>TrueTime,AOLfacility,Sunnyvale,California</td></tr><tr><td><span class=\"exturl\" data-url=\"aHR0cDovL25pc3QxLmFvbC12YS50cnVldGltZS5jb20=\">nist1.aol-va.truetime.com</span></td><td>64.236.96.53</td><td>TrueTime,AOLfacility,Virginia</td></tr></tbody></table><h2 id=\"关闭防火墙\"><a class=\"anchor\" href=\"#关闭防火墙\">#</a> 关闭防火墙</h2><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\">systemctl start supervisord<br>systemctl disable firewalld<br>systemctl stop firewalld<br></pre></div></figure><h1 id=\"域名准备\"><a class=\"anchor\" href=\"#域名准备\">#</a> 域名准备</h1><p>借助 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20v\">CloudFlare</span> 实现强制 SSL、CDN 加速、隐藏 IP 地址 blabla</p><p>需要注意的配置：</p><ul><li>DNS 解析，代理状态为 已代理。</li><li>您的 SSL/TLS 加密模式为 完全 FULL！</li></ul><h1 id=\"v2board安装\"><a class=\"anchor\" href=\"#v2board安装\">#</a> V2Board 安装</h1><h2 id=\"基于aapanel部署\"><a class=\"anchor\" href=\"#基于aapanel部署\">#</a> 基于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bS5hYXBhbmVsLmNvbS9kLzktYWFwYW5lbC1saW51eC1wYW5lbC02NzAtaW5zdGFsbGF0aW9uLXR1dG9yaWFs\"> aaPanel</span> 部署</h2><ol><li><p>安装 aaPanel</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">yum <span class=\"token function\">install</span> -y <span class=\"token function\">wget</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">wget</span> -O install.sh http://www.aapanel.com/script/install_6.0_en.sh <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">bash</span> install.sh<br></pre></div></figure><p>安装完成后登陆，进行环境的安装。</p><p>选择使用 LNMP 的环境安装方式勾选如下信息：</p><p>☑️ Nginx 1.17<br>☑️ MySQL 5.6<br>☑️ PHP 7.3</p><p>选择 Fast 快速编译后进行安装。</p></li><li><p>安装 Redis<br>aaPanel 面板 &gt; App Store &gt; 找到 PHP 7.3 点击 Setting &gt; Install extentions &gt; redis 进行安装。</p></li><li><p>解除被禁止的函数<br>aaPanel 面板 &gt; App Store &gt; 找到 PHP 7.3 点击 Setting &gt; Disabled functions 将 <code>putenv</code> <code>proc_open</code> <code>pcntl_alarm</code> <code>pcntl_signal</code> 从列表中删除。</p></li><li><p>添加站点<br>aaPanel 面板 &gt; Website &gt; Add site。</p><blockquote><p>在 Domain 填入你指向服务器的域名<br>在 Database 选择 MySQL<br>在 PHP Verison 选择 PHP-73</p></blockquote></li><li><p>安装 V2Board<br>通过 SSH 登录到服务器后访问站点路径如： <code>/www/wwwroot/domain.com</code> 。</p><p>以下命令都需要在站点目录进行执行。</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token comment\"># 删除目录下文件</span><br>chattr -i .user.ini<br><span class=\"token function\">rm</span> -rf .htaccess <span class=\"token number\">404</span>.html index.html .user.ini<br></pre></div></figure><p>执行命令从 Github 克隆到当前目录。</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token function\">git</span> clone https://github.com/v2board/v2board.git ./<br></pre></div></figure><p>执行命令下载 composer.phar 到当前目录。</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token function\">wget</span> https://getcomposer.org/download/1.9.0/composer.phar<br></pre></div></figure><p>执行命令进行包安装。</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">php composer.phar <span class=\"token function\">install</span><br></pre></div></figure><p>安装过程中报错或者无法继续安装的请分配 swap，如何分配 swap 请查阅 google。</p><p>执行命令安装 V2board</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">php artisan v2board:install<br></pre></div></figure><p>根据提示完成安装。</p></li><li><p>配置站点目录及伪静态<br>添加完成后编辑添加的站点 &gt; Site directory &gt; Running directory 选择 /public 保存。</p><p>添加完成后编辑添加的站点 &gt; URL rewrite 填入伪静态信息。</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></pre><pre class=\"code\">location /downloads <span class=\"token punctuation\">{</span><br><span class=\"token punctuation\">}</span><br><br>location / <span class=\"token punctuation\">{</span>  <br>    try_files <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ /index.php<span class=\"token variable\">$is_args</span><span class=\"token variable\">$query_string</span><span class=\"token punctuation\">;</span>  <br><span class=\"token punctuation\">}</span><br><br>location ~ .*<span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">(</span>js<span class=\"token operator\">|</span>css<span class=\"token punctuation\">)</span>?$<br><span class=\"token punctuation\">{</span><br>    expires      1h<span class=\"token punctuation\">;</span><br>    error_log off<span class=\"token punctuation\">;</span><br>    access_log /dev/null<span class=\"token punctuation\">;</span> <br><span class=\"token punctuation\">}</span><br></pre></div></figure></li><li><p>配置定时任务<br>aaPanel 面板 &gt; Cron。</p><blockquote><p>在 Type of Task 选择 Shell Script<br>在 Name of Task 填写 v2board<br>在 Period 选择 N Minutes 1 Minute<br>在 Script content 填写 php /www/wwwroot/domain.com/artisan schedule:run</p></blockquote><p>根据上述信息添加每 1 分钟执行一次的定时任务。<br>记得将路径修改成自己的。</p></li><li><p>启动队列服务<br>V2board 的邮件系统强依赖队列服务，你想要使用邮件验证及群发邮件必须启动队列服务。<br>下面以 aaPanel 中 nodejs 的 PM2 服务来守护队列服务作为演示。</p><p>aaPanel 面板 &gt; App Store &gt; Deployment</p><p>找到 PM2 Manager 4.2.2 进行安装，安装完成后按照如下填写</p><blockquote><p>在 Project root directory 选择站点目录<br>在 Startup file name 填写 pm2.yaml<br>在 project name 填写 v2board</p></blockquote><p>填写后点击 Add 添加即可运行。当然你也可以使用 supervisor 进行守护。</p></li></ol><h2 id=\"告别500错误\"><a class=\"anchor\" href=\"#告别500错误\">#</a> 告别 500 错误</h2><ol><li><p>目录权限问题，检查站点根目录权限，递归 755，保证目录有可写文件的权限</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token function\">chown</span> -R www:www *<br></pre></div></figure></li><li><p>修改 <code>.env</code> 文件， <code>APP_DEBUG=true</code> ，开启 debug 模式，查看具体报错内容<br>每次修改 .env 文件后需要执行以下命令清空缓存</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">php artisan config:clear<br></pre></div></figure></li><li><p>aaPanel 安装 Redis 扩展失败<br>如报错</p><blockquote><p>configure: error: C preprocessor “/lib/cpp” fails sanity check</p></blockquote><p>缺少必要的 C++ 库，如下命令重装解决。</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">yum reinstall glibc-headers gcc-c++ -y<br></pre></div></figure></li></ol><h2 id=\"节点配置\"><a class=\"anchor\" href=\"#节点配置\">#</a> 节点配置</h2><ol><li><p>在 系统配置 &gt; 服务端 界面，设置一个 <code>通讯密钥</code></p></li><li><p>先添加权限组，再添加节点，记录 <code>节点ID</code> ，协议配置中的 <code>路径</code></p><blockquote><p>节点地址： 你的代理服务器绑定的域名<br>TLS： 支持<br>连接端口： 443<br>服务端口： 443<br>传输协议： WebSocket<br>点击编辑传输协议配置</p></blockquote><figure class=\"highlight json\"><figcaption><span class=\"lang\">JSON</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/路径\"</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure></li></ol><h1 id=\"poseidon对接\"><a class=\"anchor\" href=\"#poseidon对接\">#</a> Poseidon 对接</h1><h2 id=\"安装并启动-dockerdocker-compose\"><a class=\"anchor\" href=\"#安装并启动-dockerdocker-compose\">#</a> 安装并启动 Docker/docker-compose</h2><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></pre><pre class=\"code\"><span class=\"token function\">curl</span> -fsSL https://get.docker.com <span class=\"token operator\">|</span> <span class=\"token function\">bash</span><br><span class=\"token function\">curl</span> -L <span class=\"token string\">\"https://github.com/docker/compose/releases/download/1.25.3/docker-compose-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -s<span class=\"token variable\">)</span></span>-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -m<span class=\"token variable\">)</span></span>\"</span> -o /usr/local/bin/docker-compose<br><span class=\"token function\">chmod</span> a+x /usr/local/bin/docker-compose<br><span class=\"token function\">rm</span> -f <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">which</span> <span class=\"token function\">dc</span><span class=\"token variable\">`</span></span> <br><span class=\"token function\">ln</span> -s /usr/local/bin/docker-compose /usr/bin/dc<br> <br>systemctl start docker<br><span class=\"token function\">service</span> docker start<br>systemctl <span class=\"token builtin class-name\">enable</span> docker.service<br>systemctl status docker.service<br></pre></div></figure><h2 id=\"安装v2ray-poseidon\"><a class=\"anchor\" href=\"#安装v2ray-poseidon\">#</a> 安装 v2ray-poseidon</h2><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token function\">curl</span> -o go.sh -L -s https://raw.githubusercontent.com/ColetteContreras/v2ray-poseidon/master/install-release.sh<br><span class=\"token function\">sudo</span> <span class=\"token function\">bash</span> go.sh <span class=\"token comment\"># Install latest version of v2ray-poseidon</span><br></pre></div></figure><h2 id=\"修改配置文件\"><a class=\"anchor\" href=\"#修改配置文件\">#</a> 修改配置文件</h2><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token builtin class-name\">cd</span> /root/v2ray-poseidon/docker/v2board/ws<br></pre></div></figure><p>修改 config.json</p><figure class=\"highlight json\"><figcaption><span class=\"lang\">JSON</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token property\">\"nodeId\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 面板里添加完节点后生成的自增 ID</span><br><span class=\"token property\">\"webapi\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//v2board 的域名信息</span><br><span class=\"token property\">\"token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//v2board 和 v2ray-poseidon 的通信密钥</span><br></pre></div></figure><p>修改 docker-compose.yml</p><figure class=\"highlight yaml\"><figcaption><span class=\"lang\">YAML</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span><br>  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"80:10086\"</span> <span class=\"token comment\"># 把 80 端口 修改掉，避免端口占用报错</span><br></pre></div></figure><h2 id=\"添加站点\"><a class=\"anchor\" href=\"#添加站点\">#</a> 添加站点</h2><p>aaPanel 添加一个站点，域名就是代理服务器想绑定的域名。</p><p>站点配置 Configuration &gt; SSL &gt; Let's Encrypt &gt; 选择 Cloudflare &gt; 配置一下邮箱和 API</p><p>站点配置 Configuration &gt; Config</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></pre><pre class=\"code\">location /路径 <span class=\"token comment\"># 节点 websocket 配置中的路径</span><br><span class=\"token punctuation\">{</span><br>    proxy_pass http://127.0.0.1:端口号<span class=\"token punctuation\">;</span> <span class=\"token comment\"># docker-compose.yml 里改掉的 端口号</span><br>    proxy_redirect off<span class=\"token punctuation\">;</span><br>    proxy_http_version <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span><br>    proxy_set_header Upgrade <span class=\"token variable\">$http_upgrade</span><span class=\"token punctuation\">;</span><br>    proxy_set_header Connection <span class=\"token string\">\"upgrade\"</span><span class=\"token punctuation\">;</span><br>    proxy_set_header Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span><br>    proxy_read_timeout 300s<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><p>Security &gt; Firewall &gt; 放行上述端口号</p><h2 id=\"启动docker\"><a class=\"anchor\" href=\"#启动docker\">#</a> 启动 Docker</h2><p>保持后台运行。</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token function\">dc</span> up -d<br></pre></div></figure><p>查看一下日志，看看有没有报错。</p><figure class=\"highlight bash\"><figcaption><span class=\"lang\">bash</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token function\">dc</span> logs<br></pre></div></figure><h1 id=\"配置相关\"><a class=\"anchor\" href=\"#配置相关\">#</a> 配置相关</h1><h2 id=\"支付配置\"><a class=\"anchor\" href=\"#支付配置\">#</a> 支付配置</h2><p>目前支持四种方式，但是都不太理想</p><ul><li>支付宝，容易被请喝茶</li><li>Stripe，很难申请</li><li>BitpayX，对用户不友好</li><li>PayTaro，好不容易才找到了注册接口，收费 50 软妹币，暂时选用这个</li></ul><p>事实上，只是打算自用，并不打算卖钱，毕竟只有一个节点，呵呵_(:зゝ∠)_</p>",
            "tags": [
                "计算机科学",
                "二进制杂谈",
                "笔记",
                "机场"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/java/course-2/week-5/",
            "url": "https://shoka.lostyu.me/computer-science/java/course-2/week-5/",
            "title": "第5周 设计原则",
            "date_published": "2020-06-16T13:01:16.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：面向对象程序设计 ——Java 语言<br>- 浙江大学 - 翁恺 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1pKVS0xMDAxNTQyMDAx\">https://www.icourse163.org/course/ZJU-1001542001</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"消除代码复制\"><a class=\"anchor\" href=\"#消除代码复制\">#</a> 消除代码复制</h2><p>两个基本手段，就是函数和父类。</p><h2 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h2><p>对于类的设计来说，有两个核心术语：耦合和聚合。</p><p>耦合这个词指的是类和类之间的联系。<br>程序设计的目标是一系列通过定义明确的接口通信来协同工作的类。<br>耦合度反映了这些类联系的紧密度。<br>我们努力要获得低的耦合度，或者叫作松耦合 <code>loose coupling</code> 。</p><p>耦合度决定修改应用程序的容易程度。<br>在一个紧耦合的结构中，对一个类的修改也会导致 对其他一些类的修改。这是要努力避免的，否则，一点小小的改变就可能使整个应用程序发生 改变。另外，要想找到所有需要修改的地方，并一一加以修改，却是一件既困难又费时的事情。<br>在一个松耦合的系统中，常常可以修改一个类，但同时不会修改其他类，而且 整个程序还可以正常运作。</p><p><strong>用封装来降低耦合</strong>。</p><h2 id=\"可扩展性\"><a class=\"anchor\" href=\"#可扩展性\">#</a> 可扩展性</h2><p>可扩展性的意思就是代码的某些部分不需要经过修改就能适应将来可能的变化。</p><p>聚合与程序中一个单独的单元所承担的任务的数量和种类相对应有关，它是针对类或方法这样大小的程序单元而言的理想情况下，一个代码单元应该负责一个聚合的任务（也就是说，一个任务可以被看作是 一个逻辑单元）。<br>一个方法应该实现一个逻辑操作，而一个类应该代表一定类型的实体。</p><p>聚合理论背后的要点是重用：如果一个方法或类是只负责一件定义明确的事情，那么就很有可能在另外不同的上下文环境中使用。</p><p>遵循这个理论的一个额外的好处是，当程序某部分的代码需要改变时，在某个代码单元中很可能会找到所有需要改变的相关代码段。</p><p><strong>用接口来实现聚合</strong>。</p><p><strong>用容器来实现灵活性</strong>。</p><p><strong>以框架 + 数据来提高可扩展性</strong>。<br>从程序中识别出框架和数据，以代码实现框架，将部分功能以数据的方式加载，这样能在很大程度上实现可扩展性。</p><h1 id=\"课内项目\"><a class=\"anchor\" href=\"#课内项目\">#</a> 课内项目</h1><h2 id=\"城堡游戏\"><a class=\"anchor\" href=\"#城堡游戏\">#</a> 城堡游戏</h2><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span><span>Game.java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> castle<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Room</span> currentRoom<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">></span></span> handlers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <br>    <span class=\"token punctuation\">{</span><br>    \thandlers<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"go\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandlerGo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \thandlers<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandlerBye</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \thandlers<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"help\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandlerHelp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">createRooms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createRooms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">Room</span> outside<span class=\"token punctuation\">,</span> lobby<span class=\"token punctuation\">,</span> pub<span class=\"token punctuation\">,</span> study<span class=\"token punctuation\">,</span> bedroom<span class=\"token punctuation\">;</span><br>      <br>        <span class=\"token comment\">//\t制造房间</span><br>        outside <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"城堡外\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        lobby <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大堂\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        pub <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小酒吧\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        study <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"书房\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        bedroom <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">//\t初始化房间的出口</span><br><span class=\"token comment\">//        outside.setExit(null, lobby, study, pub);</span><br><span class=\"token comment\">//        lobby.setExits(null, null, null, outside);</span><br><span class=\"token comment\">//        pub.setExits(null, outside, null, null);</span><br><span class=\"token comment\">//        study.setExits(outside, bedroom, null, null);</span><br><span class=\"token comment\">//        bedroom.setExits(null, null, null, study);</span><br>        <br>        outside<span class=\"token punctuation\">.</span><span class=\"token function\">setExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"east\"</span><span class=\"token punctuation\">,</span> lobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        outside<span class=\"token punctuation\">.</span><span class=\"token function\">setExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"south\"</span><span class=\"token punctuation\">,</span> study<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        outside<span class=\"token punctuation\">.</span><span class=\"token function\">setExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"west\"</span><span class=\"token punctuation\">,</span> pub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        lobby<span class=\"token punctuation\">.</span><span class=\"token function\">setExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"west\"</span><span class=\"token punctuation\">,</span> outside<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        pub<span class=\"token punctuation\">.</span><span class=\"token function\">setExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"east\"</span><span class=\"token punctuation\">,</span> outside<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        study<span class=\"token punctuation\">.</span><span class=\"token function\">setExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"north\"</span><span class=\"token punctuation\">,</span> outside<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        study<span class=\"token punctuation\">.</span><span class=\"token function\">setExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"east\"</span><span class=\"token punctuation\">,</span> bedroom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        bedroom<span class=\"token punctuation\">.</span><span class=\"token function\">setExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"west\"</span><span class=\"token punctuation\">,</span> study<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        lobby<span class=\"token punctuation\">.</span><span class=\"token function\">setExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"up\"</span><span class=\"token punctuation\">,</span> pub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        pub<span class=\"token punctuation\">.</span><span class=\"token function\">setExit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"down\"</span><span class=\"token punctuation\">,</span> lobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        currentRoom <span class=\"token operator\">=</span> outside<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//\t从城堡门外开始</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printWelcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"欢迎来到城堡！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一个超级无聊的游戏。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"如果需要帮助，请输入 'help' 。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">//        System.out.println (\"现在你在\" + currentRoom);</span><br><span class=\"token comment\">//        System.out.print (\"出口有：\");</span><br><span class=\"token comment\">//        if(currentRoom.northExit != null)</span><br><span class=\"token comment\">//            System.out.print(\"north \");</span><br><span class=\"token comment\">//        if(currentRoom.eastExit != null)</span><br><span class=\"token comment\">//            System.out.print(\"east \");</span><br><span class=\"token comment\">//        if(currentRoom.southExit != null)</span><br><span class=\"token comment\">//            System.out.print(\"south \");</span><br><span class=\"token comment\">//        if(currentRoom.westExit != null)</span><br><span class=\"token comment\">//            System.out.print(\"west \");</span><br><span class=\"token comment\">//        System.out.println();</span><br>        <span class=\"token function\">showPrompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// 以下为用户命令</span><br><br><span class=\"token comment\">//    private void printHelp() </span><br><span class=\"token comment\">//    {</span><br><span class=\"token comment\">//        System.out.print (\"迷路了吗？你可以做的命令有：go bye help\");</span><br><span class=\"token comment\">//        System.out.println (\"如：\\tgo east\");</span><br><span class=\"token comment\">//    }</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">goRoom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> direction<span class=\"token punctuation\">)</span> <br>    <span class=\"token punctuation\">{</span><br><span class=\"token comment\">//        Room nextRoom = null;</span><br><span class=\"token comment\">//        if(direction.equals(\"north\")) {</span><br><span class=\"token comment\">//            nextRoom = currentRoom.northExit;</span><br><span class=\"token comment\">//        }</span><br><span class=\"token comment\">//        if(direction.equals(\"east\")) {</span><br><span class=\"token comment\">//            nextRoom = currentRoom.eastExit;</span><br><span class=\"token comment\">//        }</span><br><span class=\"token comment\">//        if(direction.equals(\"south\")) {</span><br><span class=\"token comment\">//            nextRoom = currentRoom.southExit;</span><br><span class=\"token comment\">//        }</span><br><span class=\"token comment\">//        if(direction.equals(\"west\")) {</span><br><span class=\"token comment\">//            nextRoom = currentRoom.westExit;</span><br><span class=\"token comment\">//        }</span><br>    \t<span class=\"token class-name\">Room</span> nextRoom <span class=\"token operator\">=</span> currentRoom<span class=\"token punctuation\">.</span><span class=\"token function\">getExit</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextRoom <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"那里没有门！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>            currentRoom <span class=\"token operator\">=</span> nextRoom<span class=\"token punctuation\">;</span><br><span class=\"token comment\">//            System.out.println (\"你在\" + currentRoom);</span><br><span class=\"token comment\">//            System.out.print (\"出口有:\");</span><br><span class=\"token comment\">//            if(currentRoom.northExit != null)</span><br><span class=\"token comment\">//                System.out.print(\"north \");</span><br><span class=\"token comment\">//            if(currentRoom.eastExit != null)</span><br><span class=\"token comment\">//                System.out.print(\"east \");</span><br><span class=\"token comment\">//            if(currentRoom.southExit != null)</span><br><span class=\"token comment\">//                System.out.print(\"south \");</span><br><span class=\"token comment\">//            if(currentRoom.westExit != null)</span><br><span class=\"token comment\">//                System.out.print(\"west \");</span><br><span class=\"token comment\">//            System.out.println();</span><br>            <span class=\"token function\">showPrompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showPrompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"现在你在\"</span> <span class=\"token operator\">+</span> currentRoom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出口有：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">//        if(currentRoom.northExit != null)</span><br><span class=\"token comment\">//            System.out.print(\"north \");</span><br><span class=\"token comment\">//        if(currentRoom.eastExit != null)</span><br><span class=\"token comment\">//            System.out.print(\"east \");</span><br><span class=\"token comment\">//        if(currentRoom.southExit != null)</span><br><span class=\"token comment\">//            System.out.print(\"south \");</span><br><span class=\"token comment\">//        if(currentRoom.westExit != null)</span><br><span class=\"token comment\">//            System.out.print(\"west \");</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>currentRoom<span class=\"token punctuation\">.</span><span class=\"token function\">getExitDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t\t<span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> words <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t\t<span class=\"token class-name\">Handler</span> handler <span class=\"token operator\">=</span> handlers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t\t<br>    \t\t<span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><br>    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>    \t\t\tvalue <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    \t\t<br>    \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t\t\thandler<span class=\"token punctuation\">.</span><span class=\"token function\">doCmd</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">.</span><span class=\"token function\">isBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    \t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>    \t\t<span class=\"token punctuation\">}</span><br>    \t\t<br>    \t<span class=\"token punctuation\">}</span><br>    \tin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><span class=\"token comment\">//\t\tScanner in = new Scanner(System.in);</span><br>\t\t<span class=\"token class-name\">Game</span> game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tgame<span class=\"token punctuation\">.</span><span class=\"token function\">printWelcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tgame<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">//        while ( true ) {</span><br><span class=\"token comment\">//        \t\tString line = in.nextLine();</span><br><span class=\"token comment\">//        \t\tString[] words = line.split(\" \");</span><br><span class=\"token comment\">//        \t\tif ( words[0].equals(\"help\") ) {</span><br><span class=\"token comment\">//        \t\t\tgame.printHelp();</span><br><span class=\"token comment\">//        \t\t} else if (words[0].equals(\"go\") ) {</span><br><span class=\"token comment\">//        \t\t\tgame.goRoom(words[1]);</span><br><span class=\"token comment\">//        \t\t} else if ( words[0].equals(\"bye\") ) {</span><br><span class=\"token comment\">//        \t\t\tbreak;</span><br><span class=\"token comment\">//        \t\t}</span><br><span class=\"token comment\">//        }</span><br>        <br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"感谢您的光临。再见！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">//        in.close();</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span><span>Room.java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> castle<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Room</span> <span class=\"token punctuation\">{</span><br><span class=\"token comment\">//    public String description;</span><br><span class=\"token comment\">//    public Room northExit;</span><br><span class=\"token comment\">//    public Room southExit;</span><br><span class=\"token comment\">//    public Room eastExit;</span><br><span class=\"token comment\">//    public Room westExit;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">></span></span> exits <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span> <br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> description<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setExit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> dir<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Room</span> room<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \texits<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> room<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br><span class=\"token comment\">//    public void setExits(Room north, Room east, Room south, Room west) </span><br><span class=\"token comment\">//    {</span><br><span class=\"token comment\">//        if(north != null)</span><br><span class=\"token comment\">//            northExit = north;</span><br><span class=\"token comment\">//        if(east != null)</span><br><span class=\"token comment\">//            eastExit = east;</span><br><span class=\"token comment\">//        if(south != null)</span><br><span class=\"token comment\">//            southExit = south;</span><br><span class=\"token comment\">//        if(west != null)</span><br><span class=\"token comment\">//            westExit = west;</span><br><span class=\"token comment\">//    }</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> description<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getExitDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">//    \t不用 String 然后字符串相加，因为那样系统开销会很大。</span><br>    \t<br>    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> dir <span class=\"token operator\">:</span> exits<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t\tsb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t\tsb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token punctuation\">}</span><br>    \t<br><span class=\"token comment\">//    \tif (northExit != null)</span><br><span class=\"token comment\">//    \t\tsb.append(\"north \");</span><br><span class=\"token comment\">//    \tif (eastExit != null)</span><br><span class=\"token comment\">//    \t\tsb.append(\"east \");</span><br><span class=\"token comment\">//    \tif(westExit != null)</span><br><span class=\"token comment\">//    \t\tsb.append(\"west \");</span><br><span class=\"token comment\">//    \tif(southExit != null)</span><br><span class=\"token comment\">//    \t\tsb.append(\"south \");</span><br>    \t<span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Room</span> <span class=\"token function\">getExit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> direction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><span class=\"token comment\">//    \tRoom ret = null;</span><br><span class=\"token comment\">//    \tif(direction.equals(\"north\")) {</span><br><span class=\"token comment\">//            ret = northExit;</span><br><span class=\"token comment\">//        }</span><br><span class=\"token comment\">//        if(direction.equals(\"east\")) {</span><br><span class=\"token comment\">//        \tret = eastExit;</span><br><span class=\"token comment\">//        }</span><br><span class=\"token comment\">//        if(direction.equals(\"south\")) {</span><br><span class=\"token comment\">//        \tret = southExit;</span><br><span class=\"token comment\">//        }</span><br><span class=\"token comment\">//        if(direction.equals(\"west\")) {</span><br><span class=\"token comment\">//        \tret = westExit;</span><br><span class=\"token comment\">//        }</span><br>        <br>        <span class=\"token keyword\">return</span> exits<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span><span>Handler.java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> castle<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">Game</span> game<span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Game</span> game<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>game <span class=\"token operator\">=</span> game<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span><span>HandlerGo.java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> castle<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HandlerGo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HandlerGo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Game</span> game<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tgame<span class=\"token punctuation\">.</span><span class=\"token function\">goRoom</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span><span>HandlerHelp.java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> castle<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HandlerHelp</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HandlerHelp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Game</span> game<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"迷路了吗？你可以做的命令有：go bye help\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"如：\\tgo east\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span>\t<br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span><span>HandlerBye.java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> castle<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HandlerBye</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HandlerBye</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Game</span> game<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span>\t<br><span class=\"token punctuation\">}</span><br></pre></div></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "面向对象程序设计-Java语言-浙江大学-翁恺",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/java/course-2/week-4/",
            "url": "https://shoka.lostyu.me/computer-science/java/course-2/week-4/",
            "title": "第4周 继承与多态",
            "date_published": "2020-06-15T13:01:16.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：面向对象程序设计 ——Java 语言<br>- 浙江大学 - 翁恺 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1pKVS0xMDAxNTQyMDAx\">https://www.icourse163.org/course/ZJU-1001542001</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><p>面向对象程序设计语言有三大特性：封装、继承和多态性。</p><h2 id=\"继承派生extends\"><a class=\"anchor\" href=\"#继承派生extends\">#</a> 继承 / 派生 <code>extends</code></h2><p>用来做基础派生其它类的那个类称为父类、超类或者基类，派生出来的新类称为子类。<br>Java 用关键字 <code>extends</code> 表示这种继承 / 派生关系。</p><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThisClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span> <br>    <span class=\"token comment\">//…</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"子类父类关系\"><a class=\"anchor\" href=\"#子类父类关系\">#</a> 子类父类关系</h2><p>继承表达了一种 <code>is-a</code> 关系，就是说，子类的对象可以被看作是父类的对象。<br>Java 的继承只允许<strong>单继承</strong>，即一个类只能有一个父类。</p><p>哪些东西被继承了，子类从父类那里得到了什么？<br>答案是所有的东西，所有的父类的成员，包括变量和方法，都成为了子类的成员，除了构造方法。<br>构造方法是父类所<strong>独有</strong>的，因为它们的名字就是类的名字，所以父类的构造方法在子类中不存在。除此之外，子类继承得到了父类所有的成员。</p><p>但是得到不等于可以随便使用。<br>每个成员有不同的访问属性，子类继承得到了父类所有的成员，但是不同的访问属性使得子类在使用这些成员时有所不同：<br>有些父类的成员直接成为子类的对外的界面，有些则被深深地隐藏起来，即使子类自己也不能直接访问。</p><p>下表列出了不同访问属性的父类成员在子类中的访问属性：</p><table><thead><tr><th>父类成员访问属性</th><th>在父类中的含义</th><th>在子类中的含义</th></tr></thead><tbody><tr><td><code>public</code></td><td>对所有人开放</td><td>对所有人开放</td></tr><tr><td><code>protected</code></td><td>只有包内其它类、自己和子类可以访问</td><td>只有包内其它类、自己和子类可以访问</td></tr><tr><td>缺省</td><td>只有包内其它类可以访问</td><td>如果子类与父类在同一个包内：只有包内其它类可以访问。否则：相当于 <code>private</code> ，不能访问</td></tr><tr><td><code>private</code></td><td>只有自己可以访问</td><td>不能访问</td></tr></tbody></table><p><code>public</code> 的成员直接成为子类的 <code>public</code> 的成员， <code>protected</code> 的成员也直接成为子类的 <code>protected</code> 的成员。<br>Java 的 <code>protected</code> 的意思是包内和子类可访问，所以它比缺省的访问属性要宽一些。</p><p>对于父类的缺省的未定义访问属性的成员来说，他们是在父类所在的包内可见。<br>如果子类不属于父类的包，那么在子类里面，这些缺省属性的成员和 <code>private</code> 的成员是一样的：不可见。</p><p>父类的 <code>private</code> 的成员在子类里仍然是存在的，只是子类中不能直接访问。</p><p>我们<strong>不可以</strong>在子类中重新定义继承得到的成员的<strong>访问属性</strong>。<br>如果我们试图重新定义一个在父类中已经存在的成员变量，那么我们是在定义一个与父类的成员变量<strong>完全无关</strong>的变量，在子类中我们可以访问这个定义在子类中的变量，在父类的方法中访问父类的那个。<br>尽管它们同名但是互不影响。</p><p>在构造一个子类的对象时，父类的构造方法也是会被调用的，而且父类的构造方法在子类的构造方法之前被调用。<br>在程序运行过程中，子类对象的一部分空间存放的是父类对象。<br>因为子类从父类得到继承，在子类对象初始化过程中可能会使用到父类的成员。所以父类的空间正是要先被初始化的，然后子类的空间才得到初始化。在这个过程中，如果父类的构造方法需要参数，如何传递参数就很重要了。</p><h2 id=\"多态变量\"><a class=\"anchor\" href=\"#多态变量\">#</a> 多态变量</h2><p>子类型类似于类的层次，类型也构成了类型层次。<br>子类所定义的类型是其超类的类型的子类型。</p><p>当把一个对象赋值给一个变量时，对象的类型必须与变量的类型相匹配，如:</p><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token class-name\">Car</span> myCar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>是一个有效的赋值，因为 <code>Car</code> 类型的对象被赋值给声明为保存 <code>Car</code> 类型对象的变量。但是由于引入了继承，这里的类型规则就得叙述得更完整些:<br>一个变量可以保存其所声明的类型或该类型的任何子类型。</p><p>对象变量可以保存其声明的类型的对象，或该类型的任何子类型的对象。</p><p>Java 中保存对象类型的变量是多态变量。<br>“多态” 这个术语（字面意思是许多形态）是指，一个变量可以保存不同类型（即其声明的类型或任何子类型）的对象。</p><ul><li>类定义了类型</li><li>子类定义了子类型</li><li>子类的对象可以被当作父类的对象来使用<ul><li>赋值给父类的变量</li><li>传递给需要父类对象的函数</li><li>放进存放父类对象的容器里</li></ul></li></ul><p>Java 的对象变量是多态的，它们能保存不止一种类型的对象。 它们可以保存的是声明类型的对象，或声明类型的子类的对象。 当把子类的对象赋给父类的变量的时候，就发生了向上造型。</p><h2 id=\"造型cast\"><a class=\"anchor\" href=\"#造型cast\">#</a> 造型 <code>cast</code></h2><p>子类的对象可以赋值给父类的变量。</p><blockquote><p>注意 java 中不存在对象对对象的赋值！</p></blockquote><p>父类的对象不能赋值给子类的变量！</p><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token class-name\">Vechicle</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">Car</span> <span class=\"token class-name\">C</span><span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>v<span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以 </span><br>c<span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译错误！</span><br></pre></div></figure><p>可以用造型：</p><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">)</span> v<span class=\"token punctuation\">,</span><br><span class=\"token comment\">// 只有当 v 这个变量实际管理的是 Car 才行</span><br></pre></div></figure><p>用括号围起类型放在值的前面。<br>对象本身并没有发生任何变化，所以不是 “类型转换”<br>运行时有机制来检查这样的转化是否合理 <code>C1assCastException</code></p><h3 id=\"向上造型\"><a class=\"anchor\" href=\"#向上造型\">#</a> 向上造型</h3><ul><li>拿一个子类的对象，当作父类的对象来用</li><li>向上造型是默认的，不需要运算符</li><li>向上造型总是安全的</li></ul><h2 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h2><p>所有的类都是继承自 <code>Object</code> 类</p><p><code>Object</code> 类的函数，如</p><ol><li><code>toString()</code></li><li><code>equals()</code></li></ol><p>如果子类的方法覆盖 <code>@Override</code> 了父类的方法，我们也说父类的那个方法在子类有了新的版本或者新的实现。</p><p>覆盖的新版本具有与老版本相同的方法签名：相同的方法名称和参数表。</p><p>子类和父类中存在名称和参数表完全相同的函数，这一对函数构成覆盖关系。</p><p>通过父类的变量，调用存在覆盖关系的函数时， 会调用变量当时所管理的对象所属的类的函数。</p><p>对于外界来说，子类并没有增加新的方法，仍然是在父类中定义过的那个方法。<br>不同的是，这是一个新版本，所以通过子类的对象调用这个方法，执行的是子类自己的方法。</p><p>覆盖关系并不说明父类中的方法已经不存在了，而是当通过一个子类的对象调用这个方法时，子类中的方法取代了父类的方法，父类的这个方法被 “覆盖” 起来而看不见了。<br>而当通过父类的对象调用这个方法时，实际上执行的仍然是父类中的这个方法。<br>注意这里说的是对象而不是变量，因为一个类型为父类的变量有可能实际指向的是一个子类的对象。</p><p>当调用一个方法时，究竟应该调用哪个方法，这件事情叫做绑定。<br>绑定表明了调用一个方法的时候，我们使用的是哪个方法。<br>绑定有两种：<br>一种是早绑定，又称静态绑定，根据变量的声明类型来决定，这种绑定在编译的时候就确定了；<br>另一种是晚绑定，即动态绑定。动态绑定在运行的时候，根据变量当时实际所指的对象的类型，动态决定调用的方法。即，根据变量的动态类型来决定。<br>Java 缺省使用动态绑定。<br>在成员函数中调用其他成员函数也是通过 <code>this</code> 这个对象变量来调用的。</p><h1 id=\"课内项目\"><a class=\"anchor\" href=\"#课内项目\">#</a> 课内项目</h1><h2 id=\"媒体数据库\"><a class=\"anchor\" href=\"#媒体数据库\">#</a> 媒体数据库</h2><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br></pre><pre class=\"code\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> playingTime<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> gotIt <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> comment<span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token comment\">// 构造器</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> playingTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> gotIt<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> comment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\t\t<br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>playingTime <span class=\"token operator\">=</span> playingTime<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gotIt <span class=\"token operator\">=</span> gotIt<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comment <span class=\"token operator\">=</span> comment<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 无参数构造器，子类 super () 调用</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br></pre><pre class=\"code\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> CD <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">{</span>\t<br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> artist<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numofTracks<span class=\"token punctuation\">;</span><br>\t<br><br>\t<span class=\"token keyword\">public</span> <span class=\"token function\">CD</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> artist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numofTracks<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> playingTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> comment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> playingTime<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用 Item 的构造器</span><br><span class=\"token comment\">//\t\tthis.title = title;</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>artist <span class=\"token operator\">=</span> artist<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numofTracks <span class=\"token operator\">=</span> numofTracks<span class=\"token punctuation\">;</span><br><span class=\"token comment\">//\t\tthis.playingTime = playingTime;</span><br><span class=\"token comment\">//\t\tthis.comment = comment;</span><br>\t<span class=\"token punctuation\">}</span><br><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CD:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>artist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">CD</span> cd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tcd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cd<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"aa\"</span> <span class=\"token operator\">+</span> cd<span class=\"token punctuation\">;</span><span class=\"token comment\">//cd 会自动 toString ()</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token class-name\">CD</span> cd1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cd<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>cd1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 如果没有自己的 equals 方法，将显示 false</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"CD [artist=\"</span> <span class=\"token operator\">+</span> artist <span class=\"token operator\">+</span> <span class=\"token string\">\", numofTracks=\"</span> <span class=\"token operator\">+</span> numofTracks <span class=\"token operator\">+</span> <span class=\"token string\">\", toString()=\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">CD</span> cc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CD<span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span><span class=\"token comment\">// 向下造型</span><br>\t\t<span class=\"token keyword\">return</span> artist<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">.</span>artist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></pre><pre class=\"code\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> DVD <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">{</span>\t<br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> director<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> playingTime<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> gotIt <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> comment<span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token function\">DVD</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> director<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> playingTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> comment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><span class=\"token comment\">//\t\tsuper();</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> playingTime<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">//\t\tthis.title = title;</span><br>\t\t<span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>director <span class=\"token operator\">=</span> director<span class=\"token punctuation\">;</span><br><span class=\"token comment\">//\t\tthis.playingTime = playingTime;</span><br><span class=\"token comment\">//\t\tthis.comment = comment;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// TODO Auto-generated method stub</span><br><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><span class=\"token comment\">//\t\tSystem.out.println(\"DVD:\" + title + \":\" + director);\t</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DVD:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>director<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span><span>Database.java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br></pre><pre class=\"code\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Database</span> <span class=\"token punctuation\">{</span><br><span class=\"token comment\">//\tprivate ArrayList&lt;CD> listCD = new ArrayList&lt;CD>();</span><br><span class=\"token comment\">//\tprivate ArrayList&lt;DVD> listDVD = new ArrayList&lt;DVD>();</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> listItem <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br><span class=\"token comment\">//\tpublic void add(CD cd) {</span><br><span class=\"token comment\">//\t\tlistCD.add(cd);</span><br><span class=\"token comment\">//\t}</span><br><span class=\"token comment\">//\t// 函数重载</span><br><span class=\"token comment\">//\tpublic void add(DVD dvd) {</span><br><span class=\"token comment\">//\t\tlistDVD.add(dvd);</span><br><span class=\"token comment\">//\t}</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tlistItem<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><span class=\"token comment\">//\t\tfor (CD cd:listCD) {</span><br><span class=\"token comment\">//\t\t\tcd.print();</span><br><span class=\"token comment\">//\t\t}</span><br><span class=\"token comment\">//\t\t</span><br><span class=\"token comment\">//\t\tfor (DVD dvd:listDVD) {</span><br><span class=\"token comment\">//\t\t\tdvd.print();</span><br><span class=\"token comment\">//\t\t}</span><br>\t\t<br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item<span class=\"token operator\">:</span>listItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\titem<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">Item</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">CD</span> cd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\titem <span class=\"token operator\">=</span> cd<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">CD</span> cc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CD<span class=\"token punctuation\">)</span> item<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 强制转换</span><br>\t\t<br>\t\t<span class=\"token class-name\">Database</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tdb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">CD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tdb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">CD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"efg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"efg\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tdb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">DVD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tdb<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>关于 <code>super()</code> ：能在一个构造函数里调用两次 <code>super()</code> 吗？ <code>super()</code> 必须在构造函数的第一行吗？</li></ol><blockquote><p>不可以调用两次，且必须在第一行。<br>子类是从父类继承而来，继承了父类的属性和方法，如果在子类中先不完成父类的成员的初始化，则子类无法使用，因为在 java 中不允许调用没初始化的成员。在构造器中是顺序执行的，也就是说 super () 必须在第一行进行父类的初始化。</p></blockquote><ol start=\"2\"><li>父类的私有的成员函数在子类中能使用吗？</li></ol><blockquote><p>子类不可直接调用父类的 <code>private</code> 方法，可以通过父类的 <code>public</code> （及其他子类可访问）方法和 <code>this</code> 间接使用父类 <code>private</code> 方法。</p></blockquote><ol start=\"3\"><li>假设现有 4 个类: <code>Person</code> 、 <code>Teacher</code> 、 <code>Student</code> 和 <code>PhDStudent</code> 。 <code>Teacher</code> 和 <code>Student</code> 都是 <code>Person</code> 的子类， <code>PhDStudent</code> 是 <code>Student</code> 的子类。以下的赋值语句哪些是合法的，为什么？：</li></ol><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></pre><pre class=\"code\"><span class=\"token comment\">// 变量管理对象，是否合法</span><br><span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 合法</span><br><span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PhDStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 合法</span><br><span class=\"token class-name\">PhDStudent</span> phd1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不合法</span><br><span class=\"token class-name\">Teacher</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不合法</span><br><span class=\"token class-name\">Student</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PhDStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 合法</span><br><span class=\"token comment\">// 变量赋值运算，类型是否安全</span><br>s1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不合法</span><br>s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span>p1<span class=\"token punctuation\">;</span><br>s1 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span><br>s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PhDStudent</span><span class=\"token punctuation\">)</span>p2<span class=\"token punctuation\">;</span><br>s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span>p2<span class=\"token punctuation\">;</span><br>p1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子类型给父类型，安全</span><br>t1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子类型给子类型，不可转换</span><br>s1 <span class=\"token operator\">=</span> phd1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子类型给父类型，安全</span><br><span class=\"token class-name\">Phd1</span> <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span><br>phd1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PhD</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span>s1<span class=\"token punctuation\">;</span><br></pre></div></figure><p>4. <code>Item</code> 的 <code>print</code> 函数有几种可能的实现方式：<br>1. 和视频中一样， <code>Item</code> 的 <code>print</code> 输出 <code>Item</code> 的私有成员变量，然后 <code>CD</code> 等子类 <code>override</code> 这个 <code>print</code> 函数，实现完整的输出，并在其中通过 <code>super.</code> 调用 <code>Item</code> 的 <code>print</code> ；<br>2. <code>Item</code> 的 <code>print</code> 会输出完整的内容，但是其中子类的部分，会调用一个 <code>protected</code> 的 <code>print_task</code> 函数来输出。子类则不去 <code>override</code> <code>print</code> ，而是 <code>override</code> 这个 <code>print_task</code> 函数，实现子类自己的成员变量的输出；<br>3. <code>Item</code> 的 <code>print</code> 函数什么也不做。另外给一个 <code>format</code> 函数，输出格式化的私有成员变量的内容表达。子类利用这个 <code>format</code> 函数得到内容后输出。</p><p>你觉得这些方案哪个更合适？为什么？如果你有更好的方案，也请提出来。</p>",
            "tags": [
                "计算机科学",
                "Java",
                "面向对象程序设计-Java语言-浙江大学-翁恺",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/java/course-2/week-3/",
            "url": "https://shoka.lostyu.me/computer-science/java/course-2/week-3/",
            "title": "第3周 对象容器",
            "date_published": "2020-06-14T07:47:18.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：面向对象程序设计 ——Java 语言<br>- 浙江大学 - 翁恺 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1pKVS0xMDAxNTQyMDAx\">https://www.icourse163.org/course/ZJU-1001542001</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><p>容器 <code>collection</code> 或 <code>container</code> 是现代程序设计非常基础而重要的手段。</p><p>所谓容器，就是 “放东西的东西”。<br>数组可以看作是一种容器，但是数组的元素个数一旦确定就无法改变，这在实际使用中是很大的不足。<br>一般意义上的容器，是指具有自动增长容量能力的存放数据的一种数据结构。<br>在面向对象语言中，这种数据结构本身表达为一个对象。<br>所以才有 “放东西的东西” 的说法。</p><h2 id=\"顺序容器\"><a class=\"anchor\" href=\"#顺序容器\">#</a> 顺序容器</h2><p>即放进容器中的对象是按照指定的顺序（放的顺序）排列起来的，而且允许具有相同值的多个对象存在。</p><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span><span>容器类</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>容器类有两个类型：</p><ul><li>容器的类型 <code>ArrayList</code></li><li>元素的类型 <code>String</code></li></ul><p>根据下标索引操作 <code>ArrayList</code></p><h2 id=\"对象数组\"><a class=\"anchor\" href=\"#对象数组\">#</a> 对象数组</h2><p>当数组的元素的类型是类的时候，数组的每一个元素其实只是对象的<strong>管理者</strong>，而不是对象本身。<br>因此，仅仅创建数组并没有创建其中的每一个对象！</p><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></pre><pre class=\"code\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ia <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ia<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span><br>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span><br>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ia<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><br>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// nulla</span><br><br>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错</span><br>    \t<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span><br><br>    \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span><br>    \t<span class=\"token punctuation\">}</span><br>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1</span><br><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ul><li><code>for each</code> 循环</li></ul><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br></pre><pre class=\"code\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Value</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token class-name\">Value</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Value</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token punctuation\">}</span><br><br>    \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Value</span> v <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 0 1 2 3 4 5 6 7 8 9 </span><br>    \t\tv<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token punctuation\">}</span><br>    \t<br>    \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Value</span> v <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 0 0 0 0 0 0 0 0 0</span><br>    \t<span class=\"token punctuation\">}</span><br><br>    \t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \tb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \tb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<br>    \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// first second</span><br>    \t<span class=\"token punctuation\">}</span><br><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"集合容器set\"><a class=\"anchor\" href=\"#集合容器set\">#</a> 集合容器 <code>set</code></h2><p>集合就是数学中的集合的概念：所有的元素都具有唯一的值，元素在其中没有顺序。</p><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br></pre><pre class=\"code\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Value</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \tb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \tb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \tb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<br>    \t<span class=\"token comment\">/*for (String s : b) {<br>    \t\tSystem.out.println(s);<br>    \t}*/</span><br>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [first, second, first]</span><br>    \t<br>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<br>    \t<span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \ts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \ts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \ts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 集合没有重复元素</span><br>    \t<br>    \t<span class=\"token comment\">/*for (String k : s) {<br>    \t\tSystem.out.println(k);<br>    \t}*/</span><br>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [first, second]</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">/*<br>first<br>second<br>first<br>------------<br>first<br>second<br> */</span><br></pre></div></figure><h2 id=\"散列表hash\"><a class=\"anchor\" href=\"#散列表hash\">#</a> 散列表 <code>Hash</code></h2><p>传统意义上的 <code>Hash</code> 表，是能以 <code>int</code> 做值，将数据存放起来的数据结构。<br>Java 的 <code>Hash</code> 表可以以任何实现了 <code>hash()</code> 函数的类的对象做值来存放对象。<br>键是唯一的，如果同一个键被设定了多次值，只保留最后一个。<br>键和值都必须是对象。</p><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br></pre><pre class=\"code\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Coin</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> coinnames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcoinnames<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"penney\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tcoinnames<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tcoinnames<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"quarter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tcoinnames<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"half-dolar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tcoinnames<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"五毛\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>coinnames<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>coinnames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token comment\">// 遍历，对 key 的集合进行 for each</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> k <span class=\"token operator\">:</span> coinnames<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> coinnames<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>coinnames<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> coinnames<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">else</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">'NOT FOUND'</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token class-name\">Coin</span> coin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> coin<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"课内项目\"><a class=\"anchor\" href=\"#课内项目\">#</a> 课内项目</h1><h2 id=\"记事本\"><a class=\"anchor\" href=\"#记事本\">#</a> 记事本</h2><p>功能：</p><ul><li>能存储记录</li><li>不限制能存储的记录的数量</li><li>能知道已经存储的记录的数量</li><li>能查看存进去的每一条记录</li><li>能删除一条记录</li><li>能列出所有的记录</li></ul><p>接口设计：<br><code>add(String note);</code><br><code>getSize();</code><br><code>getNote(int index);</code><br><code>removeNote(int index);</code><br><code>list();</code></p><blockquote><p>人机交互部分需与业务逻辑分开</p></blockquote><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> notebook<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NoteBook</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// ArrayList of String</span><br>\t<span class=\"token comment\">// 用来存放 String 的一个 ArrayList</span><br>\t<span class=\"token comment\">// ArrayList 是泛型类</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">//private int size = 0;</span><br>\t<br>\t<span class=\"token comment\">// 添加一条数据</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> add <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tnotes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">//notes.add (0); // 报错</span><br>\t\t<span class=\"token comment\">//size++;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 加入某个现有元素前面</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> location<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tnotes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">//return size;</span><br>\t\t<span class=\"token keyword\">return</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 根据编号获得数据内容</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 根据编号删除数据内容</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeNote</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">//return notes.remove (index); // 报错</span><br>\t\tnotes<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 数据列表</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">/*<br>\t\t * for (int =0; i &lt; notes.size(); i++) { a[i] = notes.get(i) }<br>\t\t */</span><br>\t\tnotes<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\ta<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">;</span><br>\t\ta<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"second\"</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token class-name\">NoteBook</span> nb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoteBook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tnb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tnb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tnb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"third\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">.</span><span class=\"token function\">getNote</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">.</span><span class=\"token function\">getNote</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\tnb<span class=\"token punctuation\">.</span><span class=\"token function\">removeNote</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span>nb<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>当我们用 <code>add</code> 函数把对象放进容器中去的时候，究竟是把什么放进了容器？放进去的是对象本身吗？放进去以后，那个对象还在外面吗？如果修改了放进去的那个对象，容器中的对象会变化吗？写点代码来验证自己的猜测吧。</li></ol><blockquote><ol><li>放进容器的是对象的引用（类似于 C++ 的指针，对象的地址），而非对象本身。</li><li>对象本身存在堆上，如果已经有变量存储它（实际上存储的也是引用）的话，放进容器后还是可以通过变量访问该对象。</li><li>修改放进去的对象， <code>ArrayList</code> 容器的对象也会变化，因为是同一个对象。<br>但需要注意的是，简单地赋新值给变量，只会让变量关联到一个新的对象上，并没有改变原来的对象；另外，不可变类是不能修改其对象的，比如 <code>String</code></li></ol></blockquote><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br></pre><pre class=\"code\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before modification:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array: \"</span> <span class=\"token operator\">+</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list.get(0): \"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list.get(0): \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nafter modification:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array: \"</span> <span class=\"token operator\">+</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list.get(0): \"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list.get(0): \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">/*<br>before modification:<br>array: [I@7852e922<br>list.get(0): [I@7852e922<br>array: [1, 2, 3]<br>list.get(0): [1, 2, 3]<br><br>after modification:<br>array: [I@7852e922<br>list.get(0): [I@7852e922<br>array: [42, 2, 3]<br>list.get(0): [42, 2, 3]<br>*/</span><br></pre></div></figure><ol start=\"2\"><li>如何设计能传递任意数量参数的函数？</li></ol><blockquote><p>在定义方法时，在最后一个形参后加上三点 <code>...</code> ，就表示该形参可以接受多个参数值，多个参数值被当成数组传入。<br>上述定义有几个要点需要注意：</p><ol><li>可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数；</li><li>由于可变参数必须是最后一个参数，所以一个函数最多只能有一个可变参数；</li><li>Java 的可变参数，会被编译器转型为一个数组。</li></ol></blockquote><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></pre><pre class=\"code\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> k <span class=\"token operator\">:</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> k<span class=\"token operator\">></span>max <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            max <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// 输出：12</span><br></pre></div></figure><ol start=\"3\"><li>集合能用 <code>get()</code> 函数来获得某个位置上的元素吗？</li></ol><blockquote><p>不能。<br>首先在 Java 的 <code>HashSet</code> 类中没有定义 <code>get()</code> 方法，调用无效；<br>其次，作为数学意义上的具有无序性的集合，试图以线性的索引去获取其中的值是毫无意义的。</p></blockquote><ol start=\"4\"><li>学生成绩的数据结构<br>如果要写程序表达一个班级的很多个学生的很多门课的成绩，应该如何表达这些数据？<br>如果我们希望通过学生的姓名，可以找到他的所有的成绩，而每一门课的成绩，是由课程名称和分数构成的。<br>而如果我们还希望这个程序能找出某一门课的全部学生的成绩应该怎样做呢？<br>注意，并非所有的学生都参加了所有的课程。</li></ol><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br></pre><pre class=\"code\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScoreTable</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// student name - course name, score</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> student<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> course<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> score<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">record</span> <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">record</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<br>\t\t<span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>course<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tstudents<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">,</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getByStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> student<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">String</span> records <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">String</span> comma <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">record</span> <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> course <span class=\"token operator\">:</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\trecords <span class=\"token operator\">+=</span> comma <span class=\"token operator\">+</span> <span class=\"token string\">\"科目\"</span> <span class=\"token operator\">+</span> course <span class=\"token operator\">+</span> <span class=\"token string\">\"的成绩：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>course<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\tcomma <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<br>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">recordFilter</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getByCourse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> course<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">String</span> records <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">String</span> comma <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> student <span class=\"token operator\">:</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">record</span> <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>course<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\trecords <span class=\"token operator\">+=</span> comma <span class=\"token operator\">+</span> <span class=\"token string\">\"学生\"</span> <span class=\"token operator\">+</span> student <span class=\"token operator\">+</span> <span class=\"token string\">\"的成绩：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>course<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\tcomma <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span>\t\t\t<br>\t\t<span class=\"token punctuation\">}</span>\t\t<br>\t\t<br>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">recordFilter</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">recordFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token operator\">?</span> s<span class=\"token operator\">:</span><span class=\"token string\">\"没有记录\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">ScoreTable</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScoreTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">String</span> student<span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">String</span> course<span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span><br>        GO<span class=\"token operator\">:</span><br>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入数据请输入'1'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学生查询请输入'2'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"课程查询请输入'3'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~~退出请输入'0'~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">int</span> jd <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>jd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span><br>                <span class=\"token keyword\">break</span> GO<span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><br>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入姓名，课程，成绩：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                student <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                course <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                score <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">,</span> course<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><br>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入姓名：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                student <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getByStudent</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span><br>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入课程：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                course <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getByCourse</span><span class=\"token punctuation\">(</span>course<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span>        <br>        <span class=\"token punctuation\">}</span><br>        in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token punctuation\">}</span><br><br><span class=\"token punctuation\">}</span><br></pre></div></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "面向对象程序设计-Java语言-浙江大学-翁恺",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/java/course-2/week-2/",
            "url": "https://shoka.lostyu.me/computer-science/java/course-2/week-2/",
            "title": "第2周 对象交互",
            "date_published": "2020-06-13T08:24:11.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：面向对象程序设计 ——Java 语言<br>- 浙江大学 - 翁恺 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1pKVS0xMDAxNTQyMDAx\">https://www.icourse163.org/course/ZJU-1001542001</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"对象交互\"><a class=\"anchor\" href=\"#对象交互\">#</a> 对象交互</h2><p>当一个对象里有多个对象的时候，那些对象之间是如何交互的，对象和对象之间的联系是如何建立的，对象如何和其他对象交流。<br>对象和对象之间的联系紧密程度叫做耦合。<br>对象和对象的耦合程度越紧，表现在源代码上，就是它们的代码是互相依赖、互相牵制的。<br>我们理想的模型，是对象和对象之间的耦合要尽可能的松，平行的对象要尽量减少直接联系，让更高层次的对象来提供通信服务。</p><h2 id=\"访问属性\"><a class=\"anchor\" href=\"#访问属性\">#</a> 访问属性</h2><h3 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h3><p>封装，就是把数据和对这些数据的操作放在一起，并且用这些操作把数据掩盖起来，是面向对象的基本概念之一，也是最核心的概念。</p><p>在设计类时做到封装的方法：</p><ol><li>所有的成员变量必须是 <code>private</code> 的，这样就避免别人任意使用你的内部数据；</li><li>所有 <code>public</code> 的函数，只是用来实现这个类的对象，或类自己要提供的服务的，而不是用来直接访问数据的。除非对数据的访问就是这个类及对象的服务。<br>简单地说，给每个成员变量提供一对用于读写的 <code>get</code> / <code>set</code> 函数也是<strong>不合适</strong>的设计。</li></ol><h3 id=\"访问权限\"><a class=\"anchor\" href=\"#访问权限\">#</a> 访问权限</h3><p><code>private</code> ：只有这个类内部可以访问，类内部指类的成员函数和定义初始化，这个限制是对类的而不是对对象的。<br>即同一个类的不同对象之间，可以互相访问各自的私有成员。</p><p><code>friendly</code> ：如果一个成员函数前没有 <code>public</code> 或 <code>private</code> 等关键字来限定访问权限，那么称为 <code>friendly</code> ，则与其位于同一个包的其他类可以访问。</p><p>类前加 <code>public</code> 指任何人都可以使用它来定义变量，但是类名需与编译单元文件名相同。<br>编译单元：一个 <code>.java</code> 源代码文件是一个编译单元，当一个编译单元不止一个类时，只有一个类前可以加 <code>public</code> ，其他类都只在该包内起作用。</p><h2 id=\"package包\"><a class=\"anchor\" href=\"#package包\">#</a> <code>package</code> 包</h2><p>当你的程序越来越大的时候，你就会需要有一个机制帮助你管理一个工程中众多的类了。<br>包就是 Java 的类库管理机制，它借助文件系统的目录来管理类库。<br>一个包就是一个目录，一个包内的所有的类必须放在一个目录下，那个目录的名字必须是包的名字。</p><blockquote><p>例如本项目 <code>clock</code> 文件夹目录下有 <code>src/clock</code> 和 <code>src/display</code> 两个文件夹，即 <code>clock</code> 和 <code>display</code> 两个包。<br>如果要引用别的包里的类，则需要使用 <code>import 包.类;</code> ，或者使用 <code>包.类</code> 的全名。<br>包的名字可以带有 <code>.</code> ，如果包名命名为 <code>display.led</code> ，则会在 <code>src/display/led</code> 目录下。</p></blockquote><h2 id=\"static类变量\"><a class=\"anchor\" href=\"#static类变量\">#</a> <code>static</code> 类变量</h2><p>类是描述，对象是实体。<br>在类里所描述的成员变量，是位于这个类的每一个对象中的。<br>而如果某个成员有 <code>static</code> 关键字做修饰，它就不再属于每一个对象，而是属于整个类。</p><p>通过每个对象都可以访问到这些类变量和类函数，但是也可以通过类的名字来访问它们。<br>类函数由于不属于任何对象，因此也没有办法建立与调用它们的对象的关系，就不能访问任何非 <code>static</code> 的成员变量和成员函数了。</p><h2 id=\"static类函数\"><a class=\"anchor\" href=\"#static类函数\">#</a> <code>static</code> 类函数</h2><p><code>main</code> 函数前有 <code>static</code> ，即表示其属于类，而不是某个对象。<br><code>static</code> 函数可以直接访问别的 <code>static</code> 函数，只能访问 <code>static</code> 函数或成员变量。</p><h1 id=\"课内项目\"><a class=\"anchor\" href=\"#课内项目\">#</a> 课内项目</h1><h2 id=\"数字钟\"><a class=\"anchor\" href=\"#数字钟\">#</a> 数字钟</h2><pre class=\"mermaid\"><svg id=\"mermaid-1595956484333\" width=\"127.046875\" xmlns=\"http://www.w3.org/2000/svg\" height=\"236\" viewBox=\"-20 -20 127.046875 236\"><g></g><defs><marker id=\"extensionStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 1,7 L18,13 V 1 Z\"></path></marker></defs><defs><marker id=\"extensionEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 1,1 V 13 L18,7 Z\"></path></marker></defs><defs><marker id=\"compositionStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"compositionEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"aggregationStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"aggregationEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"dependencyStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 5,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"dependencyEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L14,7 L9,1 Z\"></path></marker></defs><g id=\"classid-Clock-0\" class=\"classGroup\" transform=\"translate(0,0 )\"><rect x=\"0\" y=\"0\" width=\"87.046875\" height=\"68\"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"30.6015625\">Clock</tspan></text><line x1=\"0\" y1=\"21\" y2=\"21\" x2=\"87.046875\"></line><text x=\"5\" y=\"31\" fill=\"white\" class=\"classText\"><tspan x=\"5\">+Display hour</tspan><tspan x=\"5\" dy=\"10\">+Display minute</tspan></text><line x1=\"0\" y1=\"47\" y2=\"47\" x2=\"87.046875\"></line><text x=\"5\" y=\"62\" fill=\"white\" class=\"classText\"><tspan x=\"5\">+start()</tspan></text></g><g id=\"classid-Display-1\" class=\"classGroup\" transform=\"translate(10.3984375,118 )\"><rect x=\"0\" y=\"0\" width=\"66.25\" height=\"78\"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"16.2109375\">Display</tspan></text><line x1=\"0\" y1=\"21\" y2=\"21\" x2=\"66.25\"></line><text x=\"5\" y=\"31\" fill=\"white\" class=\"classText\"><tspan x=\"5\">+value</tspan><tspan x=\"5\" dy=\"10\">+limit</tspan></text><line x1=\"0\" y1=\"47\" y2=\"47\" x2=\"66.25\"></line><text x=\"5\" y=\"62\" fill=\"white\" class=\"classText\"><tspan x=\"5\">+increase()</tspan><tspan x=\"5\" dy=\"10\">+getValue()</tspan></text></g><path d=\"M43.5234375,68L43.5234375,72.16666666666667C43.5234375,76.33333333333333,43.5234375,84.66666666666667,43.5234375,93C43.5234375,101.33333333333333,43.5234375,109.66666666666667,43.5234375,113.83333333333333L43.5234375,118\" id=\"edge0\" class=\"relation\" marker-end=\"url(#dependencyEnd)\"></path><g class=\"classLabel\"><rect class=\"box\" x=\"31.015625\" y=\"81.5\" width=\"25.015625\" height=\"16\"></rect><text class=\"label\" x=\"43.5234375\" y=\"93\" fill=\"red\" text-anchor=\"middle\">包含</text></g><g class=\"cardinality\"><text class=\"type2\" x=\"53.5234375\" y=\"105.5\" fill=\"black\" font-size=\"6\">2个</text></g></svg></pre><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span><span>Display.java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">display<span class=\"token punctuation\">.</span>led</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Display</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// 当前时间，时间递增，时间上限</span><br>    <span class=\"token comment\">// 私有成员变量</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前时间（小时还是分钟还是秒）</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 上限</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> step <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token comment\">// 构造函数</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">=</span> limit<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 时间递增</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tvalue<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 如果下一个时间段到了上限</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tvalue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">//value++;// 报错</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">/*Display d = new Display(24);<br>\t\tfor (;;) {<br>\t\t\td.increase();<br>\t\t\tDisplay d = new Display(24);<br>\t\t}*/</span><br>\t\t<span class=\"token class-name\">Display</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\td1<span class=\"token punctuation\">.</span>step <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><br>\t\t<span class=\"token class-name\">Display</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><br><br>\t\td1<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以直接访问</span><br>\t\td1<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 也可以通过对象访问</span><br>\t\t<span class=\"token comment\">//increase (); 报错</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span><br>\t\td1<span class=\"token punctuation\">.</span>step <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><br>\t\t<span class=\"token class-name\">Display</span><span class=\"token punctuation\">.</span>step <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// Display.value = 3; // 错误</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span><br>\t<br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span><span>Clock.java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> clock<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">display<span class=\"token punctuation\">.</span>led</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Display</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Display</span> hour <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Display</span> minute <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\t\t<br>\t\tminute<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>minute<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\thour<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token comment\">// 带格式输出</span><br>\t\t<span class=\"token comment\">// %02d 表示占据两个字符位置的整数，如果只有个位数，用 0 填充</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02d:%02d\\n\"</span><span class=\"token punctuation\">,</span> hour<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">Clock</span> clock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tclock<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li><code>increase</code> 返回 <code>boolean</code> 来表示翻转好不好？<br>如果 <code>Display</code> 的 <code>increase</code> 函数，在发现翻转之后，就返回 <code>true</code> 表示这次 <code>increase</code> 翻转了，是不是一个好的设计？</li></ol><blockquote><p>不是一个好的设计。<br>首先，违反了函数 “单一出口原则”；<br>其次，造成了函数的多义。<br>如果想减少如 <code>0</code> 这样的 MagicNumber 出现，可以在类中添加公共变量，赋予 <code>0</code> 意义。</p></blockquote><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></pre><pre class=\"code\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> display <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> isCarry <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br> <br>    <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">=</span> limit<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br> <br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>            value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>            isCarry <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span><br>            isCarry <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br> <br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br> <br><span class=\"token punctuation\">}</span><br></pre></div></figure><ol start=\"2\"><li>视频中的代码，表示分钟的对象和表示小时的对象没有直接交互。如果想要做直接交互，让表示分钟的对象在翻转的时候直接调用表示小时的对象的那个 <code>increase</code> 函数，代码需要怎样修改？</li></ol><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br></pre><pre class=\"code\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Display</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> limit<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br> <br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit<span class=\"token operator\">=</span>limit<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">==</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>            value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Display</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">==</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// 如果当前时间等于了上限，我们就去调用小时对象的递增</span><br>            value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>            d<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">// 输出</span><br>        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">Display</span> h<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>            h<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span><span class=\"token function\">getvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">//hour 与 minute</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Display</span> hour<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Display</span> minute<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            minute<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span>hour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02d:%02d \"</span><span class=\"token punctuation\">,</span>hour<span class=\"token punctuation\">.</span><span class=\"token function\">getvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>minute<span class=\"token punctuation\">.</span><span class=\"token function\">getvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">Clock</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        a<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ol start=\"3\"><li>为什么说 <code>private</code> 是对类的不是对对象的？ <code>private</code> 的访问属性到底限制的是什么？</li></ol><blockquote><p>在同一类中，哪怕生成了两个不同的对象，也可以相互访问 <code>private</code> 变量。<br>但在类外，无论如何无法访问 <code>private</code> 变量。<br><code>private</code> 是否可以访问，是取决于它在类内还是类外，而不是是否是该类的对象。</p></blockquote><ol start=\"4\"><li>在类函数中有 <code>this</code> 吗？为什么？</li></ol><blockquote><p>没有，类变量和类函数属于类，不与对象发生关系。 <code>this</code> 是指对象实例，类函数不直接属于任何对象，因此试图访问 <code>this</code> 是没有意义的。</p></blockquote>",
            "tags": [
                "计算机科学",
                "Java",
                "面向对象程序设计-Java语言-浙江大学-翁恺",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/java/course-2/week-1/",
            "url": "https://shoka.lostyu.me/computer-science/java/course-2/week-1/",
            "title": "第1周 类与对象",
            "date_published": "2020-06-12T10:16:05.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：面向对象程序设计 ——Java 语言<br>- 浙江大学 - 翁恺 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1pKVS0xMDAxNTQyMDAx\">https://www.icourse163.org/course/ZJU-1001542001</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"用类制造对象\"><a class=\"anchor\" href=\"#用类制造对象\">#</a> 用类制造对象</h2><p>对象是实体，需要被创建，可以为我们做事情<br>类是规范，根据类的定义来创建对象</p><ul><li><p>对象（这只猫）<br>表达东西或事件<br>运行时响应消息（提供服务）</p></li><li><p>类（猫）<br>定义所有猫的属性<br>就是 Java 中的类型<br>可以用来定义变量</p></li></ul><pre class=\"mermaid graph\"><svg id=\"mermaid-1595956481119\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width:165.63px\" viewBox=\"1 0 165.625 163\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M59.09288194444444,47L32,81.5L59.09288194444444,116\" marker-end=\"url(#arrowhead11)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead11\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M89.71961805555556,116L116.8125,81.5L89.71961805555556,47\" marker-end=\"url(#arrowhead12)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead12\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(32,81.5)\"><g transform=\"translate(-24,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"48\" height=\"19\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">定义了</tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(116.8125,81.5)\"><g transform=\"translate(-40.8125,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"81.625\" height=\"19\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">是...的实体</tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"A\" transform=\"translate(74.40625,27.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-18\" y=\"-19.5\" width=\"36\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-8,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">类</tspan></text></g></g></g><g class=\"node default\" id=\"B\" transform=\"translate(74.40625,135.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">对象</tspan></text></g></g></g></g></g></g></svg></pre><p>对象 = 属性 + 服务<br>数据：属性或状态<br>操作：函数</p><p>把数据和对数据的操作放在一起 ➡️ 封装</p><pre class=\"graphviz\"><svg width=\"96pt\" height=\"122pt\" viewBox=\"0.00 0.00 96.00 121.75\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 117.752)\"><title>G</title><polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-117.752 92,-117.752 92,4 -4,4\"/><g id=\"clust1\" class=\"cluster\"><title>cluster_0</title><polygon fill=\"#d3d3d3\" stroke=\"#d3d3d3\" points=\"8,-8 8,-105.752 80,-105.752 80,-8 8,-8\"/><text text-anchor=\"middle\" x=\"44\" y=\"-89.152\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">操作</text></g><g id=\"node1\" class=\"node\"><title>数据</title><ellipse fill=\"#ffffff\" stroke=\"#ffffff\" cx=\"44\" cy=\"-44.476\" rx=\"28.452\" ry=\"28.452\"/><text text-anchor=\"middle\" x=\"44\" y=\"-40.276\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">数据</text></g></g></svg></pre><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span><span>创建对象</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">VendingMachine</span> v<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br></pre></div></figure><blockquote><p>对象变量是对象的管理者</p></blockquote><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">v<span class=\"token punctuation\">.</span><span class=\"token function\">insertMoney</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>v<span class=\"token punctuation\">.</span><span class=\"token function\">getFood</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><blockquote><p><code>.</code> 运算符让对象做事</p></blockquote><h2 id=\"成员变量和成员函数\"><a class=\"anchor\" href=\"#成员变量和成员函数\">#</a> 成员变量和成员函数</h2><ul><li>成员变量：类定义的对象中所具有的变量。<br>每个对象有自己的变量，和同一个类的其他对象是分开的。</li></ul><p>在函数中可以直接写成员变量的名字来访问成员变量。</p><p>函数是通过对象来调用的。<br>如 <code>v.insertMoney()</code> 让 <code>insertMoney()</code> 内部的成员变量指的是 <code>v</code> 的成员变量。</p><p><code>this</code> 是成员函数的一个特殊的固有的本地变量，它表达了调用这个函数的那个对象。<br>通过 <code>.</code> 运算符调用某个对象的函数。<br>在成员函数内部直接调用自己 <code>this</code> 的其他函数，不需要额外加 <code>this.</code> 。</p><p>成员变量的生存期是对象的生存期，作用域是类内部的成员函数。</p><blockquote><p>写在类里的成员变量，只是一个声明，变量并不在那里，变量不在类里，变量在每一个对象里。</p></blockquote><ul><li>本地变量：定义在函数内部的变量。<br>本地变量的生存期和作用域都是函数内部。</li></ul><h2 id=\"对象初始化\"><a class=\"anchor\" href=\"#对象初始化\">#</a> 对象初始化</h2><p>Java 提供了多种手段来保障对象创建时的初始化，包括给每个成员变量默认的 <code>0</code> 值、定义初始化和构造函数。</p><h3 id=\"成员变量定义初始化\"><a class=\"anchor\" href=\"#成员变量定义初始化\">#</a> 成员变量定义初始化</h3><ul><li>成员变量在定义的地方就可以给出初始值</li><li>没有给出初始值的成员变量会自动获得 <code>0</code> 值</li><li>对象变量的 <code>0</code> 值表示没有管理任何对象，也可以主动给 <code>null</code> 值</li><li>定义初始化可以调用函数，甚至可以使用已经定义的成员变量</li></ul><h3 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h3><p>与类同名，没有返回值类型。</p><h3 id=\"函数重载\"><a class=\"anchor\" href=\"#函数重载\">#</a> 函数重载</h3><p>一个类可以有多个构造函数，只要它们的参数表不同</p><p>创建对象的时候，给出不同的参数值，就会自动调用不同的构造函数</p><p>一个类里的同名，但参数表不同的函数构成了重载关系</p><p>通过 <code>this()</code> 还可以调用其他构造函数，但是只能调用无参数构造函数，且只能放在构造函数内的第一句，只能调用一次。</p><h1 id=\"课内项目\"><a class=\"anchor\" href=\"#课内项目\">#</a> 课内项目</h1><h2 id=\"画形状\"><a class=\"anchor\" href=\"#画形状\">#</a> 画形状</h2><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></pre><pre class=\"code\"><span class=\"token keyword\">package</span> shapes<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPic</span> <span class=\"token punctuation\">{</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">Picture</span> pic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Picture</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">Circle</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">260</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">Circle</span> c2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">Circle</span> c3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">125</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">Triangle</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Triangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">283</span><span class=\"token punctuation\">,</span> <span class=\"token number\">625</span><span class=\"token punctuation\">,</span> <span class=\"token number\">716</span><span class=\"token punctuation\">,</span> <span class=\"token number\">625</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">Triangle</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Triangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">750</span><span class=\"token punctuation\">,</span> <span class=\"token number\">283</span><span class=\"token punctuation\">,</span> <span class=\"token number\">375</span><span class=\"token punctuation\">,</span> <span class=\"token number\">716</span><span class=\"token punctuation\">,</span> <span class=\"token number\">375</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tpic<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tpic<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tpic<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>c3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tpic<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        pic<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tpic<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"自动售货机\"><a class=\"anchor\" href=\"#自动售货机\">#</a> 自动售货机</h2><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br></pre><pre class=\"code\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VendingMachine</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> balance <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> total<span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 构造函数</span><br>\t<span class=\"token punctuation\">{</span><br>\t\ttotal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数重载</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 位于第一行，调用无参数构造函数</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">void</span> <span class=\"token function\">showPrompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">void</span> <span class=\"token function\">insertMoney</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <br>\t<span class=\"token punctuation\">{</span><br>\t\tbalance <span class=\"token operator\">=</span> balance <span class=\"token operator\">+</span> amount<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">void</span> <span class=\"token function\">showBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// System.out.println(this.balance);</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">void</span> <span class=\"token function\">getFood</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>balance <span class=\"token operator\">>=</span> price<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here you are.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tbalance <span class=\"token operator\">=</span> balance <span class=\"token operator\">-</span> price<span class=\"token punctuation\">;</span><br>\t\t\ttotal <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> price<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">VendingMachine</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tvm<span class=\"token punctuation\">.</span><span class=\"token function\">showPrompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tvm<span class=\"token punctuation\">.</span><span class=\"token function\">showBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tvm<span class=\"token punctuation\">.</span><span class=\"token function\">insertMoney</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tvm<span class=\"token punctuation\">.</span><span class=\"token function\">getFood</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tvm<span class=\"token punctuation\">.</span><span class=\"token function\">showBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token class-name\">VendingMachine</span> vm1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tvm1<span class=\"token punctuation\">.</span><span class=\"token function\">insertMoney</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tvm<span class=\"token punctuation\">.</span><span class=\"token function\">showBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tvm1<span class=\"token punctuation\">.</span><span class=\"token function\">showBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li><p>函数重载与类型自动转换<br>在零基础学 Java 中曾经提到过一个类型自动转换的事情。就是如果一个地方，比如函数的参数需要的是比较宽的类型的数据，比如 <code>double</code> 就比 <code>int</code> 来得宽，那么如果调用函数的时候给出了 <code>int</code> 值，是会被自动转换成 <code>double</code> 去调用函数的。</p><p>现在，如果有两个函数重载，一个是 <code>double</code> ，一个是 <code>int</code> ，还会发生类型自动转换吗？</p><p>写一个测试程序来试一下，告诉大家结果吧。</p></li></ol><blockquote><p>存在两个重载函数并不会发生类型自动转换，程序会自动寻找对应的重载函数<br>只存在一个比较窄的数据类型的重载函数时，程序会报错<br>只存在一个比较宽的数据类型的重载函数时，程序会自动转换</p></blockquote><figure class=\"highlight java\"><figcaption><span class=\"lang\">java</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></pre><pre class=\"code\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span><br> <br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> digit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span> digit <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span> digit <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">Scanner</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">Test</span> t0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">(</span> input<span class=\"token punctuation\">.</span>nextInt <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "面向对象程序设计-Java语言-浙江大学-翁恺",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-14/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-14/",
            "title": "第14周 模板和标准模板库简介",
            "date_published": "2020-05-12T08:43:48.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"函数模板\"><a class=\"anchor\" href=\"#函数模板\">#</a> 函数模板</h2><details><summary><span class=\"details-marker\">&nbsp;</span>函数重载是最佳方案吗？</summary><p>假如设计一个求两参数最大值的函数，在实践中可能需要定义四个函数：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token function\">max</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> a <span class=\"token operator\">></span> b <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><span class=\"token keyword\">long</span> <span class=\"token function\">max</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> b <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> a <span class=\"token operator\">></span> b <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">double</span> <span class=\"token function\">max</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> a <span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> a <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><span class=\"token keyword\">char</span> <span class=\"token function\">max</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> b <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> a <span class=\"token operator\">></span> b <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br></pre></div></figure><p>这些函数几乎相同，唯一的区别就是形参类型不同<br>需要事先知道有哪些类型会使用这些函数，对于未知类型，比如 <code>string</code> 这些函数不起作用。</p></details><details><summary><span class=\"details-marker\">&nbsp;</span>专家的解决方案</summary><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">></span> <span class=\"token comment\">//class 某种类型</span><br>T <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>T a <span class=\"token punctuation\">,</span> T b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> a <span class=\"token operator\">></span> b <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ul><li><p>T 是什么？<br>答：是可以比较大小的某种类型。</p></li><li><p>这种抽象的东西是什么？<br>答：就像一个模板，所以叫函数模板</p></li></ul></details><p>函数模板是用<strong>类型</strong>做参数，设计出的通用的函数。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>定义形式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br></pre><pre class=\"code\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token operator\">></span><br><br>函数返回类型 函数名<span class=\"token punctuation\">(</span>函数参数表<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 函数模板定义</span><br>\t<span class=\"token comment\">//T1，T2 等等，用在其中</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><p>其中 <code>template</code> 表示定义的是模板， <code>&lt; &gt;</code> 里是模板的<strong>类型参数</strong>，可以是一个或多个。</p><h3 id=\"模板工作方式\"><a class=\"anchor\" href=\"#模板工作方式\">#</a> 模板工作方式</h3><ul><li>函数模板只是一个抽象说明，不能直接执行，需要实例化为模板函数后才能执行。</li><li>在说明了一个函数模板后，当编译系统发现有一个对应的函数调用时，将根据实参中的类型来确认是否匹配函数模板中对应的形参，然后生成一个重载函数。</li></ul><ol><li>函数模板如下：</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><br>T <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span>T b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span> a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ol start=\"2\"><li>编译时发现：</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><ol start=\"3\"><li>编译系统生成：</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span> a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"例子求数组中的最小值\"><a class=\"anchor\" href=\"#例子求数组中的最小值\">#</a> 例子：求数组中的最小值</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><br><br>T <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span><br>\tT minv<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>minv<span class=\"token operator\">></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tminv<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> minv<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">double</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">3.4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"a数组的最小值为: \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"b数组的最小值为: \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">//a 数组的最小值为：0</span><br><span class=\"token comment\">//b 数组的最小值为：-3.4</span><br></pre></div></figure><h2 id=\"类模板\"><a class=\"anchor\" href=\"#类模板\">#</a> 类模板</h2><details><summary><span class=\"details-marker\">&nbsp;</span>从栈说起</summary><p>栈是一种线性结构<br>栈限制在结构的一端进行插入和删除操作<br>允许插入和删除操作的一端称为栈顶，另一端称为栈底</p><table><thead><tr><th style=\"text-align:right\"></th><th style=\"text-align:center\">⤵️进栈 出栈⤴️</th></tr></thead><tbody><tr><td style=\"text-align:right\">栈顶 top ➡️</td><td style=\"text-align:center\">a<sub>3</sub></td></tr><tr><td style=\"text-align:right\"></td><td style=\"text-align:center\">a<sub>2</sub></td></tr><tr><td style=\"text-align:right\">栈底</td><td style=\"text-align:center\">a<sub>1</sub></td></tr></tbody></table><ul><li>建立 <code>int</code> 型的栈类<ul><li><p>属性（数据成员）：<br><code>int</code> 型数组（存储）<br><code>top</code> （栈顶位置）</p></li><li><p>操作（成员函数）：<br>进栈（插入）<br>出栈（删除）</p></li></ul></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">stack</span><br><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> dat<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设元素数 & lt;=100</span><br>\t\t<span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 进栈</span><br>\t\t\t将数据放入dat<span class=\"token punctuation\">;</span><br>\t\t\t改top<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向上移</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 出栈</span><br>\t\t\t改top<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向下移</span><br>\t\t\t返回删除的值<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ul><li>建立抽象的栈类模板</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></pre><pre class=\"code\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token comment\">// 此处 class 指某种类型，不是 C++ 中的类</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">stack</span><br><span class=\"token punctuation\">{</span><br>\t\tT dat<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token comment\">// 进栈</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>T e<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span> …… <span class=\"token punctuation\">}</span><br>\t\t<span class=\"token comment\">// 出栈</span><br>\t\tT <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span> …… <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure></details><p>类是对问题空间的抽象，而类模板则是对类的抽象，是对一批仅仅成员<strong>数据类型</strong>不同的类的抽象。</p><p>程序中可以首先定义一个类模板，然后通过使用不同的实参生成不同的类。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>定义格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>类型参数<span class=\"token operator\">>></span><br><span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span><br><span class=\"token punctuation\">{</span><br>\t……<br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>使用方法</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\">类模板名 <span class=\"token operator\">&lt;</span>数据类型<span class=\"token operator\">></span> 对象名<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 例如</span><br>stack <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义一个整数类型栈</span><br>stack <span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> s2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义一个字符类型栈</span><br></pre></div></figure><p>在 C++ 的标准模板库 (STL) 中，定义了大量类模板（其中也包括栈），使用这些优秀的类模板可以我们提高编程效率，提高程序可靠性。</p><h2 id=\"标准模板库stl\"><a class=\"anchor\" href=\"#标准模板库stl\">#</a> 标准模板库 STL</h2><p>Standard Template Library，STL 是一个具有工业强度的，高效的 <code>C++</code> 程序库。<br>它实现了诸多在计算机科学领域里常用的基本数据结构和基本算法。<br>STL 主要包含了<strong>容器</strong>、<strong>算法</strong>、<strong>迭代器</strong>。<br>STL 系由 Alexander Stepanov 和 Meng Lee 等人创造于惠普实验室。<br>STL 于 1994 年 2 月年正式成为 <code>ANSI/ISO C++</code> 的一部份。</p><h3 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h3><p>是容纳、包含相同类型元素的对象，主要用类模板实现。</p><ul><li><p>序列型容器：<br>容器中的元素按线性结构组织起来，可以逐个读写元素。<br>主要代表有 <code>vector</code> 向量、 <code>deque</code> 双端队列 、 <code>list</code> 双向链表。</p></li><li><p>关联型容器：<br>关联容器通过键 <code>key</code> 存储和读取元素。<br>主要有 <code>map</code> 映射、 <code>set</code> 集合等。</p></li><li><p>容器适配器：<br>是对前面提到的某些容器（如 <code>vector</code> ）进行再包装，使其变为另一种容器。<br>典型的有栈 <code>stack</code> 、队列 <code>queue</code> 等。</p></li></ul><h3 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h3><p>是用于确定元素位置的数据类型，可用来遍历容器中的元素。</p><ul><li><p>通过迭代器可以读取、修改它指向的元素，它的用法和指针类似。</p></li><li><p>每一种容器都定义了一种迭代器。</p></li><li><p>定义一个容器类的迭代器的方法可以是：</p></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\">容器类名<span class=\"token operator\">&lt;</span>元素类型<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator 变量名<span class=\"token punctuation\">;</span><br><br>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span><br></pre></div></figure><ul><li>访问一个迭代器指向的元素：</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token operator\">*</span>迭代器变量名<br><br><span class=\"token operator\">*</span>it<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"算法\"><a class=\"anchor\" href=\"#算法\">#</a> 算法</h3><p>由许多函数模版组成的集合，实现了大量通用算法，用于操控各种容器。</p><ul><li><p>STL 中提供的算法涉及到：比较、交换、查找、遍历、复制、修改、移除、反转、排序、合并等。大约有 70 种标准算法。</p></li><li><p>算法通过<strong>迭代器</strong>来操纵容器中的元素。</p></li><li><p>算法可以处理容器，也可以处理 C 语言的数组。</p></li></ul><h2 id=\"vector-容器\"><a class=\"anchor\" href=\"#vector-容器\">#</a> <code>vector</code> 容器</h2><h3 id=\"主要特征\"><a class=\"anchor\" href=\"#主要特征\">#</a> 主要特征</h3><ul><li><p><code>vector</code> 实际上就是对动态数组封装</p></li><li><p>可以像数组一样可以使用下标访问元素<br>若 <code>vector</code> 长度为 <code>n</code> ，则其下标为 <code>0~n-1</code> ，根据下标访问元素效率高</p></li><li><p><code>vector</code> 对象的空间随着插入删除操作自动调整<br>因为空间自动调整比较耗费时间，因此频繁插入删除的情况下， <code>vector</code> 效率稍差</p></li></ul><h3 id=\"对象创建\"><a class=\"anchor\" href=\"#对象创建\">#</a> 对象创建</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></pre><pre class=\"code\"><span class=\"token comment\">// 创建一个空向量</span><br>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//int 类型向量</span><br>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> s1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//string 类型向量</span><br><br><span class=\"token comment\">// 从已有向量复制创建向量</span><br>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拷贝 v1 内容到 v2（拷贝构造函数）</span><br><br><span class=\"token comment\">// 创建 10 个元素的向量</span><br>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 创建 10 个元素的向量，所有元素都是 1.5</span><br>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 创建向量指针</span><br>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span>pvec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"添加元素\"><a class=\"anchor\" href=\"#添加元素\">#</a> 添加元素</h3><h4 id=\"push_back-尾部添加元素\"><a class=\"anchor\" href=\"#push_back-尾部添加元素\">#</a> <code>push_back()</code> 尾部添加元素</h4><p>使用 <code>push_back()</code> 函数向 <code>vector</code> 尾部添加元素</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span><br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><table><tbody><tr><td>1</td><td></td><td></td></tr><tr><td>1</td><td>2</td><td></td><td></td></tr></tbody></table><h4 id=\"insert-任意位置插入元素\"><a class=\"anchor\" href=\"#insert-任意位置插入元素\">#</a> <code>insert()</code> 任意位置插入元素</h4><p>使用 <code>insert()</code> 函数向 <code>vector</code> 添加元素</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span> </span><span class=\"token comment\">// 使用 vector 必备</span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span><br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 头部插入</span><br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尾部插入</span><br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 倒数第二位置</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p><code>v1.begin()</code> , <code>v1.end()</code> 获取相应位置的迭代器</p></blockquote><table><tbody><tr><td>1</td><td></td><td></td></tr><tr><td>1</td><td>2</td><td></td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td></td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td>4</td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td></td></tr></tbody></table><h3 id=\"访问元素\"><a class=\"anchor\" href=\"#访问元素\">#</a> 访问元素</h3><p>使用 <code>[下标]</code> 可以获取元素值，修改元素</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span><br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 倒数第二位置</span><br>\tv1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//v1 [5]=6; 超界错误</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">//v1.size () 为 5 </span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><table><tbody><tr><td>1</td><td></td><td></td></tr><tr><td>1</td><td>2</td><td></td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td></td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td>4</td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>10</td><td></td></tr></tbody></table><h3 id=\"删除元素\"><a class=\"anchor\" href=\"#删除元素\">#</a> 删除元素</h3><h4 id=\"pop_back-删除最后一个元素\"><a class=\"anchor\" href=\"#pop_back-删除最后一个元素\">#</a> <code>pop_back()</code> 删除最后一个元素</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span><br>\t…… ……<br>\tv1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除 10</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><table><tbody><tr><td>1</td><td></td><td></td></tr><tr><td>1</td><td>2</td><td></td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td></td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td>4</td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>10</td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td>3</td><td></td><td></td></tr></tbody></table><h4 id=\"erase-删除任意位置元素\"><a class=\"anchor\" href=\"#erase-删除任意位置元素\">#</a> <code>erase()</code> 删除任意位置元素</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span><br>\t…… ……<br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除 10</span><br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除 0</span><br>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全删</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"clear-删除全部元素\"><a class=\"anchor\" href=\"#clear-删除全部元素\">#</a> <code>clear()</code> 删除全部元素</h4><p><code>v1.clear()</code></p><table><tbody><tr><td>1</td><td></td><td></td></tr><tr><td>1</td><td>2</td><td></td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td></td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td>4</td><td></td></tr><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>10</td><td></td></tr><tr><td>1</td><td>2</td><td>3</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id=\"向量大小相关函数\"><a class=\"anchor\" href=\"#向量大小相关函数\">#</a> 向量大小相关函数</h3><table><tbody><tr><td><code>v.size()</code></td><td>返回向量的大小</td></tr><tr><td><code>v.max_size()</code></td><td>返回向量可容纳的最大个数</td></tr><tr><td><code>v.empty()</code></td><td>返回向量是否为空</td></tr><tr><td><code>v.resize(n)</code></td><td>调整向量大小，使其可以容纳 <code>n</code> 个元素，如果 <code>n&lt;v.size()</code> ， 则删除多出来的元素；否则，添加新元素</td></tr><tr><td><code>v.resize(n,t)</code></td><td>调整向量的大小，使其可以容纳 <code>n</code> 个元素，所有新添加的元素初始化为 <code>t</code></td></tr><tr><td><code>v.capacity()</code></td><td>获取向量的容量，再分配内存空间之前所能容纳的元素个数</td></tr></tbody></table><table><tbody><tr><td>0</td><td>1</td><td>2</td><td>...</td><td>23</td><td></td><td>...</td><td>...</td></tr><tr><td colspan=\"5\"></td><td colspan=\"3\"><p>⬆️<br><code>v.size()</code></p></td><td><p>⬆️<br><code>v.capacity()</code></p></td></tr></tbody></table><h3 id=\"迭代器-2\"><a class=\"anchor\" href=\"#迭代器-2\">#</a> 迭代器</h3><h4 id=\"基本操作\"><a class=\"anchor\" href=\"#基本操作\">#</a> 基本操作</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>向量上的迭代器定义、使用</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span><br><span class=\"token operator\">*</span>it <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p><code>vector</code> 上迭代器支持<strong>随机访问</strong>：</p><ol><li>提供读写操作</li><li>并能在数据中随机移动（前后，跳跃式）</li></ol><blockquote><p>用加、减操作移动迭代器：</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\">it<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向下一元素</span><br>it<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>it<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向前一元素</span><br>it <span class=\"token operator\">+</span> i <span class=\"token comment\">// 返回指向 it 后面的第 i 个元素的迭代器</span><br>it <span class=\"token operator\">-</span> i <span class=\"token comment\">// 返回指向 it 前面的第 i 个元素的迭代器</span><br></pre></div></figure><blockquote><p>用 <code>&lt;</code> , <code>&lt;=</code> , <code>&gt;</code> , <code>&gt;=</code> , <code>==</code> , <code>!=</code> 判断迭代器前后、相等关系：</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">it1 <span class=\"token operator\">&lt;</span> it2 <span class=\"token comment\">// 表示 it1 在 it2 之前</span><br></pre></div></figure><h4 id=\"begin和end函数\"><a class=\"anchor\" href=\"#begin和end函数\">#</a> <code>begin()</code> 和 <code>end()</code> 函数</h4><p>每种容器都定义了一对命名为 <code>begin</code> 和 <code>end</code> 的函数，用于返回迭代器。<br>如果容器中有元素，由 <code>begin</code> 返回的迭代器指向第一个元素：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">it <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向 v1 [0]</span><br></pre></div></figure><p>由 <code>end</code> 返回的迭代器指向 <code>vector</code> 的末端元素的下一个。<br>通常称为超出末端迭代器，表明它指向了一个不存在的元素。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">it <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向末端元素的下一个</span><br></pre></div></figure><p>如果 <code>vector</code> 为空， <code>begin</code> 返回的迭代器与 <code>end</code> 返回的迭代器相同</p><h4 id=\"用迭代器读取元素\"><a class=\"anchor\" href=\"#用迭代器读取元素\">#</a> 用迭代器读取元素</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>将1~9加入vector，再将偶数取出</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <br>\t<span class=\"token punctuation\">{</span><br>\t\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加 1~9</span><br>\t<span class=\"token punctuation\">}</span><br><br>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">&lt;</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"以迭代器为参数的插入删除函数\"><a class=\"anchor\" href=\"#以迭代器为参数的插入删除函数\">#</a> 以迭代器为参数的插入删除函数</h4><table><tbody><tr><td><code>v.insert(p,t)</code></td><td>在迭代器 <code>p</code> 所指向的元素<strong>前面</strong>插入值为 <code>t</code> 的元素</td></tr><tr><td><code>v.insert(p,n,t)</code></td><td>在迭代器 <code>p</code> 所指向的元素<strong>前面</strong>插入 <code>n</code> 个值为 <code>t</code> 的新元素</td></tr><tr><td><code>v.insert(p,b,e)</code></td><td>在迭代器 <code>p</code> 所指向的元素<strong>前面</strong>插入迭代器 <code>b</code> 和 <code>e</code> 标记的范围内的元素</td></tr><tr><td><code>v.erase(p)</code></td><td>删除迭代器 <code>p</code> 指向的容器中的元素</td></tr><tr><td><code>v.erase(b,e)</code></td><td>删除迭代器 <code>b</code> 和 <code>e</code> 所标记范围内的元素</td></tr></tbody></table><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>通过迭代器进行删除和插入</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br></pre><pre class=\"code\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 在头部插入 5</span><br>v1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 在尾部插入 7</span><br>v1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 在下标为 4 处插入 9</span><br>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><br>v1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 删除偶数元素</span><br><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">&lt;</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tit<span class=\"token operator\">=</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 将 v1 的一部分拷贝到 v2</span><br>v2<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><table><tbody><tr><td>v2</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>v1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td><td></td><td></td><td></td></tr><tr><td>v1</td><td>5</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td><td></td><td></td></tr><tr><td>v1</td><td>5</td><td>0</td><td>0</td><td>0</td><td>0</td><td>7</td><td></td><td></td></tr><tr><td>v1</td><td>5</td><td>0</td><td>0</td><td>0</td><td>9</td><td>0</td><td>7</td><td></td></tr><tr><td>v1</td><td>5</td><td>9</td><td>7</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>v2</td><td>5</td><td>9</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td></tr></tbody></table><h4 id=\"用迭代器循环删除的一个问题\"><a class=\"anchor\" href=\"#用迭代器循环删除的一个问题\">#</a> 用迭代器循环删除的一个问题</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>以下为错误代码</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br></pre><pre class=\"code\">vecotr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> vc<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> vc<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tvc<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p>原因： <code>erase()</code> 删除元素后， <code>it</code> 失效，并不是指向下一个元素</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>解决方案</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></pre><pre class=\"code\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">&lt;</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tit<span class=\"token operator\">=</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p>在 <code>C++ 11</code> 标准中， <code>erase()</code> 会返回一个 <code>iterator</code> ，这个 <code>iterator</code> 指向了 “当前删除元素的后继元素”。</p></blockquote><h3 id=\"算法应用\"><a class=\"anchor\" href=\"#算法应用\">#</a> 算法应用</h3><p>算法主要在头文件 <code>&lt;algorithm&gt;</code> 和 <code>&lt;numeric&gt;</code> 中定义</p><table><thead><tr><th>功能</th><th>常用算法</th></tr></thead><tbody><tr><td>排序</td><td><code>sort()</code></td></tr><tr><td>查找</td><td><code>find()</code></td></tr><tr><td>替换</td><td><code>replace()</code></td></tr><tr><td>合并</td><td><code>merge()</code></td></tr><tr><td>反序</td><td><code>reverse()</code></td></tr><tr><td>统计</td><td><code>count()</code></td></tr><tr><td>其他等等算法</td></tr></tbody></table><ul><li><p>许多算法往往以迭代器作参数。<br>比如排序和查找都需要两个迭代器参数（表示起始位置、终止位置）。</p></li><li><p>有的算法返回一个迭代器。<br>比如 <code>find</code> 算法，在容器中查找一个元素，并返回一个指向该元素的迭代器。</p></li></ul><h4 id=\"查找-find\"><a class=\"anchor\" href=\"#查找-find\">#</a> 查找 <code>find()</code></h4><p>简化形式： <code>find(first, last, val)</code></p><ul><li><code>first</code> 和 <code>last</code> 这两个参数都是容器的迭代器，它们给出了容器中的查找区间起点和终点。</li></ul><blockquote><p>这个区间是个左闭右开的区间 <code>[first,last)</code> ，即区间的起点是位于查找范围之中的，而终点不是</p></blockquote><ul><li><p><code>val</code> 参数是要查找的元素的值。</p></li><li><p>函数返回值是一个迭代器。<br>如果找到，则该迭代器指向被找到的元素。<br>如果找不到，则该迭代器指向查找区间终点。</p></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span> </span><span class=\"token comment\">// 算法头文件</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tvector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个容器，5 个 3</span><br>\tvector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 迭代器</span><br><br>\tp <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> p<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 3</span><br><br>\tp <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> p<span class=\"token operator\">==</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"not found\\n\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// not found</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"排序-sort\"><a class=\"anchor\" href=\"#排序-sort\">#</a> 排序 <code>sort()</code></h4><p>简化形式： <code>void sort( first, last )</code></p><ul><li><code>first</code> 和 <code>last</code> 这两个参数都是容器的迭代器，它们给出了容器中的查找区间起点和终点。</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tvector <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span><br>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"food\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"candy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// food candy apple</span><br><br>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\tvector <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// apple candy food</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"合并-merge\"><a class=\"anchor\" href=\"#合并-merge\">#</a> 合并 <code>merge()</code></h4><p>形式： <code>merge(f1, e1, f2, e2, p)</code></p><ul><li><code>f1</code> 、 <code>e1</code> 、 <code>f2</code> 、 <code>e2</code> 、 <code>p</code> 都是迭代器</li><li>将有序序列 <code>v1</code> 中 <code>[f1, e1)</code> 和有序序列 <code>v2</code> 中 <code>[f2, e2)</code> 合并成有序序列，存入 <code>p</code> 的前面</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> B<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span><br><br>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> A<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> B<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> A<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> B<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 5 10 10 15 20 20 25 30 40 50</span><br>\t<br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"其他算法\"><a class=\"anchor\" href=\"#其他算法\">#</a> 其他算法</h4><ul><li><p><code>replace(first, last, old, new)</code><br><code>first</code> ， <code>last</code> 为迭代器<br>作用：将 <code>[first,last)</code> 范围内的所有值为 <code>old</code> 的替换为 <code>new</code></p></li><li><p><code>reverse(start, end)</code><br><code>start</code> ， <code>end</code> 为迭代器<br>作用：将序列中 <code>[start, end)</code> 范围反转排列顺序</p></li><li><p><code>count(start, end, searchValue)</code><br><code>start</code> ， <code>end</code> 为迭代器<br>作用：统计 <code>[start, end)</code> 范围内等于 <code>searchValue</code> 的元素个数</p></li><li><p><code>accumulate(first, last, init)</code><br><code>first</code> ， <code>last</code> 为迭代器<br>作用：将 <code>[first,last)</code> 范围内的所有值相加，再加上 <code>init</code> 后返回</p></li></ul><h2 id=\"序列型容器\"><a class=\"anchor\" href=\"#序列型容器\">#</a> 序列型容器</h2><h3 id=\"类型\"><a class=\"anchor\" href=\"#类型\">#</a> 类型</h3><h4 id=\"vector向量\"><a class=\"anchor\" href=\"#vector向量\">#</a> <code>vector</code> 向量</h4><p>定义在头文件 <code>&lt;vector&gt;</code><br>实际上就是个动态数组。<br>随机存取任何元素都能在<strong>常数时间</strong>完成。<br>在<strong>尾端增删元素</strong>具有较佳的性能。</p><p><img data-src=\"https://i.loli.net/2020/07/23/cXG2LmYvB7fk65E.png\" alt=\"向量vector\" title=\"向量vector\"><span class=\"image-info\">向量 <code>vector</code></span></p><h4 id=\"deque双端队列\"><a class=\"anchor\" href=\"#deque双端队列\">#</a> <code>deque</code> 双端队列</h4><p>定义于头文件 <code>&lt;deque&gt;</code><br>也是个动态数组。<br>随机存取任何元素都能在<strong>常数时间</strong>完成，但性能次于 vector。<br>在<strong>两端增删元素</strong>具有较佳的性能。</p><p><img data-src=\"https://i.loli.net/2020/07/24/4kqEshyHBVom9ev.png\" alt=\"双端队列deque\" title=\"双端队列deque\"><span class=\"image-info\">双端队列 <code>deque</code></span></p><h4 id=\"list双向链表\"><a class=\"anchor\" href=\"#list双向链表\">#</a> <code>list</code> 双向链表</h4><p>定义于头文件 <code>&lt;list&gt;</code><br>任意位置插入和删除元素的效率都很高<br>不支持随机存取<br>每个元素还有指针占用额外空间</p><p><img data-src=\"https://i.loli.net/2020/07/24/35IJA4QuTKFGfZU.png\" alt=\"双向链表list\" title=\"双向链表list\"><span class=\"image-info\">双向链表 <code>list</code></span></p><blockquote><p>在序列容器中，元素的插入位置同元素的值无关</p></blockquote><h3 id=\"选用\"><a class=\"anchor\" href=\"#选用\">#</a> 选用</h3><ul><li><p>如果程序要求随机访问元素，则应用 <code>vector</code> 或者 <code>deque</code> 容器</p></li><li><p>如果程序必须在容器中间位置插入或删除元素，则应采用 <code>list</code> 容器</p></li><li><p>如果程序不是在容器的中间位置，而是在容器的首部或尾部插入或删除元素，则应采用 <code>deque</code> 容器</p></li></ul><h3 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>默认构造函数初始化</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span><br>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> list1<span class=\"token punctuation\">;</span><br>deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> deq<span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>拷贝构造函数初始化</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></pre><pre class=\"code\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vec1<span class=\"token punctuation\">;</span><br>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span>vec1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> list1<span class=\"token punctuation\">;</span><br>list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">list2</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> deq1<span class=\"token punctuation\">;</span><br>deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token function\">deq2</span><span class=\"token punctuation\">(</span>deq1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>创建有长度为10的容器</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\">vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">vec</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">list1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>deque<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">deq</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>创建有10个初值的容器</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\">vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">vec</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">list1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>deque<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">deq</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"添加元素-2\"><a class=\"anchor\" href=\"#添加元素-2\">#</a> 添加元素</h3><ul><li><p><code>c.push_back(t)</code><br>在容器 <code>c</code> 的尾部添加值为 <code>t</code> 的元素<br>返回 <code>void</code> 类型</p></li><li><p><code>c.push_front(t)</code><br>在容器 <code>c</code> 的前端添加值为 <code>t</code> 的元素<br>返回 <code>void</code> 类型<br>只适用于 <code>list</code> 和 <code>deque</code></p></li><li><p><code>c.insert(p,t)</code><br>在迭代器 <code>p</code> 所指向的元素<strong>前面</strong>元素 <code>t</code><br>返回指向新添加元素的迭代器</p></li><li><p><code>c.insert(p,n,t)</code><br>在迭代器 <code>p</code> 所指向的元素<strong>前面</strong>插入 <code>n</code> 个值为 <code>t</code> 的新元素<br>返回 <code>void</code> 类型</p></li><li><p><code>c.insert(p,b,e)</code><br>在迭代器 <code>p</code> 所指向的元素<strong>前面</strong>插入迭代器 <code>b</code> 和 <code>e</code> 标记的范围内的元素<br>返回 <code>void</code> 类型</p></li></ul><h3 id=\"访问元素-2\"><a class=\"anchor\" href=\"#访问元素-2\">#</a> 访问元素</h3><ul><li><p><code>c.back()</code><br>返回容器 <code>c</code> 的最后一个元素的引用</p></li><li><p><code>c.front()</code><br>返回容器 c 的第一个元素的引用</p></li><li><p><code>c[n]</code><br>返回下标为 <code>n</code> 的元素的引用（ <code>0 &lt;= n &lt; c.size()</code> ）<br>只适用于 <code>vector</code> 和 <code>deque</code> 容器</p></li><li><p><code>c.at[n]</code><br>返回下标为 <code>n</code> 的元素的引用（ <code>0 &lt;= n &lt; c.size()</code> ）<br>只适用于 <code>vector</code> 和 <code>deque</code> 容器</p></li></ul><h3 id=\"删除元素-2\"><a class=\"anchor\" href=\"#删除元素-2\">#</a> 删除元素</h3><ul><li><p><code>c.pop_back()</code><br>删除容器 <code>c</code> 的最后一个元素</p></li><li><p><code>c.pop_front()</code><br>删除容器 <code>c</code> 的第一个元素<br>只适用于 <code>deque</code> 和 <code>list</code> 容器</p></li><li><p><code>c.erase(p)</code><br>删除迭代器 <code>p</code> 指向的容器中的元素</p></li><li><p><code>c.erase(b,e)</code><br>删除迭代器 <code>b</code> 和 <code>e</code> 所标记范围内的元素</p></li><li><p><code>c.clear()</code><br>删除容器中所有的元素</p></li></ul><h2 id=\"关联型容器\"><a class=\"anchor\" href=\"#关联型容器\">#</a> 关联型容器</h2><h3 id=\"特征\"><a class=\"anchor\" href=\"#特征\">#</a> 特征</h3><p>STL 提供了 4 个关联容器，包括： <code>map</code> 映射、 <code>multimap</code> 多重映射、 <code>set</code> 集合、 <code>multiset</code> 多重集合。</p><p><code>map</code> 、 <code>multimap</code> 的元素由 <code>key</code> ， <code>value</code> 二元组构成，其中键必须是唯一的。</p><p><img data-src=\"https://i.loli.net/2020/07/24/mSwbrEo25e69Ccv.png\" alt=\"map映射&amp;multimap多重映射\" title=\"map映射&amp;multimap多重映射\"><span class=\"image-info\"><code>map</code> 映射 &amp; <code>multimap</code> 多重映射</span></p><p><code>set</code> 、 <code>multiset</code> 相当于只有键 <code>key</code> 、没有对应值 <code>value</code> 的 <code>map</code> 和 <code>mulitimap</code> 。</p><p><code>set</code> 支持通过键实现的快速读取，元素唯一。</p><pre><code>A B C D E F\n</code></pre><p><code>multiset</code> 支持同一个键多次出现的 <code>set</code> 类型。</p><pre><code>A A C C E E\n</code></pre><h3 id=\"与序列容器的差别\"><a class=\"anchor\" href=\"#与序列容器的差别\">#</a> 与序列容器的差别</h3><p>关联容器是通过键 <code>key</code> 存储和读取元素。<br>顺序容器则通过元素在容器中的<strong>位置顺序</strong>存储和访问元素。</p><p><code>map</code> 和 <code>set</code> 的底层机制都是通过一种称为 “红黑树” 的数据结构存取数据，这使得它们的数据存取效率相当高。</p><blockquote><p>“红黑树” 是一种常见的数据结构。</p></blockquote><h2 id=\"map容器\"><a class=\"anchor\" href=\"#map容器\">#</a> <code>map</code> 容器</h2><h3 id=\"pair类型\"><a class=\"anchor\" href=\"#pair类型\">#</a> <code>pair</code> 类型</h3><p><code>pair</code> 类定义在 <code>&lt;utility&gt;</code> 头文件中。<br><code>pair</code> 是一个类模板，它将两个值组织在一起，这两个值的类型可不同。<br>可以通过 <code>first</code> 和 <code>second</code> 公共数据成员来访问这两个值。<br><code>pair</code> 对象常常作为元素，被添加到 <code>map</code> 中。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>pair对象的定义</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\">pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> <span class=\"token function\">mypair</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用构造函数</span><br><br>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> otherPair<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接赋值</span><br>otherPair<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span><br>otherPair<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>函数模板 <code>make_pair()</code> 能从两个变量构造一个 <code>pair</code></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">></span> aPair <span class=\"token operator\">=</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"创建及添加元素\"><a class=\"anchor\" href=\"#创建及添加元素\">#</a> 创建及添加元素</h3><p><code>map</code> 类定义在 <code>&lt;map&gt;</code> 头文件中。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>创建map对象</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> StuInfo<span class=\"token punctuation\">;</span><br></pre></div></figure><blockquote><p>定义了一个用 <code>int</code> 作为键、相关联 <code>string</code> 为值的 <code>map</code></p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>插入pair对象</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\">pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> <span class=\"token function\">mypair</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>StuInfo<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>mypair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>StuInfo<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"使用运算符\"><a class=\"anchor\" href=\"#使用运算符\">#</a> 使用运算符 <code>[]</code></h3><ul><li><p>修改元素的值<br>键不可修改</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">StuInfo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>因为键为 <code>1</code> 的元素存在，因此修改元素。</p></li><li><p>添加元素</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">StuInfo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Lily\"</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>先查找主键为 <code>2</code> 的项，没找到，因此添加这个键为 <code>2</code> 的项。</p></li><li><p>取得元素的值</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">cout<span class=\"token operator\">&lt;&lt;</span>StuInfo<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出键 5 对应的值</span><br></pre></div></figure></li></ul><h3 id=\"find查找元素\"><a class=\"anchor\" href=\"#find查找元素\">#</a> <code>find()</code> 查找元素</h3><p>用 <code>find()</code> 查找 <code>map</code> 中是否包含某个关键字<br>若查找成功则返回目标项的迭代器，否则返回 <code>StuInfo.end()</code> 迭代器。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span><br>it <span class=\"token operator\">=</span> StuInfo<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 查找关键字 target</span><br><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> it <span class=\"token operator\">==</span> StuInfo<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"not existed!\"</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"find it!\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"删除元素-3\"><a class=\"anchor\" href=\"#删除元素-3\">#</a> 删除元素</h3><ul><li>通过 <code>erase()</code> 函数按照关键字删除<br>若删除成功，返回 <code>1</code> ，否则返回 <code>0</code><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token comment\">// 删掉关键字 \"1\" 对应的条目</span><br><span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> StuInfo<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li><li>用 <code>clear()</code> 清空 <code>map</code><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">StuInfo<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li></ul><h3 id=\"迭代器-3\"><a class=\"anchor\" href=\"#迭代器-3\">#</a> 迭代器</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>错误实例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br><span class=\"marked\">3</span><br>4<br></pre><pre class=\"code\">map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span><br>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span><br><span class=\"marked\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span><br><span class=\"token punctuation\">{</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>正确的用法</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\">map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span><br>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it <span class=\"token operator\">!=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> StuInfo<span class=\"token punctuation\">;</span><br>\tStuInfo<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tStuInfo<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tStuInfo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Lily\"</span><span class=\"token punctuation\">;</span><br>\tmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">=</span> StuInfo<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it <span class=\"token operator\">!=</span> StuInfo<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// 1 Tom</span><br><span class=\"token comment\">// 2 Lily</span><br><span class=\"token comment\">// 5 Jack</span><br></pre></div></figure><h2 id=\"迭代器-4\"><a class=\"anchor\" href=\"#迭代器-4\">#</a> 迭代器</h2><ul><li><p>STL 中的迭代器按功能由弱到强分为 5 种：</p><ol><li>输入： <code>Input iterators</code> 提供对数据的只读访问。</li><li>输出： <code>Output iterators</code> 提供对数据的只写访问。</li><li>正向： <code>Forward iterators</code> 提供读写操作，并能一次一个地向前推进迭代器。</li><li>双向： <code>Bidirectional iterators</code> 提供读写操作，并能一次一个地向前和向后移动。</li><li>随机访问： <code>Random access iterators</code> 提供读写操作，并能在数据中随机移动。</li></ol></li><li><p>编号大的迭代器拥有编号小的迭代器的所有功能，能当作编号小的迭代器使用。</p></li></ul><h3 id=\"不同迭代器能进行的操作\"><a class=\"anchor\" href=\"#不同迭代器能进行的操作\">#</a> 不同迭代器能进行的操作</h3><ul><li>所有迭代器： <code>++p</code> , <code>p++</code></li><li>输入迭代器： <code>*p</code> , <code>p = p1</code> , <code>p==p1</code> , <code>p!=p1</code></li><li>输出迭代器： <code>*p</code> , <code>p = p1</code></li><li>正向迭代器： 上面全部</li><li>双向迭代器： 上面全部， <code>--p</code> , <code>p--</code> ,</li><li>随机访问迭代器： 上面全部，以及：<br><code>p += i</code> , <code>p -= i</code> ,<br><code>p + i</code> 返回指向 <code>p</code> 后面的第 <code>i</code> 个元素的迭代器<br><code>p – i</code> 返回指向 <code>p</code> 前面的第 <code>i</code> 个元素的迭代器<br><code>p &lt; p1</code> , <code>p &lt;= p1</code> , <code>p &gt; p1</code> , <code>p &gt;= p1</code></li></ul><h3 id=\"容器所支持的迭代器类别\"><a class=\"anchor\" href=\"#容器所支持的迭代器类别\">#</a> 容器所支持的迭代器类别</h3><table><thead><tr><th>容器</th><th>迭代器类别</th></tr></thead><tbody><tr><td><code>vector</code></td><td>随机</td></tr><tr><td><code>deque</code></td><td>随机</td></tr><tr><td><code>list</code></td><td>双向</td></tr><tr><td><code>set/multiset</code></td><td>双向</td></tr><tr><td><code>map/multimap</code></td><td>双向</td></tr><tr><td><code>stack</code></td><td>不支持迭代器</td></tr><tr><td><code>queue</code></td><td>不支持迭代器</td></tr></tbody></table><blockquote><p>关联容器支持双向迭代器，它支持： <code>*</code> 、 <code>++</code> 、 <code>--</code> 、 <code>=</code> 、 <code>==</code> 、 <code>!=</code> 。<br>不支持： <code>&lt;</code> 、 <code>&lt;=</code> 、 <code>&gt;=</code> 、 <code>&gt;</code></p></blockquote><h2 id=\"容器适配器\"><a class=\"anchor\" href=\"#容器适配器\">#</a> 容器适配器</h2><p>容器适配器将其他容器加以包装、改造，变成新的容器。<br>实质上是一种受限容器。<br>典型容器适配器： <code>stack</code> 栈、 <code>queue</code> 队列</p><h3 id=\"stack堆栈\"><a class=\"anchor\" href=\"#stack堆栈\">#</a> <code>stack</code> 堆栈</h3><p>栈是限制在结构的一端进行插入和删除操作。<br>允许进行插入和删除操作的一端称为栈顶，另一端称为栈底。<br><img data-src=\"https://i.loli.net/2020/07/24/MX1WmgEoUfla5qF.png\" alt=\"堆栈示意图\"></p><p>编程时加入下列语句：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stack></span></span><br></pre></div></figure><p>栈的常用函数有：</p><table><tbody><tr><td><code>push(elem)</code></td><td>将元素 <code>elem</code> 入栈</td></tr><tr><td><code>pop()</code></td><td>栈顶元素出栈</td></tr><tr><td><code>top()</code></td><td>求栈顶元素</td></tr><tr><td><code>empty()</code></td><td>判断栈是否空</td></tr><tr><td><code>size()</code></td><td>求栈内元素个数</td></tr></tbody></table><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stack></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 定义栈 s</span><br>\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span> <br>\t<span class=\"token comment\">// 入栈</span><br>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token comment\">// 读栈顶元素</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"栈顶元素：\"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 返回元素个数</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"元素数量：\"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"出栈过程：\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 栈非空</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读栈顶元素</span><br>\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 出栈，删除栈顶元素</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// 栈顶元素：9</span><br><span class=\"token comment\">// 元素数量：4</span><br><span class=\"token comment\">// 出栈过程：9 3 2 1</span><br></pre></div></figure><h3 id=\"queue队列\"><a class=\"anchor\" href=\"#queue队列\">#</a> <code>queue</code> 队列</h3><p>只能在一端进行插入、在另一端迚行删除操作的线性结构。<br><img data-src=\"https://i.loli.net/2020/07/24/r8OSwM5i6Kh9CIV.png\" alt=\"队列示意图\"></p><p>加入下列语句：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span><br></pre></div></figure><p>队列的常用函数有：</p><table><tbody><tr><td><code>push()</code></td><td>入队</td></tr><tr><td><code>pop()</code></td><td>出队</td></tr><tr><td><code>front()</code></td><td>读取队首元素</td></tr><tr><td><code>back()</code></td><td>读取队尾元素</td></tr><tr><td><code>empty()</code></td><td>判断队列是否空</td></tr><tr><td><code>size()</code></td><td>求队列长度</td></tr></tbody></table>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-13/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-13/",
            "title": "第13周 标准输入输出与文件操作",
            "date_published": "2020-05-10T07:52:12.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"流与流库\"><a class=\"anchor\" href=\"#流与流库\">#</a> 流与流库</h2><h3 id=\"流\"><a class=\"anchor\" href=\"#流\">#</a> 流</h3><p>流是指从一个位置向另一个位置传输的一连串数据的集合。</p><p>在输入输出过程中，会在内存中为每一个数据流开辟一个内存缓冲区，用来存数据。从而匹配不同工作效率的对象。</p><pre class=\"mermaid graph\"><svg id=\"mermaid-1595956460204\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width:721.75px\" viewBox=\"0 0 721.75 233\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M68,27.5L101,27.5L163.8135533707865,97\" marker-end=\"url(#arrowhead26)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead26\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M76,116.5L101,116.5L126,116.5\" marker-end=\"url(#arrowhead27)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead27\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M68,205.5L101,205.5L163.8135533707865,136\" marker-end=\"url(#arrowhead28)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead28\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M236.875,116.5L261.875,116.5L286.875,116.5\" marker-end=\"url(#arrowhead29)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead29\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M434.875,116.5L459.875,116.5L484.875,116.5\" marker-end=\"url(#arrowhead30)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead30\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M557.9364466292135,97L620.75,27.5L645.75,27.5\" marker-end=\"url(#arrowhead31)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead31\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M595.75,116.5L620.75,116.5L653.75,116.5\" marker-end=\"url(#arrowhead32)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead32\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M557.9364466292135,136L620.75,205.5L645.75,205.5\" marker-end=\"url(#arrowhead33)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead33\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"A\" transform=\"translate(42,27.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">键盘</tspan></text></g></g></g><g class=\"node default\" id=\"B\" transform=\"translate(42,116.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-34\" y=\"-19.5\" width=\"68\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-24,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">扫描仪</tspan></text></g></g></g><g class=\"node default\" id=\"C\" transform=\"translate(42,205.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">文件</tspan></text></g></g></g><g class=\"node default\" id=\"D\" transform=\"translate(181.4375,116.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-55.4375\" y=\"-19.5\" width=\"110.875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-45.4375,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">abc...输入流</tspan></text></g></g></g><g class=\"node default\" id=\"E\" transform=\"translate(360.875,116.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-74\" y=\"-19.5\" width=\"148\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-64,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">进程使用的内存区</tspan></text></g></g></g><g class=\"node default\" id=\"F\" transform=\"translate(679.75,27.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-34\" y=\"-19.5\" width=\"68\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-24,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">显示器</tspan></text></g></g></g><g class=\"node default\" id=\"G\" transform=\"translate(679.75,116.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">文件</tspan></text></g></g></g><g class=\"node default\" id=\"H\" transform=\"translate(679.75,205.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-34\" y=\"-19.5\" width=\"68\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-24,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">打印机</tspan></text></g></g></g><g class=\"node default\" id=\"I\" transform=\"translate(540.3125,116.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-55.4375\" y=\"-19.5\" width=\"110.875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-45.4375,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">abc...输出流</tspan></text></g></g></g></g></g></g></svg></pre><h3 id=\"输入输出流类库结构\"><a class=\"anchor\" href=\"#输入输出流类库结构\">#</a> 输入输出流类库结构</h3><p><img data-src=\"https://i.loli.net/2020/07/20/A9MmDC2xefVFEcZ.png\" alt=\"输入输出流类库结构\"></p><ol><li>定义了基本的格式控制符、状态设定函数等等</li><li>定义了输入流类、输出流类</li><li>定义了标准输入、输出流对象。自动包含 <code>&lt;ios&gt;</code> ， <code>&lt;ostream&gt;</code> 等</li><li>定义文件操作流类</li></ol><h2 id=\"标准输入流\"><a class=\"anchor\" href=\"#标准输入流\">#</a> 标准输入流</h2><p>从标准输入设备（键盘）流向程序的数据。<br>一般使用 <code>cin</code> 流对象进行输入。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span><br>cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从键盘输入 2 个整数</span><br></pre></div></figure><p><code>&gt;&gt;</code> 的特点：</p><ol><li>符号重载</li><li>以空格、回车做分隔符</li></ol><p><code>cin</code> 是 <code>istream</code> 类的对象，除了 <code>&gt;&gt;</code> 符号外，常用函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><code>read</code></td><td>无格式输入指定字节数</td></tr><tr><td><code>get</code></td><td>从流中提取字符，包括空格</td></tr><tr><td><code>getline</code></td><td>从流中提取一行字符</td></tr><tr><td><code>ignore</code></td><td>提取并丢弃流中指定字符</td></tr><tr><td><code>peek</code></td><td>返回流中下一个字符，但不从流中删除</td></tr><tr><td><code>gcount</code></td><td>统计最后输入的字符个数</td></tr><tr><td><code>seekg</code></td><td>移动输入流指针</td></tr><tr><td><code>tellg</code></td><td>返回输入流中指定位置的指针值</td></tr></tbody></table><h3 id=\"istream类的get函数\"><a class=\"anchor\" href=\"#istream类的get函数\">#</a> <code>istream</code> 类的 <code>get</code> 函数</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>有3种形式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></pre><pre class=\"code\"><span class=\"token comment\">// 无参数，直接返回数据</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 参数是引用类型的变量，读取一个字符，不跳过空白字符</span><br>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span><span class=\"token operator\">&amp;</span> rch <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> delim <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 参数 1：char 类型的指针，读取多个字符，放到 pch 中</span><br><span class=\"token comment\">// 参数 2：读取字符数量上限</span><br><span class=\"token comment\">// 参数 3：读多个字符至 '\\n' 结束，不提取 '\\n'</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>利用无参数get函数读入数据</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"enter a sentence:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <br>\t<span class=\"token punctuation\">{</span><br>\t\tc<span class=\"token operator\">=</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可以用 cin.get (c) 替换</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">else</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>c<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>利用多个参数的get函数读入数据</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"enter a sentence:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// enter a sentence:</span><br>\t<span class=\"token comment\">// Xi'an Jiaotong University|Shanghai Jiaotong University</span><br><br>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>ch<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// Xi'an Jiaotong University</span><br><br>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 扔掉 |</span><br><br>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>ch<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// Shanghai Jiaotong University</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"istream类的getline函数\"><a class=\"anchor\" href=\"#istream类的getline函数\">#</a> <code>istream</code> 类的 <code>getline</code> 函数</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\">istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nCount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> delim <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">// 参数 1：读取多个字符，放到 pch 中</span><br><span class=\"token comment\">// 参数 2：读取字符数量上限</span><br><span class=\"token comment\">// 参数 3：读取字符至 delim 结束，终止字符被舍弃</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"enter a sentence:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// enter a sentence:</span><br>\t<span class=\"token comment\">// Xi'an Jiaotong University|Shanghai Jiaotong University</span><br><br>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读 69 个字符或遇 '|' 结束</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>ch<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// Xi'an Jiaotong University</span><br><br>\t<span class=\"token comment\">// 不需要 cin.ignore (1);</span><br>\t<br>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读 69 个字符或遇 '\\n' 结束</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>ch<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// Shanghai Jiaotong University</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"比较\"><a class=\"anchor\" href=\"#比较\">#</a> 比较</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>字符数组<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>字符个数n<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>终止字符<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><br>cin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>字符指针<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>字符个数n<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>终止字符<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><br></pre></div></figure><ul><li><p>相同之处：</p><ol><li>从输入流提取 <code>n-1</code> 个字符放入数组，因为最后一个位置要放字符数组的结束标准。</li><li>读取成功，则函数返回值是非 0 值。</li><li>若遇到文件结束符，则返回值为 0。</li></ol></li><li><p>不同之处：<br>当读到终止字符时，<br><code>cin.getline()</code> —— 将指针移到<strong>终止字符之后</strong>。<br><code>cin.get()</code> —— 将指针移到<strong>终止字符处</strong>。<br>则下次继续读取时的位置就不同。</p></li></ul><h2 id=\"标准输出流\"><a class=\"anchor\" href=\"#标准输出流\">#</a> 标准输出流</h2><p>流向标准输出设备（显示器）的数据。<br>一般使用 <code>cout</code> 流对象进行输出操作。<br>例如，用流插入运算符 <code>&lt;&lt;</code> 输出数据。</p><p><code>cout</code> 是 <code>ostream</code> 类的对象，除了 <code>&lt;&lt;</code> 符号外，常用函数如下</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><code>put</code></td><td>无格式插入一个字节</td></tr><tr><td><code>write</code></td><td>无格式插入一字节序列</td></tr><tr><td><code>flush</code></td><td>刷新输出流</td></tr><tr><td><code>seekp</code></td><td>移动输出流指针</td></tr><tr><td><code>tellp</code></td><td>返回输出流中指定位置的指针值</td></tr></tbody></table><h3 id=\"用流对象的成员函数控制输出格式\"><a class=\"anchor\" href=\"#用流对象的成员函数控制输出格式\">#</a> 用流对象的成员函数控制输出格式</h3><ol><li><p>设置状态标志流成员函数 <code>setf</code></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">cout<span class=\"token punctuation\">.</span><span class=\"token function\">unsetf</span><span class=\"token punctuation\">(</span>ios<span class=\"token operator\">::</span>状态标志<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li><li><p>清除状态标志流成员函数 <code>unsetf</code></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">cout<span class=\"token punctuation\">.</span><span class=\"token function\">unsetf</span><span class=\"token punctuation\">(</span>ios<span class=\"token operator\">::</span>状态标志<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li><li><p>设置域宽流成员函数 <code>width</code><br>设置显示数据占多少个字节宽</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">cout<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>只对下一次流输出有效，输出完成后该函数的作用就消失。</p></li><li><p>设置实数的精度流成员函数 <code>precision</code></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">cout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>参数 <code>n</code> 在十进制小数形式输出时，代表有效数字。<br>在以 <code>fixed</code> 形式和 <code>scientific</code> 形式输出时，代表小数位数。</p></li><li><p>填充字符流成员函数 <code>fill</code></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">cout<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>用 <code>ch</code> 去填充无输出内容的位置。</p></li></ol><blockquote><p>在 <code>cout.setf(ios::状态标志)</code> 和 <code>cout.unsetf(ios::状态标志)</code> 中常用的状态标志如下：</p></blockquote><table><thead><tr><th>状态标志</th><th>功能</th></tr></thead><tbody><tr><td><code>left</code></td><td>输出数据在本域宽范围内左对齐</td></tr><tr><td><code>right</code></td><td>输出数据在本域宽范围内右对齐</td></tr><tr><td><code>dec</code></td><td>设置整数的基数为 10</td></tr><tr><td><code>oct</code></td><td>设置整数的基数为 8</td></tr><tr><td><code>hex</code></td><td>设置整数的基数为 16</td></tr><tr><td><code>showpoint</code></td><td>浮点数输出时，强制显示小数点</td></tr><tr><td><code>uppercase</code></td><td>在以科学表示法格式 E 和以十六进制输出字母时用大写表示</td></tr><tr><td><code>scientific</code></td><td>用科学表示法格式显示浮点数</td></tr><tr><td><code>fixed</code></td><td>用定点格式（固定小数位数）显示浮点数</td></tr></tbody></table><blockquote><p>在引用这些值之前要加上 <code>ios::</code> ，如果有多项标志，中间则用 <code>|</code> 分隔。</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 设左对齐，以一般实数方式显示</span><br>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token operator\">::</span>left<span class=\"token operator\">|</span>ios<span class=\"token operator\">::</span>showpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 设置除小数点外有效数字为 5</span><br>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">123.456789</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 123.46</span><br><br>\t<span class=\"token comment\">// 设置显示区域宽 10</span><br>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 在显示区域空白处用 * 填充</span><br>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t<span class=\"token comment\">// 清除状态左对齐</span><br>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">unsetf</span><span class=\"token punctuation\">(</span>ios<span class=\"token operator\">::</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t<span class=\"token comment\">// 设置右对齐</span><br>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token operator\">::</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">123.456789</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// ****123.46</span><br><br>\t<span class=\"token comment\">// 设左对齐，以固定小数位数显示</span><br>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token operator\">::</span>left<span class=\"token operator\">|</span>ios<span class=\"token operator\">::</span>fixed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t<span class=\"token comment\">// 设置实数显示 3 位小数</span><br>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">999.123456</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">99.123456</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 999.123</span><br>\t<span class=\"token comment\">// 99.123</span><br><br>\t<span class=\"token comment\">// 清除状态左对齐和定点格式</span><br>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">unsetf</span><span class=\"token punctuation\">(</span>ios<span class=\"token operator\">::</span>left<span class=\"token operator\">|</span>ios<span class=\"token operator\">::</span>fixed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t<span class=\"token comment\">// 设置左对齐，以科学计数法显示</span><br>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token operator\">::</span>left<span class=\"token operator\">|</span>ios<span class=\"token operator\">::</span>scientific<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t<span class=\"token comment\">// 设置保留 3 位小数</span><br>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">123.45678</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 1.235e+002</span><br><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"用c流格式控制符控制输出格式\"><a class=\"anchor\" href=\"#用c流格式控制符控制输出格式\">#</a> 用 <code>C++</code> 流格式控制符控制输出格式</h3><p>多数 <code>C++</code> 流格式控制符与前面的成员函数有等价对应的关系，两者都可实现同样的功能。<br><code>C++</code> 流格式控制符一般与符号 <code>&lt;&lt;</code> 联用。</p><table><thead><tr><th>控制符</th><th>功能</th></tr></thead><tbody><tr><td><code>dec</code></td><td>设置后面的整数按 10 进制方式显示</td></tr><tr><td><code>hex</code></td><td>设置后面的整数按 16 进制方式显示</td></tr><tr><td><code>oct</code></td><td>设置后面的整数按 8 进制方式显示</td></tr><tr><td><code>endl</code></td><td>输出一个换行符并刷新输出流</td></tr><tr><td><code>setfill(c)</code></td><td>设置填充符 (默认为空格)</td></tr><tr><td><code>setprecision(n)</code></td><td>设置实数精度 n, 原理和成员函数 <code>precision</code> 一样</td></tr><tr><td><code>setw(n)</code></td><td>设置域宽 n</td></tr><tr><td><code>setiosflags(flags)</code></td><td>设置状态标志，多个用 <code>|</code> 分隔</td></tr><tr><td><code>resetiosflags(flags)</code></td><td>清除状态标志，多个用 <code>|</code> 分隔</td></tr></tbody></table><blockquote><p><code>setiosflags</code> 和 <code>resetiosflags</code> 的常用状态标志</p></blockquote><table><thead><tr><th>状态标志</th><th>功能</th></tr></thead><tbody><tr><td><code>ios::left</code></td><td>按域宽左对齐输出</td></tr><tr><td><code>ios::right</code></td><td>按域宽右对齐输出</td></tr><tr><td><code>ios::fixed</code></td><td>固定小数位数输出</td></tr><tr><td><code>ios::showpos</code></td><td>强制设置显示正号</td></tr><tr><td><code>ios::uppercase</code></td><td>科学记数法或 16 进制输出数据时字母大写</td></tr><tr><td><code>ios::lowercase</code></td><td>科学记数法或 16 进制输出数据时字母小写</td></tr></tbody></table><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 以 10 进制形式输出</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"dec:\"</span><span class=\"token operator\">&lt;&lt;</span>dec<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// dec:128</span><br>\t<span class=\"token comment\">// 以 16 进制形式输出</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hex:\"</span><span class=\"token operator\">&lt;&lt;</span>hex<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// hex:80</span><br>\t<span class=\"token comment\">// 以 8 进制形式输出</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"oct:\"</span><span class=\"token operator\">&lt;&lt;</span>oct<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// oct:200</span><br><br>\t<span class=\"token keyword\">char</span> pt<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"xi'an\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 域宽为 10，输出字符串</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>pt<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">//      xi'an\t</span><br>\t<span class=\"token comment\">// 指定域宽 10，输出字符串，空白处以 \"*\" 填充</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setfill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>pt<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// *****xi'an</span><br><br>\t<span class=\"token keyword\">double</span> B<span class=\"token operator\">=</span><span class=\"token number\">27.123456789</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 按指数形式输出，8 位小数</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios<span class=\"token operator\">::</span>scientific<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 输出 B 值</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"B=\"</span><span class=\"token operator\">&lt;&lt;</span>B<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <br>\t<span class=\"token comment\">// B=2.71234568e+001</span><br>\t<br>\t<span class=\"token comment\">//4 位小数</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"B=\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>B<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// B=2.7123e+001</span><br>\t<br>\t<span class=\"token comment\">// 清除格式设定</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">resetiosflags</span><span class=\"token punctuation\">(</span>ios<span class=\"token operator\">::</span>scientific<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t<span class=\"token comment\">// 改为小数形式输出，小数点后 6 位</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"B=\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios<span class=\"token operator\">::</span>fixed<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>B<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// B=27.123457</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"文件操作基础\"><a class=\"anchor\" href=\"#文件操作基础\">#</a> 文件操作基础</h2><p>文件流类是用于操作文件的标准 <code>C++</code> 类。</p><p><code>ifstream</code> 从文件读取数据<br><code>fstream</code> 可读取插入<br><code>ofstream</code> 向文件插入数据</p><p>这三个类包含在头文件 <code>&lt;fstream&gt;</code> 中</p><ul><li>文件操作的基本步骤<ol><li>定义一个文件流对象</li><li>打开文件</li><li>读 / 写文件</li><li>关闭文件</li></ol></li></ul><h3 id=\"文件分类\"><a class=\"anchor\" href=\"#文件分类\">#</a> 文件分类</h3><ul><li><p>文本文件：<br>是一种由若干行字符构成的计算机文件。其编码可以是 ASCII 码、UNICODE 码、GBK 编码等等。可以用文本编辑器编辑。</p></li><li><p>二进制文件：<br>除了上述以字符构成的文本文件，其他文件均称为二进制文件。典型的二进制文件有声音、动画、图像、视频等。</p></li></ul><blockquote><p>C++ 语言对这两种文件都可以进行创建、读写等操作。</p></blockquote><h3 id=\"定义一个文件流对象\"><a class=\"anchor\" href=\"#定义一个文件流对象\">#</a> 定义一个文件流对象</h3><p><code>ifstream</code> 对象只进行读操作<br><code>ofstream</code> 对象只进行写操作<br><code>fstream</code> 对象既可以读文件，也可以写文件</p><h3 id=\"打开文件\"><a class=\"anchor\" href=\"#打开文件\">#</a> 打开文件</h3><ol><li>文件流类的成员函数 <code>open</code> （打开文件）</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">void</span> <span class=\"token function\">open</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> filename<span class=\"token punctuation\">,</span> openmode mode<span class=\"token punctuation\">)</span><br></pre></div></figure><ul><li><code>filename</code> 是文件名（如 <code>e:\\c++\\file.txt</code> ），若缺少路径，则默认为当前目录。</li><li><code>mode</code> 指文件打开方式，内容如下：</li></ul><table><thead><tr><th>方式</th><th>功能</th></tr></thead><tbody><tr><td><code>ios::in</code></td><td>为输入（读）而打开文件</td></tr><tr><td><code>ios::out</code></td><td>为输出（写）而打开文件</td></tr><tr><td><code>ios::ate</code></td><td>打开文件，初始位置在文件尾部</td></tr><tr><td><code>ios::app</code></td><td>所有输出附加在文件末尾</td></tr><tr><td><code>ios::trunc</code></td><td>如果文件已存在则先删除该文件全部数据</td></tr><tr><td><code>ios::binary</code></td><td>二进制方式打开文件</td></tr></tbody></table><blockquote><p>每打开一个文件都有一个文件指针，<br>指针的开始位置由打开方式指定，<br>每次读写都从文件指针的当前位置开始。</p></blockquote><ol start=\"2\"><li>还可以用文件流类的构造函数来打开文件，其参数和默认值与 <code>open</code> 函数完全相同。</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></pre><pre class=\"code\"><span class=\"token comment\">// 在工程默认目录打开文件 grade.txt，只用于输入</span><br>ifstream file1<span class=\"token punctuation\">;</span><br>file1<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"grade.txt\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">//ifstream 就是用于输入的，故第二个参数 ios::in 可以省略</span><br><br><span class=\"token comment\">// 打开文本文件 c:\\msg.txt，只用于输出</span><br>ofstream file2<span class=\"token punctuation\">;</span><br>file2<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c:\\\\msg.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第二个参数 ios::out 省略</span><br><br><span class=\"token comment\">// 以二进制输入方式打开文件 c:\\abc.bmp</span><br>fstream file3<span class=\"token punctuation\">;</span><br>file3<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c:\\\\abc.bmp\"</span><span class=\"token punctuation\">,</span>ios<span class=\"token operator\">::</span>binary<span class=\"token operator\">|</span>ios<span class=\"token operator\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 二进制方式 | 只用于读入</span><br><br><span class=\"token comment\">// 用构造函数来打开二进制文件，用于输出</span><br>ofstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example.bin\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>out<span class=\"token operator\">|</span>ios<span class=\"token operator\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"关闭文件\"><a class=\"anchor\" href=\"#关闭文件\">#</a> 关闭文件</h3><ul><li><p>关闭文件操作包括：把缓冲区数据完整地写入文件，添加文件结束标志，切断流对象和外部文件的连接。</p></li><li><p>当一个流对象的生存期结束，系统也会自动关闭文件；</p></li><li><p>若流对象的生存期没有结束，用 <code>close()</code> 关闭文件后，该流对象可以重用。</p></li></ul><h3 id=\"文本文件的读写\"><a class=\"anchor\" href=\"#文本文件的读写\">#</a> 文本文件的读写</h3><p>下面以 <code>ifstream</code> 、 <code>ofstream</code> 为例说明。</p><p>由于 <code>ifstream</code> 、 <code>ofstream</code> 类继承自流类 <code>istream</code> 和 <code>ostream</code> ，因此也可以使用常见的 IO 操作。<br>比如 <code>&gt;&gt;</code> 、 <code>get</code> 、 <code>getline</code> 常用于文本文件输入，而操作 <code>&lt;&lt;</code> 、 <code>put</code> 常用于输出。</p><ul><li>用符号 <code>&lt;&lt;</code> 和 <code>put</code> 函数向文本文件写入一些文字</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span> </span><span class=\"token comment\">// 必须包含的头文件</span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 打开文件</span><br>\tofstream <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 如果 file.txt 文件存在，则打开，否则自动创建一个</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"打开文件失败！\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 写文件</span><br>\tout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Welcome to \"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Xi'an Jiaotong University.\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 put 函数的示例</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 真正编程时只要用一条语句 out&lt;&lt;ch 即可</span><br>\tout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭文件</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ul><li>用符号 <code>&gt;&gt;</code> 和 <code>get</code> 函数读取文本文件</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 打开文件</span><br>\tifstream <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>in<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"不可以打开文件\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 读文件</span><br>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\tin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取第一个单词 Welcome</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>ch<span class=\"token punctuation\">;</span><br>\tin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取第二个单词 to</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>ch<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 剩余部分用 get 函数读出并显示</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token comment\">// 之所以要有 if 判断，</span><br>\t\t\t<span class=\"token comment\">// 是为了不输出最后一次读取的非正文数据</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>c<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\tin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭文件</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ul><li>如何判断读到达文件尾部<br>当没有读到文件尾部时， <code>ifstream</code> 对象 <code>in</code> 相当于一个 <code>true</code> 值，甚至直到读取完所有有效数据后， <code>in</code> 仍然相当于 <code>true</code> 。这时再读取一次文件后， <code>in</code> 才变成了相当于 <code>false</code> 值的对象。</li></ul><h3 id=\"二进制文件的读写\"><a class=\"anchor\" href=\"#二进制文件的读写\">#</a> 二进制文件的读写</h3><p>要根据 <strong>文件的定义格式</strong> 对二进制文件进行读写</p><blockquote><p>比如 BMP 位图文件，是典型的二进制文件。<br>其文件头部是格式固定的信息，其中<br>前 2 字节用来记录文件为 BMP 格式，<br>接下来的 8 个字节用来记录文件长度，<br>再接下来的 4 字节用来记录 BMP 文件头的长度，等等。<br>因此，BMP 文件的读取方法是依次读取 2 字节、8 字节、4 字节的数据，再转化为字符或整数。</p></blockquote><ul><li><p>对二进制文件进行操作时，打开文件要指定方式 <code>ios::binary</code></p></li><li><p>从二进制文件输入数据，可调用 <code>istream</code> 流类提供的成员函数，</p></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><br></pre></div></figure><ul><li>向二进制文件输出数据可调用 <code>ostream</code> 流类提供的成员函数，</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">ostream<span class=\"token operator\">&amp;</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><br></pre></div></figure><blockquote><p>两个函数格式上差不多，<br>第一个参数是一个字符指针，用于指向输入输出数据所放的内存空间的地址。<br>第二个参数是一个整数，表示要输入输出的数据的字节数。</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>将学生信息存入二进制文件再读取出来</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fstream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token comment\">// 定义类</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 建立学生信息类，包含姓名、班级、性别、年龄四个私有属性。</span><br>\t\t<span class=\"token keyword\">char</span> Name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> Class<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> Sex<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> Age<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token comment\">// 构造函数</span><br>\t\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>\t\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Class<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>Name<span class=\"token punctuation\">,</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>Class<span class=\"token punctuation\">,</span>Class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tSex<span class=\"token operator\">=</span>sex<span class=\"token punctuation\">;</span><br>\t\t\tAge<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token comment\">// 输出自身信息</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Showme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>Name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\t'</span><span class=\"token operator\">&lt;&lt;</span>Class<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\t'</span><span class=\"token operator\">&lt;&lt;</span>Sex<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\t'</span><span class=\"token operator\">&lt;&lt;</span>Age<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 程序运行后，先创建文件并写入信息，而后从文件读出信息</span><br>\t<br>\tStudent stu<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王二小\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"电气11\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘大明\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"机械01\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李文化\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"生物12\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span><span class=\"token number\">39</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token comment\">// 打开文件</span><br>\tofstream <span class=\"token function\">file1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.dat\"</span><span class=\"token punctuation\">,</span>ios<span class=\"token operator\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"文件打开失败!\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 写文件</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tfile1<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>stu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tfile1<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭文件</span><br><br>\t<span class=\"token comment\">/////// 以下为读文件并显示出来 //////////</span><br>\tStudent stu2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 建立对象</span><br>\t<span class=\"token comment\">// 打开文件</span><br>\tifstream <span class=\"token function\">file2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.dat\"</span><span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"文件打开失败!\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 读文件</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tfile2<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>stu2<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>stu2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tstu2<span class=\"token punctuation\">.</span><span class=\"token function\">Showme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 关闭文件</span><br>\tfile2<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"二进制文件的顺序读写-随机读写\"><a class=\"anchor\" href=\"#二进制文件的顺序读写-随机读写\">#</a> 二进制文件的顺序读写、随机读写</h4><p><code>istream</code> 类和 <code>ostream</code> 类提供成员函数 ，控制读写位置指针的移动，实现文件的随机读写。</p><table><thead><tr><th style=\"text-align:right\"></th><th>文件内容</th></tr></thead><tbody><tr><td style=\"text-align:right\">文件刚打开时：读写位置指针 ➡️</td><td></td></tr><tr><td style=\"text-align:right\" rowspan=\"4\">读写数据后自动移动</td><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td style=\"text-align:right\">读写位置指针 ➡️</td><td></td></tr><tr><td style=\"text-align:right\"></td><td>...</td></tr><tr><td style=\"text-align:right\"></td><td></td></tr></tbody></table><ol><li><code>istream</code> 类操作流读指针的成员函数</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\">istream<span class=\"token operator\">&amp;</span> istream<span class=\"token operator\">::</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">long</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 读指针从流的起始位置向后移动由 pos 指定字节</span><br><br>istream<span class=\"token operator\">&amp;</span> istream<span class=\"token operator\">::</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">long</span> off<span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>seek_dir <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 读指针从流的 seek_dir 位置移动，off 指定字节</span><br></pre></div></figure><table><thead><tr><th><code>ios::seek_dir</code> 值</th><th>功能</th></tr></thead><tbody><tr><td><code>cur</code></td><td>当前读指针所在的当前位置</td></tr><tr><td><code>beg</code></td><td>文件流的开始位置 （文件头部）</td></tr><tr><td><code>end</code></td><td>文件流的结尾处</td></tr></tbody></table><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></pre><pre class=\"code\">istream input<span class=\"token punctuation\">;</span><br>input<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>cur <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 读指针以当前位置为基准，向前移动 10 个字节</span><br><br>input<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>beg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 读指针从流的开始位置，向后移动 10 个字节</span><br><br>input<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>end <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 读指针从流的结尾，向前移动 10 个字节</span><br></pre></div></figure><ol start=\"2\"><li><code>ostream</code> 类操作流写指针的成员函数</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></pre><pre class=\"code\">ostream<span class=\"token operator\">&amp;</span> ostream<span class=\"token operator\">::</span><span class=\"token function\">seekp</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">long</span> pos <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 写指针从流的起始位置向后移动由参数指定字节</span><br><br>ostream<span class=\"token operator\">&amp;</span> ostream<span class=\"token operator\">::</span><span class=\"token function\">seekp</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">long</span> off <span class=\"token punctuation\">,</span> ios<span class=\"token operator\">::</span>seek_dir <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 写指针从流的 seek_dir 位置移动由 off 指定字节</span><br><br>ostream<span class=\"token operator\">&amp;</span> ostream<span class=\"token operator\">::</span><span class=\"token function\">tellp</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 返回写指针当前所指位置值</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>从二进制文件中读取倒序读取信息。</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fstream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tStudent stu<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 建立对象</span><br>\t<span class=\"token comment\">// 打开文件</span><br>\tifstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.dat\"</span><span class=\"token punctuation\">,</span>ios<span class=\"token operator\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"文件打开失败!\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token comment\">// 定位文件指针到文件末尾</span><br>\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ios<span class=\"token operator\">::</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t<span class=\"token comment\">// 得到文件指针位置 (文件大小)</span><br>\t<span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">tellg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t<span class=\"token comment\">// 读文件</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>len<span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>stu<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tstu<span class=\"token punctuation\">.</span><span class=\"token function\">Showme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭文件</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>使用 <code>cin&gt;&gt;</code> ， <code>cin.get()</code> ， <code>cin.getline()</code> 读取字符串有什么区别？ <code>getline</code> 函数必须读取一行数据吗？</li></ol><blockquote><ol><li><code>cin&gt;&gt;</code> 不能获取含有空格的字符串；</li><li><code>cin.getline()</code> 可以获取含有空格的字符串，但是不能获取换行的字符串；</li><li><code>cin.get()</code> 以上两种的功能均可实现，并且可以获取换行的字符串；</li><li><code>cin.getline()</code> 的指针停止在中止字符之后，即把中止字符从输入流中拿掉；</li><li><code>cin.get()</code> 的指针停止在终止字符位置，即不会把中止字符从输入流中拿掉。<br><code>getline</code> 函数不是必须读取一行数据， <code>getline</code> 也可以读取单个字符</li></ol></blockquote><ol start=\"2\"><li>请总结读写文本文件的步骤。</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></pre><pre class=\"code\"><span class=\"token comment\">// 包含头文件</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fstream></span></span><br><span class=\"token comment\">// 创建对象</span><br>ifstream in<span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 打开文件</span><br>in<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 读或写</span><br>in<span class=\"token operator\">>></span>a<span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 关闭文件</span><br>in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><ol start=\"3\"><li><p>读取文本文件时，一定要知道文件的格式吗？</p></li><li><p>文本文件读写方法可以用于二进制文件读写吗？</p></li></ol><blockquote><p>不可以。二进制数据解释成文本，有些在 ASCII 表中不存在，有些是不可视的字符，会出现乱码。</p></blockquote><h1 id=\"随堂练习\"><a class=\"anchor\" href=\"#随堂练习\">#</a> 随堂练习</h1><ol><li class=\"quiz multi\"><p>下列说法错误的是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>进入输入流的数据是有序的数据集合。</li><li><code>cin</code> 是 <code>istream</code> 类的对象。</li><li class=\"correct\"><code>cin</code> 是输入流类。</li><li class=\"correct\"><code>cin</code> 是输入函数。</li></ul></li><li class=\"quiz\"><p>有一段程序如下：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">char</span>  str<span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span> str<span class=\"token punctuation\">,</span>  <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'*'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>利用上面代码从标准输入流获取一段文本，下列说法错误的是：</p><ul class=\"options\"><li>获取的文本放到 str 数组中</li><li class=\"correct\">遇到 <code>*</code> 时，停止读入文本，同时 <code>*</code> 被从流中取出丢掉</li><li>系统在 <code>str</code> 数组的最后一个字符后面自动添加 <code>\\0</code></li><li>空格字符可以正常读取</li></ul></li><li class=\"quiz\"><p>为了舍去流中的一些字符，应该使用的输入流的成员函数是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li class=\"correct\"><code>ignore</code></li><li><code>peek</code></li><li><code>get</code></li><li><code>seekg</code></li></ul></li><li class=\"quiz true\"><p>用语句 <code>cin.getline(ch,70,'*');</code> 从标准输入流获取一段字符，遇到 <code>*</code> 时，停止读入文本，同时 <code>*</code> 被从流中取出丢掉。</p></li><li class=\"quiz\"><p>设置输出格式时，利用 setf 成员函数不能设置的显示属性是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>输出数据在本域宽范围内左对齐</li><li>输出数据在本域宽范围内右对齐</li><li>设置整数的按 8 进制显示</li><li class=\"correct\">设置实数显示的小数点位数</li></ul></li><li class=\"quiz true\"><p>使用流操纵符（流格式控制符）控制输出格式，是将控制符号作为数据的一部分插入到输出流中。</p></li><li class=\"quiz\"><p>只用于读文件的流类是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li class=\"correct\"><code>ifstream</code></li><li><code>ofstream</code></li><li><code>iostream</code></li><li><code>fstream</code></li></ul></li><li class=\"quiz fill\"><p>不论 <code>ifstream</code> 或 <code>ofstream</code> 对象，打开文件都可以使用构造函数或 <span class=\"gap\">open</span> 函数，这两种方式所使用的函数的参数可以完全一致。</p></li><li class=\"quiz\"><p>假定 <code>in</code> 为 <code>ifstream</code> 类的对象，用 <code>in</code> 打开一个文件后，下面的代码用于读取文件内容：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br><span class=\"marked\">4</span><br><span class=\"marked\">5</span><br><span class=\"marked\">6</span><br>7<br></pre><pre class=\"code\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 读取文件内容</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"marked\">\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br><span class=\"marked\">\t\tcout<span class=\"token operator\">&lt;&lt;</span>c<span class=\"token punctuation\">;</span></span><br><span class=\"marked\">\t<span class=\"token punctuation\">}</span></span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><p>请问上面程序段划线的语句中使用 <code>if</code> 判别语句的原因是：</p><ul class=\"options\"><li>确保循环能终止</li><li>是输入流操作中的语法要求</li><li class=\"correct\">确保不重复输出最后读取的数据</li><li><code>if</code> 判别是多余的，可以不用</li></ul></li><li class=\"quiz true\"><p>在标准输入流中常使用符号 <code>&gt;&gt;</code> 、 <code>get</code> 函数、 <code>getline</code> 函数输入数据，这些方式也可用于从文件流向应用程序输入数据，且使用方式不变。</p></li><li class=\"quiz true\"><p>在标准输出流中常使用符号 <code>&lt;&lt;</code> 、 <code>put</code> 函数向屏幕输出数据，这些方式也可用于向文件流写入数据，且使用方式不变。</p></li><li class=\"quiz\"><p>不论何种方式打开一个二进制文件，在文件打开方式（即第二个参数）中必须有 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li><code>ios::in</code></li><li><code>ios::out</code></li><li class=\"correct\"><code>ios::binary</code></li><li><code>ios::app</code></li></ul></li><li class=\"quiz nulti\"><p>二进制文件使用的读写成员函数是<span class=\"gap\"></span> 。</p><ul class=\"options\"><li>get</li><li>put</li><li class=\"correct\">read</li><li class=\"correct\">write</li></ul></li></ol>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-12/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-12/",
            "title": "第12周 统一接口 不同实现：多态性",
            "date_published": "2020-05-07T04:23:54.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"多态性\"><a class=\"anchor\" href=\"#多态性\">#</a> 多态性</h2><h3 id=\"含义\"><a class=\"anchor\" href=\"#含义\">#</a> 含义</h3><p>多态指相同语法结构，代表多种功能或操作<br>多态实现了 “一种接口，多种方法”<br>将运算符重载，将函数重载，实现不同功能</p><h3 id=\"两种形式\"><a class=\"anchor\" href=\"#两种形式\">#</a> 两种形式</h3><ol><li><p>编译时多态性<br>编译器对源程序进行编译时，就可以确定所调用的是哪一个函数<br>编译时多态性通过<strong>重载</strong>来实现<br>- 函数重载<br>- 运算符重载</p></li><li><p>运行时多态性<br>在程序运行过程中，根据具体情况来确定调用的是哪一个函数<br>运行时多态通过<strong>虚函数</strong> <code>virtual</code> 来实现</p></li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>编译时多态</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">//max_ 是重载函数</span><br><span class=\"token keyword\">char</span> <span class=\"token function\">max_</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> y <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">></span>y<span class=\"token operator\">?</span>x<span class=\"token operator\">:</span>y<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">max_</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">></span>y<span class=\"token operator\">?</span>x<span class=\"token operator\">:</span>y<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">float</span> <span class=\"token function\">max_</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">></span>y<span class=\"token operator\">?</span>x<span class=\"token operator\">:</span>y<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">float</span> a<span class=\"token operator\">=</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">2.718</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"d与s：\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">max_</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"大\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"28与168：\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">max_</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">168</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"大\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"3.14与2.718：\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">max_</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"大\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>运行时多态</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br><span class=\"marked\">6</span><br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">pet</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br><span class=\"marked\">\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"zzz\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">cat</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> pet<br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"miao!miao!\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">dog</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> pet<br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"wang!wang!\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tpet pet1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>pet1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 为宠物类指针</span><br>\tcat cat1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义猫类对象</span><br>\tdog dog1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义狗类对象</span><br>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根据用户输入将猫或狗对象地址赋给 p 指针，</span><br>\tcin<span class=\"token operator\">>></span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 石头扔的远近，只有扔了才知道效果</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>cat1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 例如用户输入 1，则执行猫对象地址赋给 p</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dog1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 例如用户输入 2，则执行猫对象地址赋给 p</span><br>\tp<span class=\"token operator\">-></span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 究竟运行哪个函数，只有运行时才知道</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"派生类对象替换基类对象\"><a class=\"anchor\" href=\"#派生类对象替换基类对象\">#</a> 派生类对象替换基类对象</h2><h3 id=\"一个替换原则\"><a class=\"anchor\" href=\"#一个替换原则\">#</a> 一个替换原则</h3><p>凡是基类对象出现的场合都可以用公有派生类对象取代</p><h3 id=\"三个替换形式\"><a class=\"anchor\" href=\"#三个替换形式\">#</a> 三个替换形式</h3><ol><li>派生类对象给基类对象赋值 <code>派生类对象=基类对象</code></li><li>派生类对象可以初始化基类对象的引用 <code>&amp;基类对象=派生类对象</code></li><li>可以令基类对象的指针指向派生类对象，即，将派生类对象的地址传递给基类指针 <code>基类名 *基类对象的指针=&amp;派生类对象</code></li></ol><h2 id=\"虚函数\"><a class=\"anchor\" href=\"#虚函数\">#</a> 虚函数</h2><h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3><p>在函数定义的头部加上 <code>virtual</code> ，该函数就是虚函数。<br>事实上，在某基类中声明为 <code>virtual</code> ，并在一个或多个派生类中被重新定义的同名成员函数，称为虚函数。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token keyword\">virtual</span> <span class=\"token operator\">&lt;</span>函数返回类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>参数表<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>函数体<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"用途\"><a class=\"anchor\" href=\"#用途\">#</a> 用途</h3><p>实现运行时的多态性，即通过指向派生类的基类指针，访问派生类中同名覆盖成员函数。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子：手机类</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br><span class=\"marked\">6</span><br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">mobile</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br><span class=\"marked\">\t\t<span class=\"token keyword\">char</span> mynumber<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 机主的电话号码</span></span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 显示制式</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"The phone is mobile\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">mobilegsm</span><span class=\"token operator\">:</span><span class=\"token keyword\">public</span> mobile<br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 显示制式</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"The phone is mobilegsm\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">mobilecdma</span><span class=\"token operator\">:</span><span class=\"token keyword\">public</span> mobile<br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 显示制式</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"The phone is mobilecdma\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tmobile m<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 基类对象指针 p1，基类对象 m</span><br>\tmobilegsm gsm<span class=\"token punctuation\">;</span><br>\tmobilecdma cdma<span class=\"token punctuation\">;</span><br><br>\tm<span class=\"token operator\">=</span>gsm<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用 gsm 类对象给 mobile 类对象赋值</span><br>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// The phone is mobile</span><br><br>\tm<span class=\"token operator\">=</span>cdma<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用 cdma 类对象给 mobile 类对象赋值</span><br>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// The phone is mobile</span><br><br>\tp1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>gsm<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用 gsm 类对象地址给 mobile 类对象赋值</span><br>\tp1<span class=\"token operator\">-></span><span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// The phone is mobilegsm</span><br><br>\tp1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>cdma<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用 cdma 类对象地址给 mobile 类对象赋值</span><br>\tp1<span class=\"token operator\">-></span><span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// The phone is mobilecdma</span><br><br>\tmobile <span class=\"token operator\">&amp;</span>p4<span class=\"token operator\">=</span>gsm<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以 gsm 类对象初始化 mobile 类引用</span><br>\tp4<span class=\"token punctuation\">.</span><span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// The phone is mobilegsm</span><br><br>\tmobile <span class=\"token operator\">&amp;</span>p5<span class=\"token operator\">=</span>cdma<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以 cdma 类对象初始化 mobile 类引用</span><br>\tp5<span class=\"token punctuation\">.</span><span class=\"token function\">showinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">//The phone is mobilecdma</span><br><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子：宠物类</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span> <span class=\"token comment\">// 基类</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"How does a pet speak ?\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Pet <span class=\"token comment\">// 派生类</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"miao!miao!\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Pet <span class=\"token comment\">// 派生类</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span> <br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"wang!wang!\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tPet <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p2<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p3<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 基类对象指针 p1, 基类对象 obj</span><br>\tDog dog1<span class=\"token punctuation\">;</span><br>\tCat cat1<span class=\"token punctuation\">;</span><br><br>\tobj <span class=\"token operator\">=</span> dog1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用 Dog 类对象给 Pet 类对象赋值</span><br>\tobj<span class=\"token punctuation\">.</span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行基类的 Speak () 函数</span><br>\t<span class=\"token comment\">// How does a pet speak ?</span><br><br>\tp1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>cat1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用 Cat 类对象地址给基类指针赋值</span><br>\tp1<span class=\"token operator\">-></span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// miao!miao!</span><br><br>\tp1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dog1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用 Dog 类对象地址给基类指针赋值</span><br>\tp1<span class=\"token operator\">-></span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// wang!wang!</span><br><br>\tp2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> Cat<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动态生成 Cat 类对象</span><br>\tp2<span class=\"token operator\">-></span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// miao!miao!</span><br><br>\tp3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> Dog<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动态生成 Dog 类对象</span><br>\tp3<span class=\"token operator\">-></span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// wang!wang!</span><br><br>\tPet <span class=\"token operator\">&amp;</span>p4 <span class=\"token operator\">=</span> cat1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以 Cat 类对象初始化 Pet 类引用</span><br>\tp4<span class=\"token punctuation\">.</span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// miao!miao!</span><br>\t<br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"使用限制\"><a class=\"anchor\" href=\"#使用限制\">#</a> 使用限制</h3><ol><li><p>应通过<strong>指针</strong>或<strong>引用</strong>调用虚函数，而<strong>不要</strong>以对象名调用虚函数</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></pre><pre class=\"code\">Pet obj<span class=\"token punctuation\">;</span><br>Dog dog1<span class=\"token punctuation\">;</span><br><br>obj <span class=\"token operator\">=</span> dog1<span class=\"token punctuation\">;</span><br>obj<span class=\"token punctuation\">.</span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行的是基类 Speak () 函数</span><br><br>Pet <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dog1<span class=\"token punctuation\">;</span><br>p1<span class=\"token operator\">-></span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li><li><p>在派生类中重定义的基类虚函数仍为虚函数，同时可以省略 <code>virtual</code> 关键字</p></li><li><p><strong>不能</strong>定义虚构造函数，<strong>可以</strong>定义虚析构函数</p></li></ol><h3 id=\"虚析构函数\"><a class=\"anchor\" href=\"#虚析构函数\">#</a> 虚析构函数</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token comment\">// 基类</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"base class\\n\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"x=\"</span><span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"destructor base class\\n\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Base <span class=\"token comment\">// 派生类</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcin<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Derived class\\n\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tBase<span class=\"token operator\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"y=\"</span><span class=\"token operator\">&lt;&lt;</span>y<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token operator\">~</span><span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"destructor derived class\\n\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tBase <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><br>\tp<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> Derived<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>p<span class=\"token operator\">-></span>x<span class=\"token punctuation\">;</span><br>\tp<span class=\"token operator\">-></span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用的是派生类的 f</span><br>\tp<span class=\"token operator\">-></span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用的是派生类的 show</span><br>\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放动态申请空间</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p>通过基类指针释放派生类对象空间，执行的是基类析构函数！！！</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>改造</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token comment\">// 基类</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"base class\\n\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"x=\"</span><span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 虚析构函数</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"destructor base class\\n\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><blockquote><p>定义为虚析构函数，通过基类指针可以释放派生类对象的空间。</p></blockquote><h3 id=\"声明位置\"><a class=\"anchor\" href=\"#声明位置\">#</a> 声明位置</h3><p>必须在类内声明，不能在类外函数定义时声明。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>错误的声明方法</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"base class\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"destructor base class\\n\"</span><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> Base<span class=\"token operator\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"x=\"</span><span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>正确的声明方法</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"base class\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"destructor base class\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">void</span> Base<span class=\"token operator\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"x=\"</span><span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"抽象类\"><a class=\"anchor\" href=\"#抽象类\">#</a> 抽象类</h2><h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3><p>类是对象的集合，类是从相似对象中抽取共性，而得到的抽象数据类型。<br>将不用来声明对象（实例化）的类称为<strong>抽象类</strong>，只供继承。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>纯虚函数的定义</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">virtual</span> <span class=\"token operator\">&lt;</span>返回类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>参数表<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br></pre></div></figure><p>抽象类又可以定义成：至少包含一个纯虚函数的类。</p><h3 id=\"使用要求\"><a class=\"anchor\" href=\"#使用要求\">#</a> 使用要求</h3><ul><li>抽象类不能实例化，即不声明对象</li><li>抽象类只作为基类被继承</li><li>可以定义抽象类的<strong>指针</strong>或<strong>引用</strong></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cmath></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><br><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PI 3.1415926</span><br><br><span class=\"token comment\">// 平面上的几何图形可以抽象定义为类，如矩形类、圆类、三角形类等</span><br><span class=\"token comment\">// 将所有几何图形再加以抽象，定义为形状类</span><br><br><span class=\"token comment\">// 基类定义为抽象类</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token comment\">// 由于几何图形类中都包含求面积函数和求周长函数</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明为纯虚函数</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">circumference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明为纯虚函数</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 派生出矩形类</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token operator\">:</span><span class=\"token keyword\">public</span> Shape <br><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span>hight<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token comment\">// 构造函数</span><br>\t\t<span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span><br>\t\t\twidth<span class=\"token operator\">=</span>w<span class=\"token punctuation\">;</span><br>\t\t\thight<span class=\"token operator\">=</span>h<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token comment\">// 具体定义相应的求面积与周长的函数</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> width<span class=\"token operator\">*</span>hight<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">circumference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2.0</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">+</span>hight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 派生出圆类</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span><span class=\"token operator\">:</span><span class=\"token keyword\">public</span> Shape<br><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token comment\">// 构造函数</span><br>\t\t<span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <br>\t\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>r<span class=\"token operator\">=</span>r<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token comment\">// 具体定义相应的求面积与周长的函数</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> PI<span class=\"token operator\">*</span>r<span class=\"token operator\">*</span>r<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">circumference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2.0</span><span class=\"token operator\">*</span>PI<span class=\"token operator\">*</span>r<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 测试主函数</span><br><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tRectangle <span class=\"token function\">r1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tCircle <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token comment\">// 通过抽象类的对象指针或引用，访问派生类对象，实现动态绑定</span><br>\tShape <span class=\"token operator\">*</span>p1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>r1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p2<span class=\"token operator\">=</span>c1<span class=\"token punctuation\">;</span><br><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"长方形面积：\"</span><span class=\"token operator\">&lt;&lt;</span>p1<span class=\"token operator\">-></span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"长方形周长：\"</span><span class=\"token operator\">&lt;&lt;</span>p1<span class=\"token operator\">-></span><span class=\"token function\">circumference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"圆面积：\"</span><span class=\"token operator\">&lt;&lt;</span>p2<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"圆周长：\"</span><span class=\"token operator\">&lt;&lt;</span>p2<span class=\"token punctuation\">.</span><span class=\"token function\">circumference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p>改造：将派生类的点坐标移入基类定义<br>意义：所有派生类图形的中心坐标点<br>由于点坐标是私有成员，需要增加下列函数<br>构造函数 <code>Shape()</code><br>输出点坐标函数 <code>print()</code><br>得到点坐标值函数 <code>getx()</code> ， <code>gety()</code></p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> xx<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> yy<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">getx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">gety</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'['</span><span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">','</span><span class=\"token operator\">&lt;&lt;</span>y<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">']'</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">circumference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h2 id=\"运算符重载\"><a class=\"anchor\" href=\"#运算符重载\">#</a> 运算符重载</h2><p>指赋予运算符新的操作功能，主要用于对类的对象的操作。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>定义形式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span>操作符<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>参数表<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>函数体<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>虚数类</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">double</span> real<span class=\"token punctuation\">,</span> imag<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">real</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>\t\t<br>\t\t<span class=\"token keyword\">double</span> <span class=\"token function\">Real</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> real<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">double</span> <span class=\"token function\">Imag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> imag<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><br>\t\tComplex <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>Complex<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tComplex <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>Complex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token operator\">~</span><span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><br><span class=\"token comment\">// 重载运算符 +，两边是虚数对象</span><br>Complex Complex<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>Complex <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span> <br><span class=\"token punctuation\">{</span><br>\tComplex temp<span class=\"token punctuation\">;</span><br>\ttemp<span class=\"token punctuation\">.</span>real <span class=\"token operator\">=</span> real <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">;</span><br>\ttemp<span class=\"token punctuation\">.</span>imag <span class=\"token operator\">=</span> imag <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 重载运算符 +，左边是虚数对象，右边是双精度数</span><br>Complex Complex<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span> <br><span class=\"token punctuation\">{</span><br>\tComplex temp<span class=\"token punctuation\">;</span><br>\ttemp<span class=\"token punctuation\">.</span>real <span class=\"token operator\">=</span> real <span class=\"token operator\">+</span> d<span class=\"token punctuation\">;</span><br>\ttemp<span class=\"token punctuation\">.</span>imag <span class=\"token operator\">=</span> imag<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 重载运算符 ==</span><br><span class=\"token keyword\">bool</span> Complex<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>Complex c<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>real <span class=\"token operator\">==</span> c<span class=\"token punctuation\">.</span>real <span class=\"token operator\">&amp;&amp;</span> imag <span class=\"token operator\">==</span> c<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 测试复数相加和判相等运算符重载</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tComplex <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">;</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"C1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">Real</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"+j\"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">Imag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"C2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">Real</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"+j\"</span> <span class=\"token operator\">&lt;&lt;</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">Imag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br><br>\tc3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">;</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"C3 = \"</span> <span class=\"token operator\">&lt;&lt;</span> c3<span class=\"token punctuation\">.</span><span class=\"token function\">Real</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"+j\"</span> <span class=\"token operator\">&lt;&lt;</span> c3<span class=\"token punctuation\">.</span><span class=\"token function\">Imag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br><br>\tc3 <span class=\"token operator\">=</span> c3 <span class=\"token operator\">+</span> <span class=\"token number\">6.5</span><span class=\"token punctuation\">;</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"C3 + 6.5 = \"</span> <span class=\"token operator\">&lt;&lt;</span> c3<span class=\"token punctuation\">.</span><span class=\"token function\">Real</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"+j\"</span> <span class=\"token operator\">&lt;&lt;</span> c3<span class=\"token punctuation\">.</span><span class=\"token function\">Imag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> c1<span class=\"token operator\">==</span>c2 <span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"两个复数相等\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"两个复数不相等\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"单目运算符重载\"><a class=\"anchor\" href=\"#单目运算符重载\">#</a> 单目运算符重载</h3><p>运算符 <code>++</code> 分前置运算符 <code>++Y</code> 和后置运算符 <code>Y++</code></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>前置运算符定义</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\">Complex Complex<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\treal<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>后置运算符定义</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\">Complex Complex<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\treal<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>请总结虚函数实现的功能？</li></ol><blockquote><p>实现运行时的多态性，即通过指向派生类的基类指针，访问派生类中同名覆盖成员函数。</p></blockquote><ol start=\"2\"><li>什么是运算符的重载？ 请查找资料，研究提取运算符 <code>&gt;&gt;</code> 和插入运算符 <code>&lt;&lt;</code> 的重载。</li></ol><blockquote><p>C<ins> 的流插入运算符 <code>&lt;&lt;</code> 和流提取运算符 <code>&gt;&gt;</code> 是 C</ins> 编译系统在类库中提供的，所有 C++ 编译系统都在其类库中提供输入流类 <code>istream</code> 和输出流类 <code>ostream</code> ， <code>cin</code> 和 <code>cout</code> 分别是 <code>istream</code> 和 <code>ostream</code> 类的对象。<br>对 <code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> 重载的函数形式如下：</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span>自定义类<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> 自定义类<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><blockquote><p>重载 <code>&gt;&gt;</code> 的函数的第一个参数和函数的类型都必须是 <code>istream&amp;</code> 类型，也就是 <code>istream</code> 类对象的引用，第二个参数是要进行输入操作的类。<br>重载 <code>&lt;&lt;</code> 的函数的第一个参数和函数的类型都必须是 <code>ostream&amp;</code> 类型，也就是 <code>ostream</code> 类对象的引用，第二个参数是要进行输出操作的类。</p></blockquote><h1 id=\"随堂练习\"><a class=\"anchor\" href=\"#随堂练习\">#</a> 随堂练习</h1><ol><li class=\"quiz true\"><p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</p></li><li class=\"quiz multi\"><p>有基类 <code>SHAPE</code> ，派生类 <code>CIRCLE</code> ，声明如下变量：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">SHAPE shape1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span><br>CIRCLE circle1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q1<span class=\"token punctuation\">;</span><br></pre></div></figure><p>下列哪些项是 “派生类对象替换基类对象”。</p><ul class=\"options\"><li class=\"correct\"><code>p1=&amp;circle1;</code></li><li><code>q1=&amp;shape1;</code></li><li class=\"correct\"><code>shape1=circle1;</code></li><li><code>circle1=shape1;</code></li></ul><blockquote><ul class=\"options\"><li>√ 令基类对象的指针指向派生类对象</li><li>× 派生类指针指向基类的引用</li><li>√ 派生类对象给基类对象赋值</li><li>× 基类对象给派生类对象赋值</li></ul></blockquote></li><li class=\"quiz\"><p>下列叙述正确的是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>虚函数只能定义成无参函数</li><li>虚函数不能有返回值</li><li>能定义虚构造函数</li><li class=\"correct\">A、B、C 都不对</li></ul></li><li class=\"quiz\"><p>关于虚函数的描述中，正确的是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>虚函数是一个静态成员函数</li><li>虚函数是一个非成员函数</li><li>说明虚函数的 <code>virtual</code> ，即可以出现在类内函数说明时，也可以出现在类外函数定义时。</li><li class=\"correct\">派生类的虚函数与基类中对应的虚函数具有相同的参数个数和类型</li></ul></li><li class=\"quiz\"><p>以下 <span class=\"gap\"></span> 成员函数表示纯虚函数。</p><ul class=\"options\"><li><code>virtual int vf(int);</code></li><li class=\"correct\"><code>void vf(int)=0;</code></li><li><code>virtual void vf()=0;</code></li><li><code>virtual void vf(int) {};</code></li></ul></li><li class=\"quiz\"><p>下列描述中， <span class=\"gap\"></span> 是抽象类的特征。</p><ul class=\"options\"><li>说明有虚函数</li><li class=\"correct\">说明有纯虚函数</li><li>有其他类的对象作数据成员</li><li>有指针作数据成员</li></ul></li><li class=\"quiz\"><p>设有复数类 <code>COMPLEX</code> ，在复数类中重载乘法运算符。下列哪项是运算符重载的正确的声明格式？</p><ul class=\"options\"><li><code>COMPLEX *(COMPLEX c1, COMPLEX c2);</code></li><li><code>COMPLEX * (COMPLEX c2);</code></li><li><code>COMPLEX operator * (COMPLEX c1, COMPLEX c2);</code></li><li class=\"correct\"><code>COMPLEX operator * (COMPLEX c2);</code></li></ul></li></ol>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-11/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-11/",
            "title": "第11周 取其精华 发挥优势：继承",
            "date_published": "2020-05-05T08:35:41.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><p>采用继承式的抽象方法描述万物，减少代码重复。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">person</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 人名</span><br>\t\t<span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 性别</span><br>\t\t<span class=\"token keyword\">char</span> pid<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 身份证号码</span><br>\t\t<span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 体重</span><br>\t\t<span class=\"token keyword\">int</span> high<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 身高</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无参构造函数</span><br>\t\t<span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有参构造函数</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">change_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 修改数据</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">walking</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以 v 速度行走 k 步</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">hearing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将字符串小写变大写，大写变小写输出</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">speek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 说出整数 num 的英文句子</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">writing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在屏幕上画出汉字 “曲”</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出人的属性值</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 翻译小于 1000 的整数</span><br>\t\t<span class=\"token operator\">~</span><span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 析构函数</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 模拟行走：以 v 档速度水平行走 k 步</span><br><span class=\"token keyword\">void</span> person<span class=\"token operator\">::</span><span class=\"token function\">walking</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token operator\">&lt;&lt;</span>name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"水平直线行走\"</span><span class=\"token operator\">&lt;&lt;</span>k<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"步\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"o_o\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token operator\">/</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\b\\b\\b\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 模拟收听：将句子字母大变小，小变大</span><br><span class=\"token keyword\">void</span> person<span class=\"token operator\">::</span><span class=\"token function\">hearing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sentence<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token operator\">&lt;&lt;</span>sentence<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span>sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pp<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">>=</span><span class=\"token string\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;=</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token string\">'A'</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">-</span><span class=\"token string\">'a'</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">>=</span><span class=\"token string\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;=</span><span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">-</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>pp<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">delete</span> pp<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 模拟说话：说出整数的英文句子</span><br><span class=\"token keyword\">void</span> person<span class=\"token operator\">::</span><span class=\"token function\">speek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span><span class=\"token number\">1999999999</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"dev C++平台无法处理大于1999999999位的数！\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// 三位三位取出，存入 abcd 中</span><br>\t\t<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span>n<span class=\"token operator\">/</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000000</span><br>\t\t<span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span>n<span class=\"token operator\">%</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">out</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"billion \"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">out</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"million \"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">out</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"thousand \"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token comment\">// 据英文语法规则，最后两位前一定有 and</span><br>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>b<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>c<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token punctuation\">{</span><br>\t\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"and \"</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token function\">out</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 创建对象</span><br>\tperson <span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"James Chen\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"610103198901062493\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tJack<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出人的属性值</span><br>\tJack<span class=\"token punctuation\">.</span><span class=\"token function\">walking</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 行走 20 步，1/4 秒走一步</span><br>\tJack<span class=\"token punctuation\">.</span><span class=\"token function\">hearing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi! You are simple!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 听英文句子</span><br>\tJack<span class=\"token punctuation\">.</span><span class=\"token function\">speek</span><span class=\"token punctuation\">(</span><span class=\"token number\">1006</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 说出整数 1006 的英文句子</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">//Jack.writing (); // 书写汉字 “曲”</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h2><h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3><p>从一个或多个以前定义的类 (基类) 产生新类的过程称为派生，这个新产生的类又称为派生类。</p><p>类的继承（inheritance）是指新类从基类那里得到基类的特征，也就是继承基类的数据和函数。</p><p>派生的新类同时也可以增加或重新定义数据和函数，这就产生了类的层次性</p><p>派生和继承的概念也来自于人们认识客观世界的过程</p><h3 id=\"好处\"><a class=\"anchor\" href=\"#好处\">#</a> 好处</h3><ul><li><p>软件复用是软件设计中常用的手段</p></li><li><p>在程序设计中反复使用高质量的软件来缩短开发时间，提高效率（数量和质量）</p></li><li><p>客观世界中许多实体之间是有继承特性的<br>点→圆→圆柱体<br>人→学生→大学生<br>水果→桃→水蜜桃→陕西水蜜桃</p></li></ul><h2 id=\"派生类\"><a class=\"anchor\" href=\"#派生类\">#</a> 派生类</h2><p>采用已存在的类去定义建立新类<br>新类称为派生类（子类）<br>已存在的类称为基类（父类）<br>派生类与基类具有相对性</p><h3 id=\"定义方法\"><a class=\"anchor\" href=\"#定义方法\">#</a> 定义方法</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>派生类名<span class=\"token operator\">></span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>访问权限<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>基类名<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>访问权限<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>基类名n<span class=\"token operator\">></span> <br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token operator\">&lt;</span>新增私有数据成员和成员函数<span class=\"token operator\">></span><br>\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token operator\">&lt;</span>新增保护数据成员和成员函效<span class=\"token operator\">></span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token operator\">&lt;</span>新增公有数据成员和成员函效<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><ul><li><p>派生出新类时，可以做如下几种变化：</p><ol><li>可以增加新的数据成员</li><li>可以增加新的函数成员</li><li>可以重新定义已有的函数成员</li><li>可以改变现有成员的数据值</li></ol></li><li><p>派生类的作用：</p><ol><li>从基类接受成员</li><li>派生类对基类的扩充</li><li>派生类对基类成员的改造</li><li>系统的默认值就是私有继承</li></ol></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>歌星类</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">sing_star</span><span class=\"token operator\">:</span><span class=\"token keyword\">public</span> person<br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">float</span> salary<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 薪水</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">sing_star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无参构造函数</span><br>\t\t<span class=\"token function\">sing_star</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有参构造函数</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">change_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改数据</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">playing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 演唱歌曲</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出歌星属性值</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 模拟唱歌：播放 mp3 歌曲</span><br><span class=\"token keyword\">void</span> sing_star<span class=\"token operator\">::</span><span class=\"token function\">playing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"play \"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//play 后有空格</span><br>\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>str<span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">mciSendString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 在 Dec-C++ 环境中还要进行设置：工具 \\ 编译器选项 \\ 编译器 \\ 在连接器命令，\t加入以下命令 \\-lwinmm</span><br>\t<span class=\"token comment\">//mciSendStringA (str,NULL,0,NULL); //Windows API VC2008 调\t用此函数</span><br>\t<span class=\"token comment\">//mciSendString (str,NULL,0,NULL); //Windows API VC6.0 调用此函数</span><br>\t<span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入任何字符结束播放</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"内嵌对象\"><a class=\"anchor\" href=\"#内嵌对象\">#</a> 内嵌对象</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>日期类的定义</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> year<br>\t\t<span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tyear <span class=\"token operator\">=</span> <span class=\"token number\">1900</span><span class=\"token punctuation\">;</span><br>\t\t\tmonth <span class=\"token operator\">=</span> day <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> yy<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mm<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> dd<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">init</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">,</span>mm<span class=\"token punctuation\">,</span>dd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print_mdy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>时间类的定义</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Time</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> miniter<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> second<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\thour <span class=\"token operator\">=</span> miniter <span class=\"token operator\">=</span> second <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token function\">Time</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">init</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\"><span class=\"marked\">1</span><br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br></pre><pre class=\"code\"><span class=\"marked\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">person</span><span class=\"token operator\">:</span><span class=\"token keyword\">public</span> Date<span class=\"token punctuation\">,</span><span class=\"token keyword\">public</span> Time</span><br><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// 注意包含了基类的出身日期和出身时间</span><br>\t\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> pid<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> hight<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> hr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">change_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> hr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">walking</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">hearing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">speek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">writing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 构造函数定义</span><br>person<span class=\"token operator\">::</span><span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tname<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XXXXXX\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"XXXXXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span><span class=\"token string\">\"XXXXXXXXXXXXXXXXXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tsex<span class=\"token operator\">=</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">;</span><br>\tweight<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\thigh<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\tyear<span class=\"token operator\">=</span><span class=\"token number\">1900</span><span class=\"token punctuation\">;</span><br>\tmonth<span class=\"token operator\">=</span>day<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\thour<span class=\"token operator\">=</span>miniter<span class=\"token operator\">=</span>second<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br>person<span class=\"token operator\">::</span><span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> hh<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> hr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sd<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">change_data</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>hh<span class=\"token punctuation\">,</span>hr<span class=\"token punctuation\">,</span>mr<span class=\"token punctuation\">,</span>sd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 修改数据函数定义</span><br><span class=\"token keyword\">void</span> person<span class=\"token operator\">::</span><span class=\"token function\">change_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> hh<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> hr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sd<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tname<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tsex<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span><br>\tweight<span class=\"token operator\">=</span>w<span class=\"token punctuation\">;</span><br>\thigh<span class=\"token operator\">=</span>hh<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">char</span> temp<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过身份证号码产生出身日期</span><br>\t<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span>p<span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tyear<span class=\"token operator\">=</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span>p<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\ttemp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span><br>\tmonth<span class=\"token operator\">=</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span>p<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\ttemp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span><br>\tday<span class=\"token operator\">=</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\thour<span class=\"token operator\">=</span>hr<span class=\"token punctuation\">;</span><br>\tminiter<span class=\"token operator\">=</span>mr<span class=\"token punctuation\">;</span><br>\tsecond<span class=\"token operator\">=</span>sd<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 主函数定义</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 创建对象</span><br>\tperson <span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"James Chen\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"610103198901062493\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tJack<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出人的属性值</span><br>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tJack<span class=\"token punctuation\">.</span><span class=\"token function\">walking</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 行走 10 步，1/4 秒走一步</span><br>\tJack<span class=\"token punctuation\">.</span><span class=\"token function\">hearing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You are simple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 听英文句子</span><br>\tJack<span class=\"token punctuation\">.</span><span class=\"token function\">speek</span><span class=\"token punctuation\">(</span><span class=\"token number\">1006</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 说出整数 num 的英文句子</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">//Jack.writing (); // 书写汉字 “曲”</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"三种继承方式\"><a class=\"anchor\" href=\"#三种继承方式\">#</a> 三种继承方式</h3><h4 id=\"public公有继承方式\"><a class=\"anchor\" href=\"#public公有继承方式\">#</a> <code>public</code> 公有继承方式</h4><p>派生类对基类各种成员访问权限如下：</p><ul><li>基类公有成员相当于派生类的公有成员，即派生类<strong>可以</strong>像访问自身公有成员一样访问从基类继承的公有成员</li><li>基类保护成员相当于派生类的保护成员，即派生类<strong>可以</strong>像访问自身的保护成员一样，访问基类的保护成员</li><li>派生类内部成员<strong>无法</strong>直接访问基类的私有成员</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>公有继承举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br><span class=\"marked\">26</span><br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 人员类定义</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">char</span> Name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 姓名</span><br>\t\t<span class=\"token keyword\">int</span> Age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 年龄</span><br>\t\t<span class=\"token keyword\">char</span> Sex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 性别</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置数据成员</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span><br>\t\t\tSex<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sex<span class=\"token operator\">==</span><span class=\"token string\">'m'</span><span class=\"token operator\">?</span> <span class=\"token string\">'m'</span><span class=\"token operator\">:</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出数据成员</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>Name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span>Sex<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span>Age<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 雇员类定义</span><br><span class=\"marked\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Person </span><br><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">char</span> Dept<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 工作部门</span><br>\t\t<span class=\"token keyword\">float</span> Salary<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 月薪</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">EmployeeRegister</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XXX\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"XXX\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">EmployeeRegister</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dept<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">ShowEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示雇员信息</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">void</span> Employee<span class=\"token operator\">::</span><span class=\"token function\">EmployeeRegister</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dept<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> salary<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 如果改成直接操作基类数据成员？</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Dept<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tSalary <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">void</span> Employee<span class=\"token operator\">::</span><span class=\"token function\">ShowEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>Name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span>Sex<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span>Age<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 如果将基类 protected 改为 private?</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>Dept<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span>Salary<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 主函数</span><br><span class=\"token punctuation\">{</span><br>\tEmployee emp<span class=\"token punctuation\">;</span><br>\temp<span class=\"token punctuation\">.</span><span class=\"token function\">EmployeeRegister</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张弓长\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"图书馆\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\temp<span class=\"token punctuation\">.</span><span class=\"token function\">ShowEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 张弓长  f       40      图书馆  2000</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\temp<span class=\"token punctuation\">.</span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 张弓长  f       40</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"private私有继承方式\"><a class=\"anchor\" href=\"#private私有继承方式\">#</a> <code>private</code> 私有继承方式</h4><p>派生类对基类各种成员访问权限如下：</p><ul><li>基类公有成员和保护成员都相当于派生类的私有成员，派生类<strong>只能通过自身的函数成员</strong>访问他们</li><li>对于基类的私有成员，无论派生类内部成员或派生类使用者都无法直接访问。</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>将上述例子改为私有继承</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></pre><pre class=\"code\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><br><span class=\"token comment\">// 雇员类定义</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token operator\">:</span> <span class=\"token keyword\">private</span> Person <br><br><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 主函数</span><br><span class=\"token punctuation\">{</span><br>\tEmployee emp<span class=\"token punctuation\">;</span><br>\temp<span class=\"token punctuation\">.</span><span class=\"token function\">EmployeeRegister</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张弓长\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"图书馆\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\temp<span class=\"token punctuation\">.</span><span class=\"token function\">ShowEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// emp.ShowMe();</span><br>\t<span class=\"token comment\">// 本句违反继承规则</span><br>\t<span class=\"token comment\">// Showme () 是派生类的私有成员，只能成员函数访问，对象不能访问</span><br>\t<span class=\"token comment\">// 报错： 'Person' is not an accessible base of 'Employee'</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"protected保护继承方式\"><a class=\"anchor\" href=\"#protected保护继承方式\">#</a> <code>protected</code> 保护继承方式</h4><p>派生类对基类各种成员访问权限如下 ：</p><ul><li>基类的公有成员和保护成员都相当于派生类的保护成员，派生类可以通过自身的成员函数或其子类的成员函数访问他们</li><li>对于基类的私有成员，无论派生类内部成员或派生类使用者都无法直接访问</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>派生类学生类保护继承定义</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">protected</span> Person<br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> Number<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> ClassName<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>classname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ClassName<span class=\"token punctuation\">,</span> classname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tNumber <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，引用基类的保护成员</span><br>\t\t\tAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，引用基类的保护成员</span><br>\t\t\tSex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sex <span class=\"token operator\">==</span> <span class=\"token string\">'m'</span><span class=\"token operator\">?</span><span class=\"token string\">'m'</span><span class=\"token operator\">:</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，引用基类的保护成员</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">ShowStu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> Number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\t'</span> <span class=\"token operator\">&lt;&lt;</span> ClassName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tStudent stu<span class=\"token punctuation\">;</span><br>\tstu<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"计算机51\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">85071011</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张弓长\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tstu<span class=\"token punctuation\">.</span><span class=\"token function\">ShowStu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// stu.ShowMe();</span><br>\t<span class=\"token comment\">// 错误，对象不能访问保护成员</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h4><table><thead><tr><th>派生方式</th><th>基类中的访问限定</th><th>在派生类中对基类成员的访问限定</th><th>外部函数 如 <code>main()</code></th></tr></thead><tbody><tr><td rowspan=\"3\">公有继承</td><td>public</td><td>public</td><td>可以直接访问</td></tr><tr><td>protected</td><td>protected</td><td>不可以直接访问</td></tr><tr><td>private</td><td>不可以直接访问</td><td>不可以直接访问</td></tr><tr><td rowspan=\"3\">私有继承</td><td>public</td><td>private</td><td>不可以直接访问</td></tr><tr><td>protected</td><td>private</td><td>不可以直接访问</td></tr><tr><td>private</td><td>不可以直接访问</td><td>不可以直接访问</td></tr><tr><td rowspan=\"3\">保护继承</td><td>public</td><td>protected</td><td>不可以直接访问</td></tr><tr><td>protected</td><td>protected</td><td>不可以直接访问</td></tr><tr><td>private</td><td>不可以直接访问</td><td>不可以直接访问</td></tr></tbody></table><h3 id=\"派生类构造和析构函数\"><a class=\"anchor\" href=\"#派生类构造和析构函数\">#</a> 派生类构造和析构函数</h3><p>基类的构造函数与析构函数不能被继承</p><p>派生类构造函数的一般形式为：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>派生类名<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token operator\">&lt;</span>派生类名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>参数总表<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>基类名<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>参数表<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>基类名n<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>参数表n<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>内嵌对象名<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>对象参数表<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>内嵌对象名m<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>对象参数表m<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>派生类新增加成员的初始化<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"执行顺序\"><a class=\"anchor\" href=\"#执行顺序\">#</a> 执行顺序</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><br><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">char</span> Name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 姓名</span><br>\t\t<span class=\"token keyword\">int</span> Age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 年龄</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"constructor of person\"</span><span class=\"token operator\">&lt;&lt;</span>Name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"deconstrutor of person\"</span><span class=\"token operator\">&lt;&lt;</span>Name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Person<br><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">char</span> Dept<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\tPerson Leader<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内嵌对象</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dept<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age1<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Leader</span><span class=\"token punctuation\">(</span>name1<span class=\"token punctuation\">,</span>age1<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Dept<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"constructor of Employee\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token operator\">~</span><span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"deconstrucor of Employee\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tEmployee <span class=\"token function\">emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张弓长\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"人事处\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李木子\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">//constructor of person 张弓长</span><br><span class=\"token comment\">//constructor of person 李木子</span><br><span class=\"token comment\">// constructor of Employee</span><br><span class=\"token comment\">// deconstrucor of Employee</span><br><span class=\"token comment\">//deconstrutor of person 李木子</span><br><span class=\"token comment\">//deconstrutor of person 张弓长</span><br></pre></div></figure><ul><li><p>构造函数的执行顺序<br>首先，调用基类构造函数，调用顺序按照它们被继承时声明的基类名顺序执行。<br>其次，调用内嵌对象构造函数，调用次序按各个对象在派生类内声明的顺序。<br>最后，执行派生类构造函数体中的内容。</p></li><li><p>析构函数的执行顺序<br>派生类析构函数执行过程恰与构造函数执行过程相反。<br>首先，执行派生类析构函数。<br>然后，执行内嵌对象的析构函数。<br>最后，执行基类析构函数。</p></li></ul><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>对于 person 来说，Date 类和 Time 类作为基类合适，还是其对象作为 person 内嵌对象（即作为 person 的数据成员）合适？请说说理由。</li></ol><blockquote><p>其对象作为 person 内嵌对象（即作为 person 的数据成员）合适。<br>理由：<br>一个合理的派生，应该是：一个派生类对象 一定是 一个基类对象，而 Date 类和 Time 类和 person 类无直接关系，所以作为 person 内嵌对象比较合适。</p></blockquote><ol start=\"2\"><li>构造函数可以继承吗？如果能，怎样初始化对象；如果不能，说说理由。</li></ol><blockquote><p>不能，构造函数是用来初始化类的对象，与父类的其他成员不同，他不能被子类继承（子类可以继承父类所有的成员变量和成员方法，但是不继承父类的构造方法）。在创建子类对象时，为了初始化从父类继承来的数据成员，系统需要调用其父类的构造方法。</p></blockquote><ol start=\"3\"><li>基类中的保护成员和私有成员被派生类公有继承后，在访问属性上有什么区别？(类内的访问限制和类外的访问限制)</li></ol><blockquote><p>基类中的保护成员被派生类公有继承后，在派生类内相当于保护成员，可以在派生类内直接访问、在类外不能直接访问；<br>基类中的私有成员被派生类公有继承后，在派生类内不能直接访问，在类外也不能被直接访问。</p></blockquote><h1 id=\"随堂练习\"><a class=\"anchor\" href=\"#随堂练习\">#</a> 随堂练习</h1><ol><li class=\"quiz false\"><p>视频中 <code>person</code> 类的析构函数体里的 <code>delete</code> 语句可以省略。</p></li><li class=\"quiz\"><p>下列叙述正确的是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>基类是一类特殊定义的类</li><li>派生类只能从一个基类继承</li><li>派生类中必须定义构造函数</li><li class=\"correct\">派生类的成员函数可以和基类的成员函数同名</li></ul></li><li class=\"quiz false\"><p>在派生类的类体中，只能定义新增的数据成员和新增的函数成员。</p></li><li class=\"quiz\"><p>可以在类外用 <code>a.x</code> 的形式访问派生类对象 <code>a</code> 的基类成员 <code>x</code> ，其中 <code>x</code> 是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>私有继承的公用成员</li><li>公用继承的私有成员</li><li>公用继承的保护成员</li><li class=\"correct\">公用继承的公用成员</li></ul></li><li class=\"quiz true\"><p>在派生类的定义中，无论采用三种继承方式任何一种，都无法直接访问基类中的私有成员。</p></li></ol>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-10/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-10/",
            "title": "第10周 数据的抽象与封装：类与对象2",
            "date_published": "2020-05-02T07:21:11.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h2><p>在声明一个对象后，紧接着要给对象初始化，<strong>对象初始化</strong>实质上就是对所有数据成员赋值。</p><p>如果对象中某个数据成员未赋值，则该数据成员的值不确定，那么该对象的值不完整。</p><p>构造函数 <code>Constructor</code> 用于创建一个对象，提供了初始化该对象的一种简便手段。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语法格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>参数表<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>函数体<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><p>注意：</p><ul><li>构造函数的函数名<strong>必须</strong>与类名<strong>相同</strong></li><li>构造函数<ins>没有返回值</ins></li><li>其功能是将对象中的所有数据成员进行初始化，一般由一系列赋值语句构成</li><li>由系统在声明对象时自动调用</li></ul><h3 id=\"有无构造函数的区别\"><a class=\"anchor\" href=\"#有无构造函数的区别\">#</a> 有无构造函数的区别</h3><p>在前面章节中的程序声明变量</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <br><span class=\"token keyword\">int</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> today<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2013</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">today</span><span class=\"token punctuation\">(</span><span class=\"token number\">2013</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>以上为变量声明的同时赋初值，即都允许初始化。</p><ul><li>对于无构造函数的类，声明变量（对象）不允许初始化</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">CLOCK alarm<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span><br>CLOCK <span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span><br></pre></div></figure><ul><li>有构造函数就允许初始化</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">Date <span class=\"token function\">birthday</span><span class=\"token punctuation\">(</span><span class=\"token number\">1998</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span><br>Date birthday<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1998</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span><br></pre></div></figure><h2 id=\"重载构造函数\"><a class=\"anchor\" href=\"#重载构造函数\">#</a> 重载构造函数</h2><ul><li>一个类中允许定义多个构造函数</li><li>在声明对象时自动选择执行某个构造函数</li></ul><p>数据成员初始化的四种方法：</p><ol><li>在构造函数的函数体中进行初始化</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br></pre><pre class=\"code\"><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>Date <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tyear<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span><br>\tmonth<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">;</span><br>\tday<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ol start=\"2\"><li>在构造函数的头部初始化</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token operator\">&lt;</span>构造函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>参数表<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>变量<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>初值<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>…<span class=\"token operator\">&lt;</span>变量n<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>初值n<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\">Date<span class=\"token operator\">::</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span><span class=\"token number\">1900</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">month</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">day</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ol start=\"3\"><li>混合初始化：前两种方式结合</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\">Date<span class=\"token operator\">::</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">month</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tday<span class=\"token operator\">=</span>d<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ol start=\"4\"><li>使用默认参数初始化</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br></pre><pre class=\"code\"><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> yy<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mm <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dd <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tyear <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tmonth <span class=\"token operator\">=</span> mm<span class=\"token punctuation\">;</span><br>\tday <span class=\"token operator\">=</span> dd<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"例子日期类中4个重载构造函数\"><a class=\"anchor\" href=\"#例子日期类中4个重载构造函数\">#</a> 例子：日期类中 4 个重载构造函数</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token comment\">// 无参构造函数</span><br>\t\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span><span class=\"token number\">1900</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">month</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">day</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>\t\t<span class=\"token comment\">// 默认参数构造函数</span><br>\t\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> yy<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mm <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> dd <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 日期对象参数构造函数</span><br>\t\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>Date <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">month</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">day</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 字符串日期构造函数</span><br>\t\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 默认参数构造函数的定义</span><br>Date<span class=\"token operator\">::</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> yy<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mm<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> dd<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span><span class=\"token number\">1900</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">month</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">day</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yy<span class=\"token operator\">>=</span><span class=\"token number\">1900</span><span class=\"token operator\">&amp;&amp;</span>yy<span class=\"token operator\">&lt;=</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tyear <span class=\"token operator\">=</span> yy<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mm<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>mm<span class=\"token operator\">&lt;=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tmonth <span class=\"token operator\">=</span> mm<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tyear<span class=\"token operator\">=</span><span class=\"token number\">1900</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dd<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>dd<span class=\"token operator\">&lt;=</span><span class=\"token number\">31</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tday <span class=\"token operator\">=</span> dd<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tyear<span class=\"token operator\">=</span><span class=\"token number\">1900</span><span class=\"token punctuation\">;</span><br>\t\tmonth<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 重载构造函数的定义</span><br>Date<span class=\"token operator\">::</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span><span class=\"token number\">1900</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">month</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">day</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> py<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pm<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pd<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>py<span class=\"token punctuation\">,</span>ps<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tps<span class=\"token operator\">=</span>ps<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>pm<span class=\"token punctuation\">,</span>ps<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tps<span class=\"token operator\">=</span>ps<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">,</span>ps<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> yy<span class=\"token operator\">=</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>py<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>mm<span class=\"token operator\">=</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>pm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dd<span class=\"token operator\">=</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yy<span class=\"token operator\">>=</span><span class=\"token number\">1900</span><span class=\"token operator\">&amp;&amp;</span>yy<span class=\"token operator\">&lt;=</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tyear <span class=\"token operator\">=</span> yy<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mm<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>mm<span class=\"token operator\">&lt;=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tmonth <span class=\"token operator\">=</span> mm<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tyear<span class=\"token operator\">=</span><span class=\"token number\">1900</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dd<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>dd<span class=\"token operator\">&lt;=</span><span class=\"token number\">31</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tday <span class=\"token operator\">=</span> dd<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tyear<span class=\"token operator\">=</span><span class=\"token number\">1900</span><span class=\"token punctuation\">;</span><br>\t\tmonth<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 测试</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tDate date1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用无参构造函数</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"date1:\"</span><span class=\"token punctuation\">;</span><br>\tdate1<span class=\"token punctuation\">.</span><span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\tDate <span class=\"token function\">date2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2006</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用哪个构造函数？</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"date2:\"</span><span class=\"token punctuation\">;</span><br>\tdate2<span class=\"token punctuation\">.</span><span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\tDate <span class=\"token function\">date3</span><span class=\"token punctuation\">(</span><span class=\"token number\">2006</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用哪个构造函数？</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"date3:\"</span><span class=\"token punctuation\">;</span><br>\tdate3<span class=\"token punctuation\">.</span><span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\tDate <span class=\"token function\">date4</span><span class=\"token punctuation\">(</span><span class=\"token number\">2006</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用哪个构造函数？</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"date4:\"</span><span class=\"token punctuation\">;</span><br>\tdate4<span class=\"token punctuation\">.</span><span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\tDate <span class=\"token function\">date5</span><span class=\"token punctuation\">(</span><span class=\"token number\">2006</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用哪个构造函数？</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"date5:\"</span><span class=\"token punctuation\">;</span><br>\tdate5<span class=\"token punctuation\">.</span><span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\tDate <span class=\"token function\">date6</span><span class=\"token punctuation\">(</span>date4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用哪个构造函数？</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"date6:\"</span><span class=\"token punctuation\">;</span><br>\tdate6<span class=\"token punctuation\">.</span><span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\tDate <span class=\"token function\">date7</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2008-08-08\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用哪个构造函数？</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"date7:\"</span><span class=\"token punctuation\">;</span><br>\tdate7<span class=\"token punctuation\">.</span><span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"析构函数\"><a class=\"anchor\" href=\"#析构函数\">#</a> 析构函数</h2><ul><li>构造函数 <code>Constructor</code> ：在对象创建时执行，提供了初始化对象的一种简便手段。</li><li>析构函数 <code>Destructor</code> ：在对象被撤销时 (前) 执行，用于完成对象被撤销前的一些清理工作。</li></ul><blockquote><p>具体地说，析构函数往往用于释放 “资源”，如在构造函数中动态申请的内存空间。<br>也可以被用来执行 “用户希望在最后一次使用对象之后所执行的任何操作”，例如输出有关信息等。</p></blockquote><h3 id=\"对象的存储空间\"><a class=\"anchor\" href=\"#对象的存储空间\">#</a> 对象的存储空间</h3><p>若一个类声明了五个对象，存储空间如何分配？</p><blockquote><p>每个对象中的数据成员分配了存储空间。<br>所有对象中的函数成员共用一个存储空间，在代码区存放。</p></blockquote><h3 id=\"定义方法\"><a class=\"anchor\" href=\"#定义方法\">#</a> 定义方法</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>函数体<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><p>注意：</p><ul><li>函数名是类名前面加 <code>~</code> 符号</li><li>析构函数不得返回任何值</li><li>析构函数不得带有任何参数</li><li>其主要功能是在撤销对象之前进行一些善后处理工作</li><li>由系统自动调用</li></ul><p>例子：日期类中增加析构函数</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token comment\">// 无参构造函数</span><br>\t\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span><span class=\"token number\">1900</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">month</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">day</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>\t\t<span class=\"token comment\">// 默认参数构造函数</span><br>\t\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> yy<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mm <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> dd <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 日期对象参数构造函数</span><br>\t\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>Date <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">month</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">day</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 字符串日期构造函数</span><br>\t\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token operator\">~</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 析构函数定义</span><br>\t\t<span class=\"token comment\">// 由于析构函数是空函数 (函数体中没有一条语句)，没有感觉到析构函数被自动运行</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"实际意义的析构函数\"><a class=\"anchor\" href=\"#实际意义的析构函数\">#</a> 实际意义的析构函数</h3><pre><code>机器人的特征\n\t姓名\n\t型号\n\t整数：待翻译的整数\n\t翻译的英文句子字符串：字符指针，句子有长有短\n\t……\n机器人的功能\n\t翻译整数函数：形成英文字符串，并将字符串指针返回\n\t构造函数\n\t设置函数\n\t输出英文句子函数\n\t析构函数</code></pre><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>机器人类</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">robot</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token comment\">// 机器人姓名</span><br>\t\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 机器人型号</span><br>\t\t<span class=\"token keyword\">char</span> type<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token comment\">// 构造函数</span><br>\t\t<span class=\"token function\">robot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"XXXXXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span><span class=\"token string\">\"XXXXXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token comment\">// 设置修改数据</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>charn<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>chart<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token comment\">// 英文中每三位数读法相同，所以定义 out 函数翻译小于 1000 的整数</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span>inta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 将 1 至 1999999999 的整数翻译成英文句子</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">tran_int</span><span class=\"token punctuation\">(</span>intn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 析构函数</span><br>\t\t<span class=\"token operator\">~</span><span class=\"token function\">robot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 定义两个全局字符指针数组，存取所需的单词</span><br><span class=\"token comment\">//num1 中为 1 到 19，空出了 0，所以可以直接用 num1 [n] 调用，得到 n 对应单词</span><br><span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>num1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"one \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"two \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"three \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"four \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"five \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"six \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"seven \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"eight \"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"nine \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ten \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"eleven \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"twelve \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"thirteen \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fourteen \"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"fifteen \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sixteen \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"seventeen \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"eighteen \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"nineteen \"</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">//num10 中为 20-90，空出了 0 和 1，所以可以直接用 num10 [n/10] 调用，得到 n 对应单词</span><br><span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>num10<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"twenty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"thirty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"forty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fifty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sixty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"seventy \"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"eighty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ninety \"</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 小于 1000 整数翻译函数</span><br><span class=\"token keyword\">void</span> robot<span class=\"token operator\">::</span><span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span>a<span class=\"token operator\">%</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 若百位不为零，输出百位数加 hundred，</span><br>\t<span class=\"token comment\">// 若此时十位个位均为 0，不加 and</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>num1<span class=\"token punctuation\">[</span>a<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hundred \"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"and \"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 当后两位在 20 以内时，直接调用 num1 [n]，输出</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">&lt;</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>num1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 当后两位大于 20 时</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// 先调用 num10，输出十位数</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>num10<span class=\"token punctuation\">[</span>b<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 个位不为 0 时应输出 \"-\" 个位数</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\b-\"</span><span class=\"token operator\">&lt;&lt;</span>num1<span class=\"token punctuation\">[</span>b<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 整数翻译函数</span><br><span class=\"token keyword\">void</span> robot<span class=\"token operator\">::</span><span class=\"token function\">tran_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span><span class=\"token number\">1999999999</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"dev C++平台无法处理大于1999999999位的数！\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// 三位三位取出，存入 abcd 中</span><br>\t\t<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span>n<span class=\"token operator\">/</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">,</span><br>\t\t\tb<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">,</span><br>\t\t\tc<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><br>\t\t\td<span class=\"token operator\">=</span>n<span class=\"token operator\">%</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">/// 当 abcd 不等于 0 时，输出并加上 billion, million 或 thousand</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">out</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"billion \"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">out</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"million \"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">out</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"thousand \"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token comment\">// 据英文语法规则，最后两位前一定有 and</span><br>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>b<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>c<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"and \"</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token function\">out</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入n：\"</span><span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>n<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\trobot brown<span class=\"token punctuation\">;</span><br>\tbrown<span class=\"token punctuation\">.</span><span class=\"token function\">tran_int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>改良机器人类</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">robot</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token comment\">// 机器人姓名</span><br>\t\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 机器人型号</span><br>\t\t<span class=\"token keyword\">char</span> type<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 待翻译的整数</span><br>\t\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span> <br>\t\t<span class=\"token comment\">// 指向英文字符串</span><br>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">;</span> <br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token comment\">// 构造函数</span><br>\t\t<span class=\"token function\">robot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"XXXXXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span><span class=\"token string\">\"XXXXXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tnum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t\tps<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span><span class=\"token string\">\"zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><br>\t\t<span class=\"token comment\">// 设置修改数据</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>charn<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>chart<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><br>\t\t<span class=\"token comment\">// 英文中每三位数读法相同，所以定义 out 函数翻译小于 1000 的整数</span><br>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token comment\">// 将 1 至 1999999999 的整数翻译成英文句子</span><br>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">tran_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token comment\">// 输出整数及其英文句子</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token comment\">// 析构函数</span><br>\t\t<span class=\"token operator\">~</span><span class=\"token function\">robot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token comment\">// 释放构造函数和 set 函数中动态申请的空间</span><br>\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ps<span class=\"token punctuation\">;</span><span class=\"token comment\">// [] 表示 ps 指向的字符数组，整个数组都要被释放</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 定义两个全局字符指针数组，存取所需的单词</span><br><span class=\"token comment\">//num1 中为 1 到 19，空出了 0，所以可以直接用 num1 [n] 调用，得到 n 对应单词</span><br><span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>num1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"one \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"two \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"three \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"four \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"five \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"six \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"seven \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"eight \"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"nine \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ten \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"eleven \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"twelve \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"thirteen \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fourteen \"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"fifteen \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sixteen \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"seventeen \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"eighteen \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"nineteen \"</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">//num10 中为 20-90，空出了 0 和 1，所以可以直接用 num10 [n/10] 调用，得到 n 对应单词</span><br><span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>num10<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"twenty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"thirty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"forty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fifty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sixty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"seventy \"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"eighty \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ninety \"</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 类外定义小于 1000 整数翻译函数</span><br><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>robot<span class=\"token operator\">::</span><span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 定义字符数组 k，长度设为 1000，用空字符串初始化，用来存储英文字符串</span><br>\t<span class=\"token keyword\">char</span> k<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <br>\t<span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span>a<span class=\"token operator\">%</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 若百位不为零，输出百位数加 hundred，</span><br>\t<span class=\"token comment\">// 若此时十位个位均为 0，不加 and</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// 不直接输出字符串，而是加入字符数组 k 中</span><br>\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">[</span>a<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span><span class=\"token string\">\"hundred \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span><span class=\"token string\">\"and \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 当后两位在 20 以内时，直接调用 num1 [n]，输出</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">&lt;</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 当后两位大于 20 时</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// 先调用 num10，输出十位数</span><br>\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>num10<span class=\"token punctuation\">[</span>b<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 个位不为 0 时应输出 \"-\" 个位数</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\b-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">[</span>b<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token comment\">// 动态申请一个存储空间</span><br>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 大小则根据 k 中实际字符串的长度 + 1</span><br>\t<span class=\"token comment\">// 调用完毕需要释放该空间</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 类外定义整数翻译函数</span><br><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>robot<span class=\"token operator\">::</span><span class=\"token function\">tran_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义字符指针 p</span><br>\t<span class=\"token keyword\">char</span> kk<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义字符数组 kk，用来存放被翻译出的英文字符串，初始化成空字符串</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span><span class=\"token number\">1999999999</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>kk<span class=\"token punctuation\">,</span><span class=\"token string\">\"dev C++平台无法处理太大的数！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// 三位三位取出，存入 abcd 中</span><br>\t\t<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span>n<span class=\"token operator\">/</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">,</span><br>\t\t\tb<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">,</span><br>\t\t\tc<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><br>\t\t\td<span class=\"token operator\">=</span>n<span class=\"token operator\">%</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">/// 当 abcd 不等于 0 时，输出并加上 billion, million 或 thousand</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tp<span class=\"token operator\">=</span><span class=\"token function\">out</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>kk<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>kk<span class=\"token punctuation\">,</span><span class=\"token string\">\"billion \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放在 out 函数中动态申请的空间</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tp<span class=\"token operator\">=</span><span class=\"token function\">out</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>kk<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>kk<span class=\"token punctuation\">,</span><span class=\"token string\">\"million \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放在 out 函数中动态申请的空间</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tp<span class=\"token operator\">=</span><span class=\"token function\">out</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>kk<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>kk<span class=\"token punctuation\">,</span><span class=\"token string\">\"thousand \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放在 out 函数中动态申请的空间</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token comment\">// 据英文语法规则，最后两位前一定有 and</span><br>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>b<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>c<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>kk<span class=\"token punctuation\">,</span><span class=\"token string\">\"and \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\tp<span class=\"token operator\">=</span><span class=\"token function\">out</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>kk<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放在 out 函数中动态申请的空间</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tp<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>kk<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span>kk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 类外定义设置函数</span><br><span class=\"token keyword\">void</span> robot<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置修改数据</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// 待翻译的整数没有变</span><br>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tnum<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ps<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除已有的英文句子</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tp<span class=\"token operator\">=</span><span class=\"token function\">tran_int</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tps<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span>tp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放在 trans_int 中动态申请的空间</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tps<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span><span class=\"token string\">\"zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tps<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> <span class=\"token string\">\"负数不能翻译\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\trobot brown<span class=\"token punctuation\">;</span><br>\tbrown<span class=\"token punctuation\">.</span><span class=\"token function\">print_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入n：\"</span><span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span><br>\tbrown<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"brown\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"800#\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tbrown<span class=\"token punctuation\">.</span><span class=\"token function\">print_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ul><li>存储空间的实际分配<br>当运行 <code>int n;</code> 与 <code>robot brown;</code> 后，<br>存储空间分配如下：</li></ul><pre class=\"mermaid graph\"><svg id=\"mermaid-1595956446014\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width:592.5px\" viewBox=\"0 0 592.5 155\"><g><g class=\"output\"><g class=\"clusters\"><g class=\"cluster\" id=\"空间1\" transform=\"translate(296.25,77.5)\" style=\"opacity:1\"><rect width=\"576.5\" height=\"139\" x=\"-288.25\" y=\"-69.5\"></rect><g class=\"label\" transform=\"translate(0, -55.5)\" id=\"mermaid-1595956446014Text\"><g transform=\"translate(-20.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">空间1</tspan></text></g></g></g><g class=\"cluster\" id=\"变量n\" transform=\"translate(77.375,77.5)\" style=\"opacity:1\"><rect width=\"98.75\" height=\"89\" x=\"-49.375\" y=\"-44.5\"></rect><g class=\"label\" transform=\"translate(0, -30.5)\" id=\"mermaid-1595956446014Text\"><g transform=\"translate(-20.375,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">变量n</tspan></text></g></g></g><g class=\"cluster\" id=\"对象brown\" transform=\"translate(355.625,77.5)\" style=\"opacity:1\"><rect width=\"417.75\" height=\"89\" x=\"-208.875\" y=\"-44.5\"></rect><g class=\"label\" transform=\"translate(0, -30.5)\" id=\"mermaid-1595956446014Text\"><g transform=\"translate(-38.1875,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">对象brown</tspan></text></g></g></g></g><g class=\"edgePaths\"></g><g class=\"edgeLabels\"></g><g class=\"nodes\"><g class=\"node default\" style=\"opacity:1\" id=\"name\" transform=\"translate(211.46875,77.5)\"><rect rx=\"0\" ry=\"0\" x=\"-29.71875\" y=\"-19.5\" width=\"59.4375\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-19.71875,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">name</tspan></text></g></g></g><g class=\"node default\" style=\"opacity:1\" id=\"type\" transform=\"translate(317.265625,77.5)\"><rect rx=\"0\" ry=\"0\" x=\"-26.078125\" y=\"-19.5\" width=\"52.15625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16.078125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">type</tspan></text></g></g></g><g class=\"node default\" style=\"opacity:1\" id=\"num\" transform=\"translate(418.7265625,77.5)\"><rect rx=\"0\" ry=\"0\" x=\"-25.3828125\" y=\"-19.5\" width=\"50.765625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-15.3828125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">num</tspan></text></g></g></g><g class=\"node default\" style=\"opacity:1\" id=\"ps\" transform=\"translate(511.8046875,77.5)\"><rect rx=\"0\" ry=\"0\" x=\"-17.6953125\" y=\"-19.5\" width=\"35.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-7.6953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">ps</tspan></text></g></g></g><g class=\"node default\" style=\"opacity:1\" id=\"n\" transform=\"translate(77.375,77.5)\"><rect rx=\"0\" ry=\"0\" x=\"-14.375\" y=\"-19.5\" width=\"28.75\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-4.375,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">n</tspan></text></g></g></g></g></g></g></svg></pre><ul><li><code>new</code> 运算符操作结果<br>当运行 <code>brown.set(“brown”, “800#”,n);</code> 后，<br>堆区有字符串空间被占用，具体空间分配如下：</li></ul><pre class=\"mermaid graph\"><svg id=\"mermaid-1595956448807\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width:636.8px\" viewBox=\"0 0 636.8046875 294\"><g><g class=\"output\"><g class=\"clusters\"><g class=\"cluster\" id=\"空间2\" transform=\"translate(511.8046875,241.5)\" style=\"opacity:1\"><rect width=\"234\" height=\"89\" x=\"-117\" y=\"-44.5\"></rect><g class=\"label\" transform=\"translate(0, -30.5)\" id=\"mermaid-1595956448807Text\"><g transform=\"translate(-20.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">空间2</tspan></text></g></g></g><g class=\"cluster\" id=\"空间1\" transform=\"translate(296.25,77.5)\" style=\"opacity:1\"><rect width=\"576.5\" height=\"139\" x=\"-288.25\" y=\"-69.5\"></rect><g class=\"label\" transform=\"translate(0, -55.5)\" id=\"mermaid-1595956448807Text\"><g transform=\"translate(-20.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">空间1</tspan></text></g></g></g><g class=\"cluster\" id=\"变量n\" transform=\"translate(77.375,77.5)\" style=\"opacity:1\"><rect width=\"98.75\" height=\"89\" x=\"-49.375\" y=\"-44.5\"></rect><g class=\"label\" transform=\"translate(0, -30.5)\" id=\"mermaid-1595956448807Text\"><g transform=\"translate(-20.375,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">变量n</tspan></text></g></g></g><g class=\"cluster\" id=\"对象brown\" transform=\"translate(355.625,77.5)\" style=\"opacity:1\"><rect width=\"417.75\" height=\"89\" x=\"-208.875\" y=\"-44.5\"></rect><g class=\"label\" transform=\"translate(0, -30.5)\" id=\"mermaid-1595956448807Text\"><g transform=\"translate(-38.1875,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">对象brown</tspan></text></g></g></g></g><g class=\"edgePaths\"><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M511.8046875,97L511.8046875,122L511.8046875,147L511.8046875,172L511.8046875,197L511.8046875,222\" marker-end=\"url(#arrowhead58)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead58\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"b\" transform=\"translate(511.8046875,241.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-82\" y=\"-19.5\" width=\"164\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-72,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">整数字符串占用空间</tspan></text></g></g></g><g class=\"node default\" id=\"name\" transform=\"translate(211.46875,77.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-29.71875\" y=\"-19.5\" width=\"59.4375\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-19.71875,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">name</tspan></text></g></g></g><g class=\"node default\" id=\"type\" transform=\"translate(317.265625,77.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-26.078125\" y=\"-19.5\" width=\"52.15625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16.078125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">type</tspan></text></g></g></g><g class=\"node default\" id=\"num\" transform=\"translate(418.7265625,77.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-25.3828125\" y=\"-19.5\" width=\"50.765625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-15.3828125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">num</tspan></text></g></g></g><g class=\"node default\" id=\"a\" transform=\"translate(511.8046875,77.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-17.6953125\" y=\"-19.5\" width=\"35.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-7.6953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">ps</tspan></text></g></g></g><g class=\"node default\" id=\"n\" transform=\"translate(77.375,77.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-14.375\" y=\"-19.5\" width=\"28.75\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-4.375,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">n</tspan></text></g></g></g></g></g></g></svg></pre><ul><li><p>空析构函数的实际作用<br>当析构函数为空函数时： <code>~robot() { }</code><br>运行 <code>return</code> 语句后， <code>空间1</code> 释放，而 <code>空间2</code> 保留</p></li><li><p>析构函数的实际作用<br>当析构函数为： <code>~robot() { delete [] ps; }</code><br>运行 <code>return</code> 语句后， <code>空间1</code> <code>空间2</code> 均释放</p></li></ul><h2 id=\"对象与指针\"><a class=\"anchor\" href=\"#对象与指针\">#</a> 对象与指针</h2><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>Person类的设计</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">char</span> Name<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> Sex<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> Age<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> Pid<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Addr<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span><span class=\"token string\">\"xxxxxxxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tAge <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t\tSex <span class=\"token operator\">=</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Pid<span class=\"token punctuation\">,</span><span class=\"token string\">\"xxxxxxxxxxxxxxxxxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tAddr<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>N<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> A<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> S<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>P<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Ad<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tAge <span class=\"token operator\">=</span> A<span class=\"token punctuation\">;</span><br>\t\t\tSex <span class=\"token operator\">=</span> S<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Pid<span class=\"token punctuation\">,</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">int</span> L<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>Ad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tAddr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>L<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">,</span>Ad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Now destroying Person\"</span><span class=\"token operator\">&lt;&lt;</span>Name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> Addr<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Register</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><br><span class=\"token keyword\">void</span> Person<span class=\"token operator\">::</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span><br>\tSex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Pid<span class=\"token punctuation\">,</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Addr<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> Addr<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">int</span> L<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tAddr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>L<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">void</span> Person<span class=\"token operator\">::</span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>Name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>Age<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>Sex<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>Pid<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Addr<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>Addr<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tPerson person1<span class=\"token punctuation\">;</span><br>\tPerson <span class=\"token function\">person2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"610103199409192839\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"中国西安市咸宁西路29号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tPerson person3<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"person1: \"</span><span class=\"token punctuation\">;</span><br>\tperson1<span class=\"token punctuation\">.</span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"person2: \"</span><span class=\"token punctuation\">;</span><br>\tperson2<span class=\"token punctuation\">.</span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tperson3<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"610103198409192493\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"中国上海市华山北路1845号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"person3: \"</span><span class=\"token punctuation\">;</span><br>\tperson3<span class=\"token punctuation\">.</span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tperson2<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵五\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"610103198409152127\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"中国新疆乌鲁木齐市王家沟12号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"person2: \"</span><span class=\"token punctuation\">;</span><br>\tperson2<span class=\"token punctuation\">.</span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"指向对象的指针\"><a class=\"anchor\" href=\"#指向对象的指针\">#</a> 指向对象的指针</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>定义方式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token operator\">&lt;</span>指针变量名表<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\">Person <span class=\"token function\">person1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Zhang3\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Person <span class=\"token operator\">*</span>ptr<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>person1<span class=\"token punctuation\">;</span><br>ptr<span class=\"token operator\">-></span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"动态存储\"><a class=\"anchor\" href=\"#动态存储\">#</a> 动态存储</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>定义方式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>对象指针<span class=\"token operator\">></span>＝<span class=\"token keyword\">new</span> <span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>名字初始化值<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">delete</span> <span class=\"token operator\">&lt;</span>名字指针<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">Person <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>日期类修改</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">void</span> Date<span class=\"token operator\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> yy<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mm<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> dd<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tmonth <span class=\"token operator\">=</span> mm<span class=\"token punctuation\">;</span><br>\tyear <span class=\"token operator\">=</span> yy<span class=\"token punctuation\">;</span><br>\tday <span class=\"token operator\">=</span> dd<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">void</span> Date<span class=\"token operator\">::</span><span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>year<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-\"</span><span class=\"token operator\">&lt;&lt;</span>month<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-\"</span><span class=\"token operator\">&lt;&lt;</span>day<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tDate date1<span class=\"token punctuation\">;</span><br>\tDate <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>date1<span class=\"token punctuation\">;</span><br>\tp1<span class=\"token operator\">-></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">2006</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tp1<span class=\"token operator\">-></span><span class=\"token function\">print_ymd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>date1<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>Date<span class=\"token operator\">::</span><span class=\"token operator\">*</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 普通函数指针定义不行</span><br>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>Date<span class=\"token operator\">::</span><span class=\"token operator\">*</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tp3 <span class=\"token operator\">=</span> Date<span class=\"token operator\">::</span>init<span class=\"token punctuation\">;</span><br>\tp4 <span class=\"token operator\">=</span> Date<span class=\"token operator\">::</span>print_ymd<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2006</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>Person类修改</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">char</span> Name<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> Sex<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> Age<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span><span class=\"token string\">\"XXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tAge <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\tSex <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Now destroying Person\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">void</span> <span class=\"token function\">Register</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">void</span> <span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">void</span> Person<span class=\"token operator\">::</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span><br>\tSex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">void</span> Person<span class=\"token operator\">::</span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>Name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\t'</span><span class=\"token operator\">&lt;&lt;</span>Age<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\t'</span><span class=\"token operator\">&lt;&lt;</span>Sex<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tPerson <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明两个指向对象的指针</span><br>\tp1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动态生成一个 Person 对象</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"person1: \\t\"</span><span class=\"token punctuation\">;</span><br>\tp1<span class=\"token operator\">-></span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tp1<span class=\"token operator\">-></span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Zhang3\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"person1: \\t\"</span><span class=\"token punctuation\">;</span><br>\tp1<span class=\"token operator\">-></span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\tp2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动态生成一个 Person 对象</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"person2: \\t\"</span><span class=\"token punctuation\">;</span><br>\tp2<span class=\"token operator\">-></span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对象之间的赋值</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"person2: \\t\"</span><span class=\"token punctuation\">;</span><br>\tp2<span class=\"token operator\">-></span><span class=\"token function\">ShowMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">delete</span> p1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放 p1 指针指向对象所占的空间</span><br>\t<span class=\"token keyword\">delete</span> p2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放 p2 指针指向对象所占的空间</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"this指针\"><a class=\"anchor\" href=\"#this指针\">#</a> <code>this</code> 指针</h2><ul><li><p>每一个类的成员函数都包含一个指向本类对象的指针，指针名为 <code>this</code> 。</p></li><li><p>该指针指向本类对象的起始地址<br><code>this</code> 是指针， <code>*this</code> 就是对象（本对象）</p></li><li><p>访问成员<br><code>this-&gt;成员</code><br><code>(*this).成员</code><br><code>.</code> 运算符优先级比较高，故需要使用 <code>()</code></p></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token function\">Test</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 构造函数</span><br>Test<span class=\"token operator\">::</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tx <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">void</span> Test<span class=\"token operator\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" x = \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"this->x = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(*this).x = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tTest <span class=\"token function\">testObject</span><span class=\"token punctuation\">(</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\ttestObject<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token comment\">// 如果在 print () 函数中增加 int x=13; 输出结果如何变化？</span><br></pre></div></figure><ul><li>常用场合</li></ul><ol><li>当类中数据成员名与成员函数中的形参名相同时，用 <code>this</code> 指针加以区分</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Time</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">,</span>minute<span class=\"token punctuation\">,</span>second<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> minute<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> second<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>hour <span class=\"token operator\">=</span> hour<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>minute <span class=\"token operator\">=</span> minute<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>second <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></pre><pre class=\"code\"><span class=\"token comment\">// 两个整数为参数的构造函数</span><br>Fraction<span class=\"token operator\">::</span><span class=\"token function\">Fraction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用成员函数</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// 设置分子、分母</span><br><span class=\"token keyword\">void</span> Fraction<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>a<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>b<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 分数相加，本类对象加 u</span><br>Fraction Fraction<span class=\"token operator\">::</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Fraction u<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span><br>\tFraction v<span class=\"token punctuation\">;</span><br>\tv<span class=\"token punctuation\">.</span>a<span class=\"token operator\">=</span>a<span class=\"token operator\">*</span>u<span class=\"token punctuation\">.</span>b<span class=\"token operator\">+</span>b<span class=\"token operator\">*</span>u<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分子</span><br>\tv<span class=\"token punctuation\">.</span>b<span class=\"token operator\">=</span>b<span class=\"token operator\">*</span>u<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 分母</span><br>\ttmp<span class=\"token operator\">=</span><span class=\"token function\">divisor</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 计算分子、分母的公约数</span><br>\tv<span class=\"token punctuation\">.</span>a<span class=\"token operator\">=</span>v<span class=\"token punctuation\">.</span>a<span class=\"token operator\">/</span>tmp<span class=\"token punctuation\">;</span><span class=\"token comment\">// 约去公约数</span><br>\tv<span class=\"token punctuation\">.</span>b<span class=\"token operator\">=</span>v<span class=\"token punctuation\">.</span>b<span class=\"token operator\">/</span>tmp<span class=\"token punctuation\">;</span><span class=\"token comment\">// 约去公约数</span><br>\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回结果</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ol start=\"2\"><li>成员函数需要返回指针或本对象时</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></pre><pre class=\"code\"><span class=\"token comment\">// 分数相加，本类对象加 u</span><br>Fraction Fraction<span class=\"token operator\">::</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Fraction u<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// Fraction v;</span><br>\ta<span class=\"token operator\">=</span>a<span class=\"token operator\">*</span>u<span class=\"token punctuation\">.</span>b<span class=\"token operator\">+</span>b<span class=\"token operator\">*</span>u<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分子</span><br>\tb<span class=\"token operator\">=</span>b<span class=\"token operator\">*</span>u<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 分母</span><br>\ttmp<span class=\"token operator\">=</span><span class=\"token function\">divisor</span><span class=\"token punctuation\">(</span>a <span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 计算分子、分母的公约数</span><br>\ta<span class=\"token operator\">=</span>a<span class=\"token operator\">/</span>tmp<span class=\"token punctuation\">;</span><span class=\"token comment\">// 约去公约数</span><br>\tb<span class=\"token operator\">=</span>b<span class=\"token operator\">/</span>tmp<span class=\"token punctuation\">;</span><span class=\"token comment\">// 约去公约数</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回结果</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>如何通过指针访问对象数组的元素的成员。<br>如<figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">PERSON   Beijing<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>PERSON     <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>Beijing<span class=\"token punctuation\">;</span><br></pre></div></figure>如何通过 <code>p</code> 访问第 <code>i</code> 个对象的成员，如 <code>show()</code> , <code>set(char *name,char *gender, int age)</code> 等公有成员。</li></ol><blockquote><p><code>p</code> 是指针， <code>p+i</code> 也是指针。指针指向 <code>-&gt;</code><br><code>*p</code> 是对象， <code>*(p+i)</code> 也是对象，对象用访问 <code>.</code></p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> ；<br><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；<br></pre></div></figure><ol start=\"2\"><li>指向类中成员函数的指针如何定义？它与一般函数指针定义的区别是什么？</li></ol><blockquote><p>一般函数指针的调用与类中的静态成员函数并无区别。因为类的静态成员不属于任何对象。 但与类的非静态成员函数指针有区别。因为类的非静态成员函数中有一个隐形的 this 指针，使得其与一般函数指针不兼容。并且类与类之间的 this 指针也是不一样的，也就是指向不同类的非静态成员函数指针间也是不兼容的。因而需要指出非静态成员函数指针所属的类，即在指针前需要加上参数名，表示指针是指向某一类的非静态成员函数。</p></blockquote><ol start=\"3\"><li>this 指针与对象指针的区别是什么？this 指针的用途？</li></ol><blockquote><ul><li><p>this 指针：在每一个成员函数中都包含一个特殊的指针，这个 this 指针的名字是固定的，称为 this。它是指向本类对象的指针，它的值是当前被调用的成员函数所在的对象的起始地址。<br>一个对象的 this 指针并不是对象本身的一部分，不会影响对象的结果。this 作用域是在类内部，编译器自动将对象本身的地址作为一个隐含参数传递给函数。也就是说，即使你没有写上 this 指针，编译器在编译的时候也是加上 this 的，它作为非静态成员函数的隐含形参，对各成员的访问均通过 this 进行。</p></li><li><p>对象指针：指存放对象初始地址的指针变量。它包括</p></li></ul><ol><li>指向对象的指针（如 <code>int *p1;//定义指向整型数据的指针变量</code> ）</li><li>类成员指针，又分为数据成员指针（ <code>类名::*指针变量名=成员地址初值</code> ，如 <code>Date::*p=d;</code> ）和成员函数指针（ <code>函数返回类型 类名::*指针变量名 函数参数</code> ，如 <code>void (*pf)(char a, const char *b);</code> ）</li></ol></blockquote><blockquote><ul><li>this 指针与对象指针的区别：this 指针在一般的成员函数内会有，且名字固定，它的值是当前调用该成员函数的对象的地址；对象指针是指向对象的。</li><li>this 指针的用途：当参数有跟该对象里的成员变量重名的时候，可以用 this 指针来解决变量重名带来的问题。</li></ul></blockquote><h1 id=\"随堂练习\"><a class=\"anchor\" href=\"#随堂练习\">#</a> 随堂练习</h1><ol><li class=\"quiz\"><p>下面关于构造函数的叙述，正确的是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>构造函数不能重载</li><li>构造函数只能定义为无参函数</li><li>构造函数只能定义为有参函数</li><li class=\"correct\">构造函数能重载</li></ul></li><li class=\"quiz true\"><p>构造函数名必须与类名相同。</p></li><li class=\"quiz true\"><p>构造函数由系统自动调用运行。</p></li><li class=\"quiz\"><p>下面关于析构函数的叙述，正确的是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li class=\"correct\">析构函数必须是无参函数</li><li>析构函数可以是有参函数</li><li>析构函数能够返回函数值</li><li>析构函数不是系统自动调用</li></ul></li><li class=\"quiz false\"><p>析构函数名与类名相同。</p></li><li class=\"quiz multi\"><p><code>p</code> 是指向 <code>PERSON</code> 类对象的指针，则通过 <code>p</code> 访问公有成员函数 <code>show()</code> 的方法是。</p><ul class=\"options\"><li><code>p.show();</code></li><li class=\"correct\"><code>p-&gt;show();</code></li><li class=\"correct\"><code>(*p).show();</code></li><li><code>(*p)-&gt;show();</code></li></ul></li><li class=\"quiz false\"><p>this 指针需要事先声明，才能使用。</p></li></ol>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-9/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-9/",
            "title": "第09周 数据的抽象与封装：类与对象1",
            "date_published": "2020-05-02T07:21:11.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"实体-对象与类的概念\"><a class=\"anchor\" href=\"#实体-对象与类的概念\">#</a> 实体、对象与类的概念</h2><h3 id=\"实体\"><a class=\"anchor\" href=\"#实体\">#</a> 实体</h3><ul><li><p>什么是实体？<br>是指客观世界存在的某个事物</p><blockquote><p>一所大学，例如：西安交通大学<br>某动物，例如：一只羊<br>一本图书，例如：《C++ 程序设计教程》<br>一篇文章，例如：“羊年趣赏羊联”</p></blockquote></li><li><p>如何描述实体？<br>通过对实体进行抽象，来描述实体</p></li><li><p>如何抽象描述实体？<br>每个实体都有其特征和功能，特征和功能通称为<strong>属性</strong><br>实体与实体的不同，在于属性的不同</p><p>从实体中抽取出若干特征和功能，来表示实体<br>特征指实体的<strong>静态属性</strong>，功能指实体的<strong>动态属性</strong><br>特征和功能密切相关、相互依赖，不能割裂</p></li></ul><table><thead><tr><th style=\"text-align:center\">电视机的特征</th><th style=\"text-align:center\">电视机的功能</th></tr></thead><tbody><tr><td style=\"text-align:center\">型号</td><td style=\"text-align:center\">播放影视</td></tr><tr><td style=\"text-align:center\">尺寸</td><td style=\"text-align:center\">选频道</td></tr><tr><td style=\"text-align:center\">液晶</td><td style=\"text-align:center\">调颜色</td></tr><tr><td style=\"text-align:center\">价格</td><td style=\"text-align:center\">调音量</td></tr></tbody></table><p>当然有些实体只有静态属性而无动态属性，如兵马俑等</p><h3 id=\"对象\"><a class=\"anchor\" href=\"#对象\">#</a> 对象</h3><ul><li>什么是对象？<br>指被抽象描述的某个实体<br>对象 = 实体的特征 + 实体的功能<br>对象 =<strong> 数据</strong> +<strong> 函数</strong><br>将数据和函数当作一个<strong>统一体</strong></li></ul><h3 id=\"类\"><a class=\"anchor\" href=\"#类\">#</a> 类</h3><ul><li><p>什么是类？<br>具有相同特征和功能的<strong>对象集合</strong><br>对象是类的一个实例或个体或元素</p><blockquote><p>所有公元日期→日期类<br>所有西安交大学生→西安交大学生类<br>整数集合→整数类</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span><span class=\"token comment\">//k 称为整数变量，又称整数对象</span><br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">date</span> today<span class=\"token punctuation\">;</span><span class=\"token comment\">//today 称日期结构体变量，又称日期对象</span><br></pre></div></figure></li><li><p>将实体转化为程序中的数据<br>C++ 程序中有<strong>四种基本数据类型</strong>：字符、整数、浮点、双精度类型<br>当程序中涉及到的实体不能直接描述为基本数据类型时，只有描述成新的数据 (类型)</p><p>类是相同属性的对象集合，其中某个对象的特征和功能就是类的特征和功能</p><blockquote><ul><li>学生 (数据) 类 (型) 的特征和功能<br>特征：姓名、性别、年龄、学号、成绩、身高……<br>功能：上课、跑步、听、说、读、写、……</li><li>轿车 (数据) 类 (型) 的特征和功能<br>特征：型号、颜色、价格、出厂日期、轮子直径……<br>功能：运动、鸣笛、加油、倒车、……</li></ul></blockquote></li><li><p>类与结构体<br>将数据和函数当作一个统一体，即 “类”<br>类是对客观世界万物的抽象描述<br>结构体是复合数据的统一体</p><p>结构体只有数据成员，没有函数成员<br>结构体又称为特殊的类<br>现在结构体中也可以包括函数成员</p><p>类的语法格式与结构体相似：</p><ul><li>先定义类的数据成员和函数成员</li><li>再声明具体对象 (变量)</li><li>然后使用对象 (变量)</li></ul></li></ul><h2 id=\"类的定义\"><a class=\"anchor\" href=\"#类的定义\">#</a> 类的定义</h2><h3 id=\"定义格式\"><a class=\"anchor\" href=\"#定义格式\">#</a> 定义格式</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 私有成员</span><br>\t\t<span class=\"token operator\">&lt;</span>数据成员说明语句<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token operator\">&lt;</span>函数成员说明语句<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 公有成员</span><br>\t\t<span class=\"token operator\">&lt;</span>数据成员说明语句<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token operator\">&lt;</span>函数成员说明语句<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 保护成员</span><br>\t\t<span class=\"token operator\">&lt;</span>数据成员说明语句<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token operator\">&lt;</span>函数成员说明语句<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h4 id=\"例子定义实体钟表类\"><a class=\"anchor\" href=\"#例子定义实体钟表类\">#</a> 例子：定义实体钟表类</h4><ul><li>如何抽象描述</li></ul><pre><code>特征：即数据成员？\n\t时、分、秒\n\t型号、生产厂、出厂日期、价格等\n\n功能：即函数成员？\n\t设置时间\n\t钟表运转或运行\n\t报时响铃\n\t显示时间\n</code></pre><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br><span class=\"marked\">13</span><br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token comment\">// 定义钟表类</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 数据成员一般为私有成员</span><br>\t\t<span class=\"token keyword\">int</span> Hour<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小时属性</span><br>\t\t<span class=\"token keyword\">int</span> Minute<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分钟属性</span><br>\t\t<span class=\"token keyword\">int</span> Second<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 秒属性</span><br>\t\t<span class=\"token keyword\">float</span> Price<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 价格属性</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><span class=\"token comment\">// 函数成员一般为公有成员</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置时间操作</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 钟表运转操作</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Report_Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报时响铃操作</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Show_Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示时间操作</span><br><span class=\"marked\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><br></pre></div></figure><h3 id=\"成员函数的两种定义方法\"><a class=\"anchor\" href=\"#成员函数的两种定义方法\">#</a> 成员函数的两种定义方法</h3><h4 id=\"内联函数\"><a class=\"anchor\" href=\"#内联函数\">#</a> 内联函数</h4><p>在类体内直接定义函数成员，该成员函数又称内联函数<br>在类体内定义内联函数等同一般函数定义格式</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br><span class=\"marked\">12</span><br><span class=\"marked\">13</span><br><span class=\"marked\">14</span><br><span class=\"marked\">15</span><br>16<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token comment\">// 定义钟表类</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 数据成员一般为私有成员</span><br>\t\t<span class=\"token keyword\">int</span> Hour<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小时属性</span><br>\t\t<span class=\"token keyword\">int</span> Minute<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分钟属性</span><br>\t\t<span class=\"token keyword\">int</span> Second<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 秒属性</span><br>\t\t<span class=\"token keyword\">float</span> Price<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 价格属性</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><span class=\"token comment\">// 函数成员一般为公有成员</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置时间操作</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 钟表运转操作</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Report_Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报时响铃操作</span><br><span class=\"marked\">\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Show_Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 显示时间操作</span></span><br><span class=\"marked\">\t\t<span class=\"token punctuation\">{</span></span><br><span class=\"marked\">\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>Hour<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">':'</span><span class=\"token operator\">&lt;&lt;</span>Minute<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">':'</span><span class=\"token operator\">&lt;&lt;</span>Second<span class=\"token punctuation\">;</span></span><br><span class=\"marked\">\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h4 id=\"类体外定义函数成员\"><a class=\"anchor\" href=\"#类体外定义函数成员\">#</a> 类体外定义函数成员</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token operator\">&lt;</span>函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>参数表<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>函数体<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br></pre><pre class=\"code\"><span class=\"token keyword\">void</span> Clock<span class=\"token operator\">::</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置修改 4 个数据成员的值的函数</span><br><span class=\"token punctuation\">{</span><br>\tHour <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span><br>\tMinute <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span><br>\tSecond <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span><br>\tPrice <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">void</span> Clock<span class=\"token operator\">::</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 模拟运行钟表运行函数</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只模拟运行 10 秒钟</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tSecond<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Second<span class=\"token operator\">==</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tSecond<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t\tMinute<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Minute<span class=\"token operator\">==</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token punctuation\">{</span><br>\t\t\t\tMinute<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t\t\tHour<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Hour<span class=\"token operator\">==</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\tHour<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\r'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不换行，返回当前行的首位</span><br>\t\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 程序暂停运行秒</span><br>\t\t<span class=\"token function\">Show_Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">void</span> Clock<span class=\"token operator\">::</span><span class=\"token function\">Report_Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">Show_Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Minute<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>Second<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>Hour<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\007\"</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"对象的声明与引用\"><a class=\"anchor\" href=\"#对象的声明与引用\">#</a> 对象的声明与引用</h2><h3 id=\"对象的声明\"><a class=\"anchor\" href=\"#对象的声明\">#</a> 对象的声明</h3><p>用已定义的类去声明对象 (即变量)，类似于结构体。</p><p>声明对象的一般形式 (类的实例化)：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>对象<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>对象<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> …… <span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 如</span><br>Clock XJTU_Big_Ben<span class=\"token punctuation\">,</span> Omega<span class=\"token punctuation\">,</span> Rossini<span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"对象的引用\"><a class=\"anchor\" href=\"#对象的引用\">#</a> 对象的引用</h3><p>对象的引用类似于结构体<br>对类中成员的访问，采用 <code>.</code> 运算符</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">Rossini<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Rossini<span class=\"token punctuation\">.</span><span class=\"token function\">Show_Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><blockquote><p>一般在类体外，只有公有成员可以采用 <code>.</code> 运算符访问<br>私有、保护成员都不能采用 <code>.</code> 运算符访问</p></blockquote><p>可以直接进行对象赋值</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">Omiga<span class=\"token operator\">=</span>Rossini<span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"对象的存储空间\"><a class=\"anchor\" href=\"#对象的存储空间\">#</a> 对象的存储空间</h3><ul><li>若一个类声明了五个对象，存储空间如何分配？</li></ul><blockquote><p>数据成员分配存储空间</p></blockquote><p>是否对象中的数据和函数成员都占用存储空间？</p><blockquote><p>函数成员共用一个存储空间</p></blockquote><h3 id=\"引用对象应该注意\"><a class=\"anchor\" href=\"#引用对象应该注意\">#</a> 引用对象应该注意</h3><ul><li>成员函数直接访问同类中的数据成员 (公有和私有)</li><li>对象访问其数据成员或成员函数需使用运算符 <code>.</code></li><li>禁止直接访问一个对象中的私有成员</li><li>同类对象之间可以整体赋值</li><li>对象用作函数的参数时属于赋值调用</li><li>对象可以用作函数值类型，函数可以返回一个对象</li></ul><h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3><ul><li>公有成员：外界能够直接访问，起着接口的作用</li><li>私有成员：外界不能直接访问，使得成员被隐藏起来</li><li>一个实体的属性往往被定义为私有成员，方法被定义为公有成员</li><li>通过类中提供的函数对类中的数据进行操作，达到数据的安全性</li><li>类名、各成员名称要符合标识符规范</li><li>成员函数可在类中定义，也可在类外定义</li><li>各成员的访问权限应根据实际需要确定</li><li>书写顺序任意，有时 public 放在前边，有时写几个 public 或几个 private</li><li>类中的数据成员不能使用表达式进行初始化</li></ul><h2 id=\"公有-私有和保护成员\"><a class=\"anchor\" href=\"#公有-私有和保护成员\">#</a> 公有、私有和保护成员</h2><h3 id=\"公有成员\"><a class=\"anchor\" href=\"#公有成员\">#</a> 公有成员</h3><p>在 <code>public</code> 后面定义的数据成员和函数成员都称作公有成员</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>外界 (类外) 能够直接访问该成员，通过 <code>.</code> 运算符<br>一般函数成员被定义为公有成员<br>通过调用公有函数成员实施规定的操作<br>外界与类之间起着接口的作用</p><p>例如：钟表类中的设置函数 <code>set(int,int,int,float)</code> 就定义成公有成员。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> p<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token comment\">// 对小时、分钟、秒钟的值进行有效性检验后，再赋值</span><br>\t\t\tHour<span class=\"token operator\">=</span>h<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>h<span class=\"token operator\">&lt;=</span><span class=\"token number\">24</span><span class=\"token operator\">?</span>h<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t\tMinute<span class=\"token operator\">=</span>m<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>m<span class=\"token operator\">&lt;=</span><span class=\"token number\">60</span><span class=\"token operator\">?</span>m<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t\tSecond<span class=\"token operator\">=</span>s<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>s<span class=\"token operator\">&lt;=</span><span class=\"token number\">60</span><span class=\"token operator\">?</span>m<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t\tPrice<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分号别忘</span><br><br>Clock XJTU<span class=\"token punctuation\">;</span><br>XJTU<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span><br></pre></div></figure><h3 id=\"私有成员\"><a class=\"anchor\" href=\"#私有成员\">#</a> 私有成员</h3><p>在 <code>private</code> 后面定义的数据成员和函数成员都称作私有成员</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>外界 (类外) 不能够直接访问该成员<br>一般数据成员被定义为私有成员<br>使得成员被封装隐藏起来，外界不能随便修改对象的私有数据成员<br>只有通过类中公有函数对数据进行修改，达到数据的安全性</p><p>例如：钟表类的时分秒定义为私有成员，通过 <code>set()</code> 函数才能修改。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> Hour<span class=\"token punctuation\">,</span>Minute<span class=\"token punctuation\">,</span>Second<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">float</span> Price<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t……<br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>Clock XJTU<span class=\"token punctuation\">;</span><br>XJTU<span class=\"token punctuation\">.</span>Hour<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ×</span><br></pre></div></figure><h3 id=\"保护成员\"><a class=\"anchor\" href=\"#保护成员\">#</a> 保护成员</h3><p>在 <code>protected</code> 后面定义的数据成员和函数成员都称作保护成员</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span><br>\t<span class=\"token keyword\">float</span> price<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>外界部分区域能够访问该成员<br>换句话说某些数据或函数成员在类外被有限制的访问<br>私有是对外界完全封闭，公有是完全开放，保护是介于两者之间</p><p>例如：下面有两个类的定义，一个是时间类，一个是日期类</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></pre><pre class=\"code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">time</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">,</span>minute<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> second<span class=\"token punctuation\">;</span><br>\t……<br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">date</span><span class=\"token operator\">:</span><span class=\"token keyword\">public</span> time<br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">show_date_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>year<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'-'</span><span class=\"token operator\">&lt;&lt;</span>month<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'-'</span><span class=\"token operator\">&lt;&lt;</span>day<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>hour<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'-'</span><span class=\"token operator\">&lt;&lt;</span>minute<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'-'</span><span class=\"token operator\">&lt;&lt;</span>second<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token comment\">//hour 报错 minute 报错 second 正确</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t……<br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h2 id=\"两种程序设计思想\"><a class=\"anchor\" href=\"#两种程序设计思想\">#</a> 两种程序设计思想</h2><h3 id=\"面向过程的程序设计structured-programming\"><a class=\"anchor\" href=\"#面向过程的程序设计structured-programming\">#</a> 面向过程的程序设计 (Structured Programming)</h3><p>以功能为中心，通过分解功能，采用函数来描述操作<br>数据与函数分离，数据（类型或结构）一旦发生改变，函数也要相应改变<br>例如排序函数： <code>void sort(int a[],int n);</code> 只能排序整数数组</p><h3 id=\"面向对象程序设计object-oriented-programming\"><a class=\"anchor\" href=\"#面向对象程序设计object-oriented-programming\">#</a> 面向对象程序设计 (Object Oriented Programming)</h3><p>以数据为中心，采用对象来描述内部属性和操作方法<br>将数据和函数当作一个统一体，采用软件对象模拟客观世界中实际对象<br>例如：钟表类、日期类</p><p>特征：</p><ul><li><p>抽象：实体特征 + 实体功能<br>如钟表、日期、分数等实体的抽象描述</p></li><li><p>封装：数据和函数封装组成统一体<br>通过公有成员函数修改数据、显示数据、取得数据</p></li><li><p>继承：将对象 (实体) 之间的差异通过继承性加以抽象描述<br>动物<br>→{人、大象、鸟…}<br>→{学生、工、农、兵…}<br>→{大学生、中学生…}<br>→…</p></li><li><p>多态性：指相同语法结构（数据或操作）代表多种功能<br>如 <code>+</code> 、 <code>-</code> 、 <code>*</code> 、 <code>/</code></p></li></ul><p>优点：</p><ul><li>开发时间短，效率高，可靠性高</li><li>重用，共享，可维护性，精简</li><li>适合于大型程序长时间的团队开发工作</li></ul><blockquote><ul><li>为什么要引入数组？<br>太多的变量（全班同学的 C++ 成绩）</li><li>为什么要引入函数？<br>结构化程序设计：功能分解，代码重用</li><li>为什么要引入指针？<br>加快速度、参数传递、动态分配内存</li><li>为什么要引入结构体？<br>复合数据结构，不同数据类型的聚合在一起</li><li>为什么要引入类？<br>采用人们认识客观世界的自然方式去模拟客观世界中对象，\t将客观世界中的实体完整性的描述（即数字化）<br>提高开发程序的效率和可靠性，\t数据与代码的聚合（以便更高级的代码复用）</li></ul></blockquote><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>如何采用类去声明一个对象数组？</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>数组名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>数组长度<span class=\"token punctuation\">]</span><br></pre></div></figure><h1 id=\"随堂练习\"><a class=\"anchor\" href=\"#随堂练习\">#</a> 随堂练习</h1><ol><li class=\"quiz\"><p>一个实体与另一个实体的不同，就在于 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>某个特征不同</li><li>某个功能不同</li><li class=\"correct\">特征或功能有所不同</li><li>外形不同</li></ul></li><li class=\"quiz false\"><p>类是对象的集合。</p><blockquote><p>具有相同特征和功能的对象的集合</p></blockquote></li><li class=\"quiz\"><p>在一个类的定义格式中， <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>必须同时包含私有、公有、保护成员的定义</li><li>只能将数据成员定义为私有，函数成员定义为公有</li><li>数据成员不能定义为保护或公有成员</li><li class=\"correct\">在 public、private、protected 关键字后面紧跟一个冒号</li></ul></li><li class=\"quiz false\"><p>在类的定义格式中，函数成员只能在类外定义。</p></li><li class=\"quiz false\"><p>在类的定义格式中，在类体末右 <code>}</code> 后面可以没有分号。</p></li><li class=\"quiz\"><p>在类外，通过。运算符可以访问一个对象中的 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>保护成员</li><li>私有成员</li><li class=\"correct\">公有成员</li><li>保护和私有的函数成员</li></ul></li><li class=\"quiz false\"><p>数据成员只能定义为私有，函数成员只能定义为公有。</p></li><li class=\"quiz true\"><p>面向对象程序设计方法 4 个特征为：抽象、封装、继承和多态。</p></li></ol>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-8/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-8/",
            "title": "第08周 按址操作2：指针与数组、字符串、结构体，动态数组",
            "date_published": "2020-04-30T08:36:01.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"一维数组的指针\"><a class=\"anchor\" href=\"#一维数组的指针\">#</a> 一维数组的指针</h2><p>数组占据内存中一块连续的存储空间，<strong>每个数组元素都有确定的内存地址</strong>；<br>可通过定义指向数组元素类型的指针变量，间接访问数组中的各个元素。<br>C++ 语言规定，<strong>数组名代表数组的首地址</strong>（即数组中第一个元素的地址），它是一个常量指针。</p><p>如</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><br></pre></div></figure><p>说明 <code>a</code> 是一个整型数组， <code>p</code> 是一个整型的指针变量，且 <code>p</code> 指向 <code>a</code> 数组，其中 <code>a</code> 为数组名，代表数组的首地址即为 <code>&amp;a[0]</code> 。</p><h3 id=\"指针类型的算术运算\"><a class=\"anchor\" href=\"#指针类型的算术运算\">#</a> 指针类型的算术运算</h3><ol><li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>指针</mtext><mo>±</mo><mtext>整数</mtext><mo>⇒</mo><mtext>指针</mtext></mrow><annotation encoding=\"application/x-tex\">指针±整数 \\rArr 指针</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord cjk_fallback\">指</span><span class=\"mord cjk_fallback\">针</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">±</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord cjk_fallback\">整</span><span class=\"mord cjk_fallback\">数</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord cjk_fallback\">指</span><span class=\"mord cjk_fallback\">针</span></span></span></span></li></ol><p>假设：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 指向 a [1]</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 指向 a [2]</span><br></pre></div></figure><p>a 数组内存分配示意：</p><table><thead><tr><th style=\"text-align:center\">指针位置</th><th>地址</th><th>值</th><th>变量名</th></tr></thead><tbody><tr><td style=\"text-align:center\">p ➡️</td><td>1000</td><td>10</td><td>a[0]</td></tr><tr><td style=\"text-align:center\">1004</td><td>20</td><td>a[1]</td></tr><tr><td style=\"text-align:center\">1008</td><td>30</td><td>a[2]</td></tr><tr><td style=\"text-align:center\">...</td><td>...</td><td>...</td></tr><tr><td style=\"text-align:center\">1024</td><td></td><td>a[9]</td></tr></tbody></table><ul><li><code>p+i</code> ：表示 <code>p</code> 所指元素之<strong>后</strong>的第 <code>i</code> 个元素的指针</li><li><code>p-i</code> ：表示 <code>p</code> 所指元素之<strong>前</strong>的第 <code>i</code> 个元素的指针</li></ul><blockquote><ul><li>指针的算术运算与数学中运算不同。<br>如 <code>p</code> 的初值为 <code>a[0]</code> 的地址，即 <code>1000</code> ，执行 <code>p++</code> 后， <code>p</code> 将指向 <code>a[1]</code> 元素，这时 <code>p</code> 的值为 <code>1004</code> ，而不是 <code>1001</code> 。</li><li>实际上，在 C++ 中指针的算术运算与指针指向的变量类型有关。<br>如 <code>p</code> 指向 <code>int</code> 型，因 <code>int</code> 型变量为 4 字节长度，所以， <code>p+1</code> 相当于 <code>p+4</code> ，同样 <code>p+i</code> 相当于 <code>p+i*4</code> 。</li></ul></blockquote><ol start=\"2\"><li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>指针</mtext><mn>2</mn><mo>−</mo><mtext>指针</mtext><mn>1</mn><mo>⇒</mo><mtext>整数</mtext></mrow><annotation encoding=\"application/x-tex\">指针2-指针1 \\rArr 整数</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord cjk_fallback\">指</span><span class=\"mord cjk_fallback\">针</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord cjk_fallback\">指</span><span class=\"mord cjk_fallback\">针</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord cjk_fallback\">整</span><span class=\"mord cjk_fallback\">数</span></span></span></span></li></ol><p>两个同类型的指针做减法运算，常用于计算两个指针之间包含元素的个数。</p><p>计算方法：</p><p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mtext>指针</mtext><mn>2</mn><mo>−</mo><mtext>指针</mtext><mn>1</mn></mrow><mtext>元素的字节长度</mtext></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{指针2-指针1}{元素的字节长度}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.04633em;vertical-align:-.686em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">元</span><span class=\"mord cjk_fallback\">素</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">节</span><span class=\"mord cjk_fallback\">长</span><span class=\"mord cjk_fallback\">度</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">指</span><span class=\"mord cjk_fallback\">针</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord cjk_fallback\">指</span><span class=\"mord cjk_fallback\">针</span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p><p>如： <code>p1</code> 、 <code>p2</code> 是整型指针， <code>p1</code> 中的地址为 <code>1000</code> ， <code>p2</code> 中的地址为 <code>1008</code> 。<br>那么 <code>p2-p1</code> ，相当于 <code>(1008-1000)/4</code> ，结果为 <code>2</code> ，说明 <code>p1</code> 到 <code>p2</code> 之间包含 2 个元素。</p><h3 id=\"指针类型的关系运算\"><a class=\"anchor\" href=\"#指针类型的关系运算\">#</a> 指针类型的关系运算</h3><p>即两个指针可以比较大小。（将指针看作整数）</p><p>例如：使用指针输出数组各元素值。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5.7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>x<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br>cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br></pre></div></figure><blockquote><p>这里使用指针变量 <code>p</code> 作循环控制变量，循环条件 <code>p&lt;x+5</code> 为指针的关系运算，其中 <code>x+5</code> 表示 <code>&amp;x[5]</code> 。</p></blockquote><h3 id=\"数组元素的指针法表示\"><a class=\"anchor\" href=\"#数组元素的指针法表示\">#</a> 数组元素的指针法表示</h3><p>设:</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>Ptr<span class=\"token operator\">=</span>a<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span><br></pre></div></figure><p>∵ <code>a[i]</code> 的地址可以用 <code>a+i</code> 表示（即数组的首地址 + i），<br>对地址 <code>a+i</code> 进行间接访问运算，即 <code>*(a+i)</code> ，<br>而 <code>*(a+i)</code> 又解释为指针 <code>a+i</code> 所指向的对象，即 <code>a[i]</code> ，<br>∴ <code>a[i]</code> 与 <code>*(a+i)</code> 的表示是等价的 。</p><p>其中： <code>a[i]</code> 称为数组元素的下标法表示，而 <code>*(a+i)</code> 称为数组元素的指针法表示。</p><p>又 <code>Ptr</code> 指向数组首地址，所以 <code>*(a+i)</code> 与 <code>*(Ptr+i)</code> 等价。<br>从而： <code>a[i]</code> , <code>*(a+i)</code> , <code>*(Ptr+i)</code> 和 <code>Ptr[i]</code> 的四种形式均等价。</p><p>例如：使用数组元素不同的表示形式输出数组元素的值</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>a<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 下标法</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"a[i]\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"p[i]\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 指针法</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"*(a+i)\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"*(p+i)\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"二维数组的指针\"><a class=\"anchor\" href=\"#二维数组的指针\">#</a> 二维数组的指针</h2><p>设二维数组：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span><br></pre></div></figure><ol><li>二维数组 <code>a</code> 中 <code>i</code> 行 <code>j</code> 列元素的地址： <code>&amp;a[i][j]</code></li></ol><p>二维数组在内存中映射为一个一维数组，因此可以通过指向元素的指针，快速访问二维数组中的每个元素。</p><p>例子：利用指向数组元素类型的指针变量 <code>p</code> ，寻找 <code>a</code> 数组中元素的最大值<br>假设：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> max<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//max 为最大值</span><br><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">></span>max<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tmax<span class=\"token operator\">=</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"max=\"</span><span class=\"token operator\">&lt;&lt;</span>max<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br></pre></div></figure><ol start=\"2\"><li>二维数组的行地址</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>由 3 行元素组成，即 <code>a</code> - <code>a[0]</code> 、 <code>a[1]</code> 、 <code>a[2]</code><br>而每行又由 4 个类型相同的元素组成，分别对应一个一维数组。</p><table><thead><tr><th style=\"text-align:center\">行</th><th colspan=\"4\">对应数组</th></tr></thead><tbody><tr><td style=\"text-align:center\"><code>a[0]</code></td><td><code>a[0][0]</code></td><td><code>a[0][1]</code></td><td><code>a[0][2]</code></td><td><code>a[0][3]</code></td></tr><tr><td style=\"text-align:center\"><code>a[1]</code></td><td><code>a[1][0]</code></td><td><code>a[1][1]</code></td><td><code>a[1][2]</code></td><td><code>a[1][3]</code></td></tr><tr><td style=\"text-align:center\"><code>a[2]</code></td><td><code>a[2][0]</code></td><td><code>a[2][1]</code></td><td><code>a[2][2]</code></td><td><code>a[2][3]</code></td></tr></tbody></table><p>其中：<br><code>a</code> 为行元素数组的名字，即 <code>a</code> 代表 <code>&amp;a[0]</code> , 即 0 行的地址<br><code>a+1</code> 代表 <code>&amp;a[1]</code> ，即 1 行的地址<br><code>a+2</code> 代表 <code>&amp;a[2]</code> ，即 2 行的地址。</p><h3 id=\"二维数组的指针表示法\"><a class=\"anchor\" href=\"#二维数组的指针表示法\">#</a> 二维数组的指针表示法</h3><p>由于 <code>a[0]</code> 是由 <code>a[0][0]</code> ， <code>a[0][1]</code> ， <code>a[0][2]</code> 和 <code>a[0][3]</code> 四个元素构成的一维数组。<br>因此， <code>a[0]</code> 代表 <code>&amp;a[0][0]</code> ，即 0 行的首元素的地址。<br>这样 <code>a[0]+1</code> 代表首元素的下一个元素的地址，即 <code>&amp;a[0][1]</code> ；而 <code>a[0]+j</code> 就代表 <code>&amp;a[0][j]</code> 。<br>同理， <code>a[1]</code> 代表 <code>&amp;a[1][0]</code> ，即 1 行的首元素的地址；而 <code>a[1]+j</code> 代表 <code>&amp;a[1][j]</code> 。<br><code>a[i]</code> 代表 <code>&amp;a[i][0]</code> ，即 i 行的首元素的地址；而 <code>a[i]+j</code> 代表 <code>&amp;a[i][j]</code> 。<br>由此我们得到： <code>*(a[i]+j)</code> 等价于 <code>a[i][j]</code></p><p>又由于 <code>a[i]</code> 等价于 <code>*(a+i)</code> ，<br>因此， <code>*(a[i]+j))</code> 也等价于 <code>*(*(a+i)+j)</code><br>即： <code>*(*(a+i)+j)</code> 与 <code>a[i][j]</code> 等价。</p><p>我们将 <code>*(*(a+i)+j)</code> 称为二维数组元素 <code>a[i][j]</code> 的指针法表示。<br>其中， <code>a</code> 为首行地址， <code>a+i</code> 为 <code>i</code> 行的行地址，而 <code>*(a+i)</code> 为 <code>a</code> 的 <code>i</code> 行 <code>0</code> 列元素的<br>地址， 而 <code>*(a+i)+j</code> 为 <code>a</code> 的 <code>i</code> 行 <code>j</code> 列元素的地址。</p><h3 id=\"指向具有m个元素的一维数组指针\"><a class=\"anchor\" href=\"#指向具有m个元素的一维数组指针\">#</a> 指向具有 M 个元素的一维数组指针</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>定义格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">&lt;</span>指针变量<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//M 为一整型常量</span><br></pre></div></figure><p>通常利用该指针变量，指向二维数组的行地址，其中 <code>M</code> 表示二维数组的列数。</p><p>例如：利用行指针变量，按行输出二维数组各元素值。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>方法一</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>a<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 输出 p 所指行的各列元素值</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p>其中： <code>p</code> 是一个行指针，初值为 <code>0</code> 行的行地址；<br><code>p++</code> 后， <code>p</code> 指向下一行；<br><code>*p</code> 代表该行 <code>0</code> 列元素的地址， <code>*p+j</code> 为该行 <code>j</code> 列元素的地址。</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> p<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>a<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 输出 p 所指行的各列元素值</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>q<span class=\"token operator\">=</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>q<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>q<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>q<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p>其中： <code>p</code> 是一个行指针，初值为 <code>0</code> 行的行地址；<br><code>p++</code> 后， <code>p</code> 指向下一行；<br><code>*p</code> 代表该行 <code>0</code> 列元素的地址。<br><code>q</code> 是指向列元素类型的指针，初值为 <code>*p</code> ，即为该行 <code>0</code> 列元素的地址。</p></blockquote><h2 id=\"字符串指针\"><a class=\"anchor\" href=\"#字符串指针\">#</a> 字符串指针</h2><p>字符串指针是字符串的首地址，即第 1 个字符（索引为 0）的地址。<br>使用 <code>char</code> 型指针变量存放其首地址。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">;</span><br>str<span class=\"token operator\">=</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 或</span><br><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token operator\">=</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>字符串常量可看成存放在一个一维的字符数组中。<br>当指针指向字符串后，引用字符串中的字符可使用下面的形式：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>指针变量<span class=\"token operator\">+</span>下标<span class=\"token punctuation\">)</span><br><span class=\"token comment\">// 或</span><br>指针变量<span class=\"token punctuation\">[</span>下标<span class=\"token punctuation\">]</span><br></pre></div></figure><h3 id=\"应用在字符串中查找某字符\"><a class=\"anchor\" href=\"#应用在字符串中查找某字符\">#</a> 应用：在字符串中查找某字符</h3><ul><li>函数原型：</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><ul><li>算法：<br>从 <code>str</code> 的第一个字符查起，查到字符后就返回该字符的地址；<br>查不到则返回空值 <code>NULL</code> 。</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></pre><pre class=\"code\"><span class=\"token comment\">// 函数 strchr：在 str 指向的字符串中查找 c 中的字符</span><br><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str<span class=\"token operator\">!=</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str<span class=\"token operator\">==</span>c<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tstr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token operator\">=</span><span class=\"token string\">\"abcdefghij\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><br>\tp<span class=\"token operator\">=</span><span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token string\">'j'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 查找 j 的位置</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"字符串中无该字符。\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"该字符在串中的位置是：\"</span><span class=\"token operator\">&lt;&lt;</span>p<span class=\"token operator\">-</span>str<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">//p-str 为一整数值，该值正是所找到字符的索引号：9</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"特别注意\"><a class=\"anchor\" href=\"#特别注意\">#</a> 特别注意</h3><p>字符型指针与字符数组在使用中异同，如：</p><ol><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">81</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pstr<span class=\"token operator\">=</span><span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 正确</span><br></pre></div></figure></li><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">81</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>pstr<span class=\"token punctuation\">;</span><br>str<span class=\"token operator\">=</span><span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span><br>pstr<span class=\"token operator\">=</span><span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span><br></pre></div></figure></li><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">81</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pstr<span class=\"token punctuation\">;</span><br>cin<span class=\"token operator\">>></span>str<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span><br>cin<span class=\"token operator\">>></span>pstr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span><br></pre></div></figure></li></ol><h2 id=\"指针数组\"><a class=\"anchor\" href=\"#指针数组\">#</a> 指针数组</h2><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>定义格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token operator\">&lt;</span>数组名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>元素个数<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token comment\">// 定义 5 个 int 型的指针数组</span><br><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 定义指向多个字符串的指针数组</span><br><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Basic\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fortran\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"例子将月份数值转换为相应的英文名称\"><a class=\"anchor\" href=\"#例子将月份数值转换为相应的英文名称\">#</a> 例子：将月份数值转换为相应的英文名称</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></pre><pre class=\"code\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">month_name</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 定义一个静态指针数组</span><br>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>month<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token string\">\"Illegal month\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 月份值错</span><br>\t\t\t<span class=\"token string\">\"January\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 一月</span><br>\t\t\t<span class=\"token string\">\"February\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 二月</span><br>\t\t\t<span class=\"token string\">\"March\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 三月</span><br>\t\t\t<span class=\"token string\">\"April\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 四月</span><br>\t\t\t<span class=\"token string\">\"May\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 五月</span><br>\t\t\t<span class=\"token string\">\"June\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 六月</span><br>\t\t\t<span class=\"token string\">\"July\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 七月</span><br>\t\t\t<span class=\"token string\">\"August\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 八月</span><br>\t\t\t<span class=\"token string\">\"September\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 九月</span><br>\t\t\t<span class=\"token string\">\"October\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 十月</span><br>\t\t\t<span class=\"token string\">\"November\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 十一月</span><br>\t\t\t<span class=\"token string\">\"December\"</span> <span class=\"token comment\">// 十二月</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">>=</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token operator\">&lt;=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>month<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>month<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回字符串的指针</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>n<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">month_name</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"指针与结构体\"><a class=\"anchor\" href=\"#指针与结构体\">#</a> 指针与结构体</h2><p>结构体变量的指针：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&amp;</span><span class=\"token operator\">&lt;</span>结构体变量名<span class=\"token operator\">></span><br></pre></div></figure><p>定义指向结构体变量的指针：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>结构体类型<span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token operator\">&lt;</span>指针变量名<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>使用结构指针访问结构变量中的成员：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token comment\">// 格式 1：</span><br><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">&lt;</span>指针变量<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>成员名<span class=\"token operator\">></span><br><br><span class=\"token comment\">// 格式 2： </span><br><span class=\"token operator\">&lt;</span>指针变量<span class=\"token operator\">></span><span class=\"token operator\">-></span><span class=\"token operator\">&lt;</span>成员名<span class=\"token operator\">></span><br></pre></div></figure><p>其中： <code>-&gt;</code> 称为结构指向运算符。</p><h3 id=\"例子使用结构指针访问日期结构类型变量\"><a class=\"anchor\" href=\"#例子使用结构指针访问日期结构类型变量\">#</a> 例子：使用结构指针访问日期结构类型变量</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></pre><pre class=\"code\"><span class=\"token comment\">// 定义日期结构类型</span><br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tDate d<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2015</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义日期结构变量和指针变量</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>year<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>month<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>day<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>p<span class=\"token operator\">-></span>year<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-\"</span><span class=\"token operator\">&lt;&lt;</span>p<span class=\"token operator\">-></span>month<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-\"</span><span class=\"token operator\">&lt;&lt;</span>p<span class=\"token operator\">-></span>day<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"动态数组\"><a class=\"anchor\" href=\"#动态数组\">#</a> 动态数组</h2><p>问题：如何定义 n 个元素的一维数组？</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span><br>cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 标准 C++ 语言不支持该定义。</span><br></pre></div></figure><h3 id=\"new运算符\"><a class=\"anchor\" href=\"#new运算符\">#</a> <code>new</code> 运算符</h3><p>用于动态申请所需的内存空间</p><ol><li>动态申请单个变量</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>指针变量<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>例子：动态申请一个 <code>double</code> 型变量，初值为 <code>100.0</code></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br></pre><pre class=\"code\"><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><br><br>p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span><br><span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token number\">100.0</span><br><span class=\"token comment\">// 或</span><br>p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><ol start=\"2\"><li>动态申请数组</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>指针变量<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>元素个数<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// &lt; 元素个数 > 通常为常量 \\ 变量 \\ 表达式</span><br></pre></div></figure><p>例子：动态申请存放 80 个字符的数组</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">;</span><br>str<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>例子：动态创建 n 个元素的一维整型数组</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入n值：\"</span><span class=\"token punctuation\">;</span><br>cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 键盘输入 n</span><br>p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动态建立 n 个元素的一维数组</span><br><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果申请失败，则 返回的指针值为 NULL 即 0 值。</span><br><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"空间申请失败!\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入n个数：\"</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tcin<span class=\"token operator\">>></span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"delete运算符\"><a class=\"anchor\" href=\"#delete运算符\">#</a> <code>delete</code> 运算符</h3><p>释放动态申请到的存储空间</p><ol><li>动态释放单个变量</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">delete</span> <span class=\"token operator\">&lt;</span>指针变量<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放单个动态变量</span><br></pre></div></figure><ol start=\"2\"><li>动态释放数组</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>指针变量<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放动态数组</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>指向数组首元素的指针变量有哪些算术运算，意义是什么？</li></ol><blockquote><ol><li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>指针</mtext><mo>±</mo><mtext>整数</mtext><mo>⇒</mo><mtext>指针</mtext></mrow><annotation encoding=\"application/x-tex\">指针±整数 \\rArr 指针</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord cjk_fallback\">指</span><span class=\"mord cjk_fallback\">针</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">±</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord cjk_fallback\">整</span><span class=\"mord cjk_fallback\">数</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord cjk_fallback\">指</span><span class=\"mord cjk_fallback\">针</span></span></span></span><br>表示指针所指元素之后或之前的第整数个元素的地址。</li><li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>指针</mtext><mn>2</mn><mo>−</mo><mtext>指针</mtext><mn>1</mn><mo>⇒</mo><mtext>整数</mtext></mrow><annotation encoding=\"application/x-tex\">指针2-指针1 \\rArr 整数</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord cjk_fallback\">指</span><span class=\"mord cjk_fallback\">针</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord cjk_fallback\">指</span><span class=\"mord cjk_fallback\">针</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord cjk_fallback\">整</span><span class=\"mord cjk_fallback\">数</span></span></span></span><br>这个整数除以元素的字节长度表示两指针之间包含的元素个数。</li></ol></blockquote><ol start=\"2\"><li>指针的关系运算的意义是什么？</li></ol><blockquote><p>当两个指针指向同一个数组中的元素时，指向数组后面的元素的指针减去指向数组前面的元素的指针的意义是这两者之间相差的元素的个数。<br>比较元素的前后位置<br>可以作为循环的控制条件</p></blockquote><ol start=\"3\"><li>请总结二维数组（如 <code>int A[N][M]</code> ）和指向元素的指针（如 <code>int *p;</code> ）以及指向一维数组的指针（行指针，如 <code>int (*q)[M];</code> ）关系、数组元素的引用方法。</li></ol><blockquote><p>二维数组相当于一个特殊的一维数组，里面每个元素又是一个一维数组。<br>例如： <code>int a[3][3]</code> ，可以看成 3 行的一维数组，每一行的元素有 3 个，数组名是一个特殊一维数组的首地址。</p><p>二维数组的指针分为两种：</p><ol><li>行指针，如： <code>a</code> ，是一个指向数组的指针；</li><li>列指针，如： <code>&amp;a[0][0]</code> , <code>a[0]</code> , <code>*a</code> , 是一个指向单个变量的指针。<br><code>a</code> , <code>&amp;a[0][0]</code> , <code>a[0]</code> , <code>*a</code> 表示的都是指针，并且是同一块内存的地址，但它们表示的意义是不同的。</li></ol><p><code>a</code> 表示行指针（指向一个数组）， <code>*a</code> , <code>a[0]</code> , <code>&amp;a[0][0]</code> 表示列指针（这三个是等价的，都指向数组中的一个元素）。</p><p>以取 <code>a[2][1]</code> 的值为例：<br>如果是行指针，则先要对它进行解引用，变为一个列指针，然后在解引用得到其值 <code>a[2][1]=*(*(a+2)+1)</code> 。<br>如果是列指针，则直接进行解引用即可 <code>a[2][1]=*(*a+2*4+1)</code> 。</p></blockquote><ol start=\"4\"><li>如果动态申请大小为 <code>n*(m+1)</code> 的一维字符数组，如 <code>char *p=new char[n*(m+1)];</code> 。如何在其中保存多个（小于 n）长度不超过 m 的字符串（比如保存多个单词）？请写出输入和输出的格式例句。</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></pre><pre class=\"code\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>   cin <span class=\"token operator\">>></span> p<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>   cout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"随堂练习\"><a class=\"anchor\" href=\"#随堂练习\">#</a> 随堂练习</h1><ol><li class=\"quiz\"><p>设数组 a 的首地址是 <code>0x28fe74</code> ，则下列程序的执行结果是 <span class=\"gap\"></span> 。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><br>p<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><br>p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>cout<span class=\"token operator\">&lt;&lt;</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br></pre></div></figure><ul class=\"options\"><li>11</li><li>20</li><li><code>0x28fe75</code></li><li class=\"correct\"><code>0x28fe78</code></li></ul></li><li class=\"quiz\"><p></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><br></pre></div></figure><p>和 <code>a[i]</code> 起的作用不同的表达式是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li><code>p[i]</code></li><li class=\"correct\"><code>p+i</code></li><li><code>*(p+i)</code></li><li><code>*(a+i)</code></li></ul></li><li class=\"quiz\"><p>设有二维数组 <code>int a[3][4];</code> 和指针 <code>int *p=&amp;a[0][0];</code> ，下列哪项是与 <code>a[i][j]</code> 的作用相同的表示法</p><ul class=\"options\"><li><code>*(p+i+j)</code></li><li class=\"correct\"><code>*(p+i*4+j)</code></li><li><code>p[i][j]</code></li><li><code>*(a+i*3+j)</code></li></ul></li><li class=\"quiz\"><p>设有二维数组 <code>int A[3][4];</code> 下列哪项声明的指针可以赋值 <code>A</code> 。</p><ul class=\"options\"><li><code>int *p;</code></li><li><code>int (*p)();</code></li><li class=\"correct\"><code>int (*p)[4];</code></li><li><code>int *p[4];</code></li></ul></li><li class=\"quiz multi\"><p>声明指向字符串首元素的指针 <code>char *p=&quot;warrant&quot;;</code> ，下列哪个语句的执行是不正确的。</p><ul class=\"options\"><li><code>cout&lt;&lt;p;</code></li><li><code>cout&lt;&lt;p[2];</code></li><li class=\"correct\"><code>cin&gt;&gt;p;</code></li><li class=\"correct\"><code>cin&gt;&gt;p[2];</code></li></ul></li><li class=\"quiz\"><p>有下列声明语句</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"China's\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"textbooks\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"for\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"schools\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>r<span class=\"token punctuation\">;</span><br></pre></div></figure><p>下列哪个赋值语句是不正确的？</p><ul class=\"options\"><li class=\"correct\"><code>p=s;</code></li><li><code>q=s;</code></li><li><code>r=&amp;s[0][0];</code></li><li><code>p[0]=s[0];</code></li></ul></li><li class=\"quiz multi\"><p>有下列表示按钮的结构体和声明语句</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">BUTTON</span><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">BUTTON</span> top<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>top<span class=\"token punctuation\">;</span><br></pre></div></figure><p>下列哪个输入 “按钮” 名称的语句是正确的？</p><ul class=\"options\"><li><code>cin&gt;&gt;p.name;</code></li><li class=\"correct\"><code>cin&gt;&gt;p-&gt;name;</code></li><li><code>cin&gt;&gt;p[0]-&gt;name;</code></li><li class=\"correct\"><code>cin&gt;&gt;p[0].name;</code></li></ul></li><li class=\"quiz\"><p>有声明语句</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>下列哪个申请大小为 n 的一维动态数组的语句是正确的？</p><ul class=\"options\"><li><code>p=new int(n);</code></li><li class=\"correct\"><code>p=new int[n];</code></li><li><code>q=new int[n];</code></li><li><code>r=new int[n][10];</code></li></ul></li></ol>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-7/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-7/",
            "title": "第07周 按址操作1：指针、变量和函数",
            "date_published": "2020-04-29T05:42:28.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"指针的概念\"><a class=\"anchor\" href=\"#指针的概念\">#</a> 指针的概念</h2><p>指针是一种数据类型，指针与内存单元的地址密切相关。</p><h3 id=\"内存单元\"><a class=\"anchor\" href=\"#内存单元\">#</a> 内存单元</h3><p>内存：由内存单元构成。</p><h4 id=\"内存单元的地址和内容\"><a class=\"anchor\" href=\"#内存单元的地址和内容\">#</a> 内存单元的地址和内容</h4><p>内存单元的地址：指内存单元的编号<br>内存单元的内容：存放在内存单元中的数据</p><table><thead><tr><th>地址</th><th>内存空间</th></tr></thead><tbody><tr><td>0X28FED8</td><td>每个格子表示一个内存单元，占 1 字节长度</td></tr><tr><td>0X28FED9</td><td></td></tr><tr><td>0X28FEDA</td><td></td></tr><tr><td>0X28FEDB</td><td></td></tr><tr><td>0X28FEDC</td><td></td></tr><tr><td>0X28FEDD</td><td></td></tr></tbody></table><h4 id=\"内存单元的直接与间接访问\"><a class=\"anchor\" href=\"#内存单元的直接与间接访问\">#</a> 内存单元的直接与间接访问</h4><blockquote><p>如果我们有钥匙，则可直接打开会议室的门；如果我们没有钥匙，但知道钥匙存放的地点（如钥匙存放在 509 号办公室），那么我们会按照这个地址取出钥匙，同样可以打开会议室的门。这是一种直接访问和间接访问的思想。</p></blockquote><p>在 C/C++ 语言中，每个变量都分配有确定的内存空间。<br>使用变量名可直接访问内存中的数据；<br>通过变量的地址也可间接访问内存中的数据。</p><h3 id=\"地址与指针\"><a class=\"anchor\" href=\"#地址与指针\">#</a> 地址与指针</h3><p>定义一个变量，系统按变量类型为变量分配不同数目的内存单元，将其第一个内存单元的地址作为变量的地址。</p><p>如： <code>int a;</code><br><code>a</code> 变量的内存分配如下所示。</p><table><thead><tr><th>地址</th><th>内存空间</th></tr></thead><tbody><tr><td>0X28FED8</td><td></td></tr><tr><td>0X28FED9</td><td></td></tr><tr><td>0X28FEDA</td><td></td></tr><tr><td>0X28FEDB</td><td></td></tr><tr><td>0X28FEDC</td><td></td></tr></tbody></table><p><code>a</code> 的地址为： <code>0X28FED8</code><br>使用变量名 <code>a</code> 可直接存取内存单元中的值。<br>如：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">a<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赋值操作</span><br>a<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">;</span><br></pre></div></figure><p>在 C/C++ 中，允许定义一种特殊变量，用于存放某变量的地址。</p><p>现假设变量 <code>pta</code> 中存放着整型变量 <code>a</code> 的地址。 <code>pta=&amp;a;</code><br><code>pta</code> 与变量 <code>a</code> 之间的关联，形象地表示为： <code>pta-&gt;a</code><br>读作： <code>pta</code> 指向 <code>a</code> 。<br>其中： <code>-&gt;</code> 为指针示意符。</p><p>由此，我们说 <code>pta</code> 中存放的是指向变量 <code>a</code> 的指针。即 <code>pta</code> 是一个指针变量。</p><blockquote><p>将存放 “地址” 的变量称为指针变量，这里的 “地址” 就是指针。<br>因此，变量的地址就是变量的指针。</p></blockquote><h3 id=\"指针类型的主要用途\"><a class=\"anchor\" href=\"#指针类型的主要用途\">#</a> 指针类型的主要用途</h3><ol><li>参数传递<br>指针作参数可以实现参数按引用传递的功能。</li><li>动态分配<br>利用动态分配可构建动态数组，动态数组需要借助指针实现</li><li>数据结构<br>创建可伸缩的数据结构，如链表、棧与队列、树和图等。</li><li>多态处理<br>面向对象编程中 “运行多态性” 的处理是利用指针与引用实现的。</li></ol><h2 id=\"指针变量的使用\"><a class=\"anchor\" href=\"#指针变量的使用\">#</a> 指针变量的使用</h2><p>变量有地址，指针变量可以存放变量的地址。<br>当指针变量中存放某个变量的地址后，我们就说该指针变量指向这个变量。</p><h3 id=\"定义指针变量\"><a class=\"anchor\" href=\"#定义指针变量\">#</a> 定义指针变量</h3><p>即给指针变量分配内存空间。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>数据类型<span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token operator\">&lt;</span>变量名<span class=\"token operator\">></span>；<br></pre></div></figure><ul><li><code>*</code> 是指针类型变量的标志符号。</li><li><code>&lt;变量名&gt;</code> 为指针变量名（构成同标识符）。</li><li><code>&lt;数据类型&gt;</code> 为指针变量所指向变量的数据类型。</li><li><code>&lt;数据类型&gt; *</code> 表示指针类型。</li></ul><p>如：定义一个指向字符类型的指针变量 <code>pch</code> 。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pch<span class=\"token punctuation\">;</span> <span class=\"token comment\">//pch 是一个字符型指针变量</span><br></pre></div></figure><blockquote><p>注意：变量 <code>pch</code> 的数据类型为 <code>char *</code> ，而不是 <code>char</code> 。</p></blockquote><h3 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h3><ol><li>在定义指针变量的同时为指针变量提供初值。<br>如： <code>int a=5,*pta=&amp;a;</code><br>其中 <code>a</code> 的初值为 5， <code>pta</code> 的初值为整型变量 <code>a</code> 的地址。</li></ol><p>这时，pta 与 a 的关联如下：</p><pre class=\"mermaid graph\"><svg id=\"mermaid-1595956463731\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width:149.25px\" viewBox=\"0 0 149.25 144\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M74.625,47L74.625,72L74.625,97\" marker-end=\"url(#arrowhead7)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead7\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"B\" transform=\"translate(74.625,27.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-66.625\" y=\"-19.5\" width=\"133.25\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-56.625,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">&amp;a,指针变量pta</tspan></text></g></g></g><g class=\"node default\" id=\"A\" transform=\"translate(74.625,116.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">变量</tspan></text></g></g></g></g></g></g></svg></pre><p>即，指针变量 <code>pta</code> 指向变量 <code>a</code> ， <code>pta-&gt;a</code> 。</p><ol start=\"2\"><li>使用赋值语句为变量提供初始值<br>上述定义语句： <code>int a=5,*pta=&amp;a;</code><br>与下面语句组的功能是等效的。</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>pta<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先定义变量</span><br>a<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用赋值语句提供初值</span><br>pta<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用赋值语句提供初值</span><br></pre></div></figure><blockquote><p>注意： <code>pta=&amp;a;</code> 不可写成： <code>*pta=&amp;a;</code><br>因为， <code>*pta</code> 并不表示指针变量 <code>pta</code> ，而表示 <code>pta</code> 所指向的变量 <code>a</code> 。<br><strong>指针变量</strong>与<strong>指针变量所指向的变量</strong>是两个完全不同的概念。</p></blockquote><h3 id=\"定义多个\"><a class=\"anchor\" href=\"#定义多个\">#</a> 定义多个</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p2<span class=\"token punctuation\">;</span><br></pre></div></figure><p>定义 2 个双精度型的指针变量 <code>p1</code> 和 <code>p2</code> ，它们只能指向 <code>double</code> 型变量。<br>变量 p1 和 p2 的类型为： <code>double *</code> 。<br>每个指针变量前必须有 <code>*</code> 字符。</p><h3 id=\"单目运算符\"><a class=\"anchor\" href=\"#单目运算符\">#</a> 单目运算符 <code>&amp;</code> <code>*</code></h3><ul><li><code>-</code> 取地址运算符</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&amp;</span><span class=\"token operator\">&lt;</span>变量名<span class=\"token operator\">></span> <span class=\"token comment\">// 获取变量的内存单元地址</span><br></pre></div></figure><ul><li><code>*</code> 指针运算符<br>也称为间接访问运算符</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token comment\">// 表示该指针所指向的变量</span><br><span class=\"token operator\">*</span><span class=\"token operator\">&lt;</span>指针变量名<span class=\"token operator\">></span><br><span class=\"token comment\">// 或</span><br><span class=\"token operator\">*</span><span class=\"token operator\">&lt;</span>指针常量<span class=\"token operator\">></span><br></pre></div></figure><p>如果指针变量 <code>pta</code> 中存放着变量 <code>a</code> 的指针，则 <code>*pta</code> 表示 <code>pta</code> 所指向的变量即变量 <code>a</code> 。这是一种间接访问的表示。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>pta<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span><br><span class=\"token operator\">*</span>pta<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span><br>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>pta<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 在这里，*pta 是表示 pta 所指的对象，即变量 a。</span><br><span class=\"token comment\">// *pta 等同于变量 a</span><br><span class=\"token comment\">// 输出结果：13,13</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>分析各输出项的意义</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//a 的地址 0x23fe4c</span><br>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//a 的值 5</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//p 的地址 0x23fe40</span><br>cout<span class=\"token operator\">&lt;&lt;</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//p 的值 0x23fe4c</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>p<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//p 所指变量的值 5</span><br></pre></div></figure><blockquote><p>注意：</p><ol><li><code>*p</code> 与 <code>*(&amp;a)</code> 等价，即就是 <code>a</code> 。<br><code>p</code> 是一个指针变量，而 <code>&amp;a</code> 是一个指针常量。</li><li>指针变量的值一定是 “地址”；指针变量所指对象的值不一定是 “地址”。</li></ol></blockquote><h3 id=\"使用注意点\"><a class=\"anchor\" href=\"#使用注意点\">#</a> 使用注意点</h3><ul><li>不要访问没有被初始化的指针变量。<br>如：</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><br>cin<span class=\"token operator\">>></span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span><br></pre></div></figure><p>由于 <code>p</code> 变量未初始化， <code>p</code> 中可能存在一个不确定的单元地址，这时的输入将会改变原存储单元的值，造成结果混乱。</p><ul><li>指针变量可以有空值，即该指针变量不指向任何变量。<br>常用符号常量 <code>NULL</code> 表示空指针值，其实 <code>NULL</code> 代表的值是整数 <code>0</code> 。编译系统约定 <code>0</code> 号单元不存放有效数据。</li></ul><h2 id=\"函数与指针\"><a class=\"anchor\" href=\"#函数与指针\">#</a> 函数与指针</h2><p>一个函数在编译时被分配一个入口地址，这个入口地址就称为函数的指针。<br>在 C++ 中， 函数名代表函数的入口地址。</p><h3 id=\"指针作函数的参数\"><a class=\"anchor\" href=\"#指针作函数的参数\">#</a> 指针作函数的参数</h3><p>实现地址传递</p><p>用途如下：</p><ul><li>指针作函数参数，这时形参接受的是实参的地址。函数中通过对指针的间接访问实现参数的按 “引用传递” 功能。</li><li>设置多个指针参数可从函数中带回多个结果值。</li><li>对于传递一块连续的内存区域数据，传递首地址比传递数据值，不仅开销小而且效率高。</li></ul><h4 id=\"例子地址传递\"><a class=\"anchor\" href=\"#例子地址传递\">#</a> 例子：地址传递</h4><p>编写交换两个变量值的函数。</p><ul><li>关键点描述：</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></pre><pre class=\"code\"><span class=\"token comment\">// 实现交换的函数</span><br><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>xp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>yp<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 形参为指针变量</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span><br>\tt <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>xp<span class=\"token punctuation\">;</span><br>\t<span class=\"token operator\">*</span>xp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>yp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 交换时通过间接访问运算符</span><br>\t<span class=\"token operator\">*</span>yp <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 主函数</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"调用前：x=\"</span><span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",y=\"</span><span class=\"token operator\">&lt;&lt;</span>y<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实参为变量的地址。</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"调用后：x=\"</span><span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",y=\"</span><span class=\"token operator\">&lt;&lt;</span>y<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"例子带回函数中的多个值\"><a class=\"anchor\" href=\"#例子带回函数中的多个值\">#</a> 例子：带回函数中的多个值</h4><p>计算一维数组元素的平均值，并能带回数组中的最大值与最小值。</p><p>函数原型设计如下：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">double</span> <span class=\"token function\">faver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>max<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>其中：</p><ul><li><code>s</code> - 一维数组</li><li><code>n</code> - 数组中元素个数</li><li><code>max</code> - 指向最大值</li><li><code>min</code> - 指向最小值</li><li>将平均值作为函数的返回值</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></pre><pre class=\"code\"><span class=\"token keyword\">double</span> <span class=\"token function\">faver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>max<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>min<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 变量定义及初始化</span><br>\t<span class=\"token keyword\">double</span> aver<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token operator\">*</span>max<span class=\"token operator\">=</span><span class=\"token operator\">*</span>min<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\taver<span class=\"token operator\">+=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token operator\">*</span>max<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token operator\">*</span>max<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span>min<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token operator\">*</span>min<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> aver<span class=\"token operator\">/</span>n<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span><span class=\"token number\">76</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">,</span>min<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">double</span> aver<span class=\"token punctuation\">;</span><br>\taver<span class=\"token operator\">=</span><span class=\"token function\">faver</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>max<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用函数</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"max=\"</span><span class=\"token operator\">&lt;&lt;</span>max<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"min=\"</span><span class=\"token operator\">&lt;&lt;</span>min<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"aver=\"</span><span class=\"token operator\">&lt;&lt;</span>aver<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"返回指针的函数\"><a class=\"anchor\" href=\"#返回指针的函数\">#</a> 返回指针的函数</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>定义格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token operator\">&lt;</span>函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>形式参数表<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>语句序列<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><p><code>&lt;类型&gt; *</code> - 为函数的返回值类型，是一个指针类型。</p><h4 id=\"例子返回字符串\"><a class=\"anchor\" href=\"#例子返回字符串\">#</a> 例子：返回字符串</h4><p>编写函数，返回字符串中首次出现的非空格字符开始的字符串。<br>如： <code>&quot; using namespace std;&quot;</code> 返回 <code>&quot;using namespace std;&quot;</code></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></pre><pre class=\"code\"><span class=\"token comment\">// 返回字符指针的函数</span><br><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">noblank</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str<span class=\"token operator\">==</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tstr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s1<span class=\"token operator\">=</span><span class=\"token string\">\" using namespace std;\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s2<span class=\"token punctuation\">;</span><br>\ts2<span class=\"token operator\">=</span><span class=\"token function\">noblank</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>s2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"指向函数的指针变量\"><a class=\"anchor\" href=\"#指向函数的指针变量\">#</a> 指向函数的指针变量</h3><p>使用指向函数的指针变量可以存放函数的指针。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>定义格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>函数返回值类型<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">&lt;</span>指针变量名<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>形参类型表列<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>函数名就是函数的地址，也就是函数的指针。</p><p>例如：定义指向 double 型函数的指针变量，该函数有一个 double 型参数</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">double</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>pf<span class=\"token operator\">=</span>sqrt<span class=\"token punctuation\">;</span> <span class=\"token comment\">//pf 指向一个平方根函数</span><br></pre></div></figure><p>这时，使用 <code>*pf</code> 可以调用该函数。</p><p>如：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\">cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出根号 2 的值，与下方表示式是等价的</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>C++ 中如何通过指针访问数据。可以结合生活中的例子，说明通过指针访问数据的优点。</li></ol><blockquote><p>指针就是变量在内存中的地址，直接通过访问指针来获取变量的值。<br>指针的优点：</p><ol><li>可以提高程序的编译效率和执行速度，使程序更加简洁。</li><li>通过指针，被调用函数可以向调用函数处返回除正常的返回值之外的其他数据，从而实现两者间的双向通信。</li><li>利用指针可以实现动态内存分配。</li></ol></blockquote><ol start=\"2\"><li>请说明函数参数的指针传递 (地址传递) 和值传递的区别。</li></ol><blockquote><p>指针传递传入的是一个指向变量的指针，可以利用这个指针直接控制变量，而值传递只是传入了变量的值，是 “只读的”，不能利用传入的值改变变量的值。</p></blockquote><ol start=\"3\"><li>在函数的形参中使用指向函数的指针的好处是什么？</li></ol><blockquote><p>要传递一个很大的结构体或类对象，但是并不想在调用方法时额外申请一个对象的空间，此时可以使用指针来传递参数，此时函数内部可以通过指针访问该对象。<br>想在方法中修改某个输入参数的值时，此时需要借助于传址操作，传递要修改参数的指针给方法。<br>在实际应用中上面两个场景的目标在 C++ 中都可以使用引用来达成。</p></blockquote><h1 id=\"随堂练习\"><a class=\"anchor\" href=\"#随堂练习\">#</a> 随堂练习</h1><ol><li class=\"quiz\"><p>C++ 中的指针指的是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li class=\"correct\">存储单元的地址</li><li>存在存储单元中数据</li><li>名字叫 <code>pointer</code> 的变量</li><li>变量名的别称</li></ul></li><li class=\"quiz\"><p>若有声明语句 <code>int a, *p=&amp;a;</code> ，则 <code>*p=2015;</code> 的意义是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>给指针变量 <code>p</code> 赋值</li><li>设置指针变量 <code>p</code> 的地址</li><li>相当于 <code>p=p*2015;</code></li><li class=\"correct\">相当于 <code>a=2015;</code></li></ul></li><li class=\"quiz\"><p>下列哪句是指针变量的声明？</p><ul class=\"options\"><li><code>char s;</code></li><li class=\"correct\"><code>char *p;</code></li><li><code>*p=&amp;s;</code></li><li><code>*p='a';</code></li></ul></li><li class=\"quiz\"><p>当函数的形参是指向整型数的指针变量（如 <code>int *p</code> ）时，函数的实参应是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>整型变量</li><li>整型常量</li><li>整型表达式</li><li class=\"correct\">整型变量的地址</li></ul></li><li class=\"quiz\"><p>一个函数，如果返回值是指针 ，那么这个指针应指向 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li class=\"correct\">主调函数中的变量</li><li>函数中的变量</li><li>函数中的指针</li><li>函数的形参</li></ul></li><li class=\"quiz\"><p>下列哪项声明的是指向函数的指针？</p><ul class=\"options\"><li><code>char *p;</code></li><li><code>char a,char &amp;p=a;</code></li><li class=\"correct\"><code>char (*p)(char *,char *);</code></li><li><code>char *p[10];</code></li></ul></li></ol>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-6/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-6/",
            "title": "第06周 问题的模块化求解2：特殊函数",
            "date_published": "2020-04-28T11:26:39.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"递归函数\"><a class=\"anchor\" href=\"#递归函数\">#</a> 递归函数</h2><p>递归函数是直接或间接地调用了自身的函数。<br>利用递归算法可以将一个规模较大的问题转化为规模较小的同类问题来求解。</p><h3 id=\"例子计算一个非负整数n\"><a class=\"anchor\" href=\"#例子计算一个非负整数n\">#</a> 例子：计算一个非负整数 n!</h3><p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>∗</mo><mi>f</mi><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">f{(n)} = \\begin{cases} 1 &amp; n=0 \\\\ n*f{(n-1)} &amp; n&gt;0 \\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em\"><span style=\"top:-3.69em\"><span class=\"pstrut\" style=\"height:3.008em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.25em\"><span class=\"pstrut\" style=\"height:3.008em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em\"><span style=\"top:-3.69em\"><span class=\"pstrut\" style=\"height:3.008em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em\"><span class=\"pstrut\" style=\"height:3.008em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p><ul><li><p>特征：</p><ol><li>定义中包含该函数本身（即递归公式）</li><li>必须有终止条件</li></ol></li><li><p>调用过程包括：</p><ol><li>递推：将原问题不断分解为新的规模更小的问题，逐渐从未知向已知方向推测。</li><li>回归：是从已知条件出发，按递推的逆过程，逐个求值，最后到达递推的开头，解决原问题。</li></ol></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 计算 n!</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span> <br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> n<span class=\"token operator\">*</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接递归调用</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"例子hanoi汉诺塔问题\"><a class=\"anchor\" href=\"#例子hanoi汉诺塔问题\">#</a> 例子：Hanoi 汉诺塔问题</h3><p>有 A,B,C 三根柱子，在 A 柱子上有 n 个大小不同的金盘，大盘在下，小盘在上。<br>要将 A 柱子上的金盘移动到 C 柱子上，每次只能搬动一个金盘，搬动过程中可以借助任何一根柱子暂时存放金盘，但必须满足大盘在下，小盘在上的条件。<br>编程显示盘子移动的过程。n 由用户输入。</p><h4 id=\"算法分析\"><a class=\"anchor\" href=\"#算法分析\">#</a> 算法分析</h4><ul><li><p>如果只有一个盘子，只需一步，直接从 A 柱移动到 C 柱，用 A ➡️ C 表示；</p></li><li><p>如果有 2 个盘子，共需要移动 3 步:</p><ol><li>把 A 柱上的小盘子移动到 B 柱；用 A ➡️ B 表示；</li><li>把 A 柱上的大盘子移动到 C 柱；用 A ➡️ C 表示；</li><li>把 B 柱上的小盘子移动到 C 柱；用 B ➡️ C 表示；</li></ol></li><li><p>如果要将 A 柱上的 n 个盘子（n 值较大），移动到 C 柱上去，必须先把<br>上面的 n-1 个盘子从 A 柱移动到 B 柱上暂存，按这种思路，就可以把 n 个盘子的移动过程分作三大步：</p><ol><li>把 A 柱上面的 n-1 个盘子移动到 B 柱；</li><li>把 A 柱上剩下的一个盘子移动到 C 柱；</li><li>把 B 柱上面的 n-1 个盘子移动到 C 柱；</li></ol></li><li><p>其中 n-1 个盘子的移动过程又可按同样的方法分为三大步，这样就把移动过程转化为一个递归的过程，直到最后只剩下一个盘子，按照移动一个盘子的方法移动，递归结束。</p></li></ul><h4 id=\"算法描述\"><a class=\"anchor\" href=\"#算法描述\">#</a> 算法描述</h4><pre><code>hanoi (n,A,B,C)\n\t如果 n=1, 则\n\t\t显示 A--->C // 将一个金盘直接从 A 移到 C 上\n\t否则\n\t\thanoi (n-1,A,C,B) // 将 n-1 个金盘借助 C 从 A 移到 B 上\n\t\t显示 A--->C\n\t\thanoi (n-1,B,A,C) // 将 n-1 个金盘借助 A 从 B 移到 C 上</code></pre><h4 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> s<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全局变量定义，用来记录总的移动次数</span><br><br><span class=\"token comment\">// 函数 move 将一个盘子从 x 移到 y</span><br><span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> y<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"---->\"</span><span class=\"token operator\">&lt;&lt;</span>y<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\ts<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//s 统计移动的次数</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">//hanoi 函数</span><br><span class=\"token keyword\">void</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 借助 c 将 n-1 个盘子从 a 移到 b</span><br>\t\t<span class=\"token function\">move</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从 a 移到 c</span><br>\t\t<span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 借助 a 将 n-1 个盘子从 b 移到 c</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入盘子数：\"</span><span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"移动\"</span><span class=\"token operator\">&lt;&lt;</span>m<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"个盘子的过程如下：\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"一共移动\"</span><span class=\"token operator\">&lt;&lt;</span>s<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"次。\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"内联函数\"><a class=\"anchor\" href=\"#内联函数\">#</a> 内联函数</h2><p>程序通过一组函数实现是一种好的设计方法。但是函数调用涉及执行时间的开销。</p><p>C++ 提供的内联函数可以减少函数调用的开销。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>定义格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token keyword\">inline</span> <span class=\"token operator\">&lt;</span>函数值类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>形式参数表<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t函数体<br><span class=\"token punctuation\">}</span><br></pre></div></figure><p>对用户来说，内联函数的定义与调用与普通函数的使用方法是相似的。</p><p>作为编译系统，它将程序中调用内联函数的语句（或表达式）用内联函数体中的代码进行替换。这样在执行时就避免了对内联函数的调用，从而减少了因函数调用所增加的时间开销，提高了程序运行的效率。</p><p>使用内联函数可以节省运行时间，但却增加了目标程序的长度。因此一般只将规模很小而使用频繁的简单函数声明为内联函数。</p><h3 id=\"例子内联函数的使用\"><a class=\"anchor\" href=\"#例子内联函数的使用\">#</a> 例子：内联函数的使用</h3><p>编写程序，计算<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>3</mn><mn>2</mn></msup><mo>+</mo><mo>…</mo><mo>+</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">1^2+ 2^2+ 3^2+…+ 10^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8141079999999999em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>，将计算整数平方的功能定义为内联函数。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></pre><pre class=\"code\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tsum<span class=\"token operator\">+=</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"sum=\"</span><span class=\"token operator\">&lt;&lt;</span>sum<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p>编译程序在遇到内联函数调用式 <code>square(i)</code> 时，就用 square 函数体中代码代替 <code>square(i)</code> ，同时将实参代替形参。这样语句 <code>sum+=square(i);</code> 将被替换为 <code>sum+=i*i;</code></p></blockquote><h2 id=\"函数重载\"><a class=\"anchor\" href=\"#函数重载\">#</a> 函数重载</h2><p>函数重载是指在一个程序中，可以定义多个具有相同函数名，<strong>不同参数列表</strong>的函数（至少参数的类型或参数个数或参数类型的顺序不同）。这些的函数被称为重载函数。</p><p>当调用一个重载函数时，编译系统将通过检查函数调用中的实参个数、类型和顺序来选择恰当的函数。</p><p>重载函数通常用于实现功能类似，而所处理的数据类型不同的问题。</p><h3 id=\"例子形参个数相同但类型不同\"><a class=\"anchor\" href=\"#例子形参个数相同但类型不同\">#</a> 例子：形参个数相同，但类型不同</h3><p>使用函数重载编写求一个整数和一个双精度数的绝对值的函数。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">double</span> <span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">double</span> b<span class=\"token operator\">=</span><span class=\"token number\">35.5</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 35.5</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"例子形参类型相同但个数不同\"><a class=\"anchor\" href=\"#例子形参类型相同但个数不同\">#</a> 例子：形参类型相同，但个数不同</h3><p>使用函数重载编写求两个、三个以及四个整数的和的函数</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span><br>\tsum<span class=\"token operator\">=</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> z<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span><br>\tsum<span class=\"token operator\">=</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">+</span>z <span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> z<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span><br>\tsum<span class=\"token operator\">=</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">+</span>z<span class=\"token operator\">+</span>t<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 8</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 15</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 24</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"变量的作用域\"><a class=\"anchor\" href=\"#变量的作用域\">#</a> 变量的作用域</h2><p>变量的作用域是指变量的使用范围。<br>根据变量的使用范围不同，C++ 中的变量被分为局部变量和全局变量。</p><h3 id=\"局部变量\"><a class=\"anchor\" href=\"#局部变量\">#</a> 局部变量</h3><p>在一个函数内或复合语句内定义的变量称为局部变量（函数的形参也属于局部变量）。</p><p>局部变量只允许在其定义的函数或复合语句中使用，离开所在的函数或复合语句后该局部变量将不能使用。</p><ul><li>主函数中定义的变量，也不能在其它函数中使用。</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tsum<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，在函数 f 中，不能使用主函数中的 sum 变量，它属于主函数的局部变量。</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\tsum<span class=\"token operator\">=</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>sum<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ul><li>复合语句中定义的变量，也只能在该复合语句中使用。</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span> <span class=\"token punctuation\">;</span><br>\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\ti<span class=\"token operator\">+=</span>j<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", \"</span><span class=\"token operator\">&lt;&lt;</span>j<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", \"</span><span class=\"token operator\">&lt;&lt;</span>j<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 结果 1,6,3,2,3</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ul><li>for 语句中控制变量的作用域</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">41</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>x<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 错误</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"已找到，下标为：\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span> <br>\t<span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"未找到! \"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><p>编译系统（如：DEVC++），通常将循环语句中定义的变量作为局部变量处理，因此该变量在循环外是不能使用的。</p><blockquote><p>局部变量是在执行该函数或复合语句时自动建立，当该函数或复合语句执行完毕后将自动释放。所以在不同的函数或复合语句中定义同名的局部变量，也不会相互干扰。局部变量也称为自动类型变量。</p></blockquote><h3 id=\"全局变量\"><a class=\"anchor\" href=\"#全局变量\">#</a> 全局变量</h3><p>全局变量说明于所有函数之外，可以为所有函数共同使用。<br>全局变量可以在各个函数之间建立数据的传输通道。</p><h4 id=\"作用域运算符\"><a class=\"anchor\" href=\"#作用域运算符\">#</a> 作用域运算符 <code>::</code></h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义两个全局变量</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">::</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 5</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p>注意：<br>在函数中，当局部变量与全局变量同名时，遵循 “<strong>局部变量优先</strong>” 的原则。<br>这时，如果想使用全局变量，应在变量名前加上作用域运算符 <code>::</code> 即可。</p></blockquote><h4 id=\"extern-声明\"><a class=\"anchor\" href=\"#extern-声明\">#</a> <code>extern</code> 声明</h4><p>全局变量的作用范围是从定义点到整个源程序的结束。在定义点之前，如果<br>其它函数要引用全局变量，可以在该函数中用 <code>extern</code> 对全局变量进行声明。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></pre><pre class=\"code\"><span class=\"token function\">F1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">extern</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全局变量声明</span><br>\t<span class=\"token operator\">&lt;</span>使用全局变量a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span><br><span class=\"token function\">F2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全局变量定义</span><br></pre></div></figure><h4 id=\"优缺点\"><a class=\"anchor\" href=\"#优缺点\">#</a> 优缺点</h4><ul><li><p>使用全局变量，可以增加函数间的直接联系，减少函数定义时的参数。</p></li><li><p>由于全局变量在整个程序运行中始终占用内存，这样，使用全局变量将降低程序的通用性、可靠性和移植性，这是全局变量的负面作用。</p></li></ul><h2 id=\"变量的存储类型\"><a class=\"anchor\" href=\"#变量的存储类型\">#</a> 变量的存储类型</h2><p>不同的变量所分配的存储区域也不同，这就是变量的存储类型。</p><h3 id=\"内存区域\"><a class=\"anchor\" href=\"#内存区域\">#</a> 内存区域</h3><p>C++ 程序运行时使用的内存区域</p><table><tbody><tr><td>堆区</td><td>存放动态分配的数据</td></tr><tr><td>栈区</td><td>存放局部数据，如局部变量</td></tr><tr><td>全局数据区</td><td>存放全局数据和静态数据，如全局变量</td></tr><tr><td>程序代码区</td><td>存放程序的各个函数的代码</td></tr></tbody></table><h3 id=\"四个存储类型\"><a class=\"anchor\" href=\"#四个存储类型\">#</a> 四个存储类型</h3><p>变量的存储类型是变量在内存中存储的方式，根据变量的存储类型，可以知道变量的作用域和生存期。<br>4 个存储类型，分别是 <code>auto</code> （自动类）， <code>register</code> （寄存器类）， <code>static</code> （静态类）和 <code>extern</code> （外部类）。</p><p>在 c++ 中定义一个变量的完整形式是：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>存储类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>数据类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>变量名<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br></pre></div></figure><h4 id=\"自动变量-用auto修饰\"><a class=\"anchor\" href=\"#自动变量-用auto修饰\">#</a> 自动变量 - 用 <code>auto</code> 修饰</h4><p>用 <code>auto</code> 修饰，默认的定义方式</p><p>如：定义一个局部变量 i。<br><code>auto int i;</code> 与 <code>int i;</code> 是相同的。</p><h4 id=\"寄存器变量-用register修饰\"><a class=\"anchor\" href=\"#寄存器变量-用register修饰\">#</a> 寄存器变量 - 用 <code>register</code> 修饰</h4><p>将尽可能存放在 CPU 的寄存器中，以提高程序的运行效率。</p><blockquote><p>注意，仅局部变量和形参可作为寄存器变量。</p></blockquote><h4 id=\"静态变量-用static修饰\"><a class=\"anchor\" href=\"#静态变量-用static修饰\">#</a> 静态变量 - 用 <code>static</code> 修饰</h4><ul><li><p>静态变量分配在全局数据区中，定义时系统将提供默认的初始值。</p></li><li><p>静态变量在编译时分配存储空间，在整个程序执行结束后释放存储空间。所以，静态变量具有全局生命期。</p></li><li><p>根据声明的位置不同，静态变量又分为静态局部变量和静态全局变量。</p></li><li><p>静态局部变量是在 “块” 中定义的静态变量。它具有局部作用域，却有全局生命期。在 “块” 执行结束后，该静态局部变量并不释放（其值依旧存在），以便下次调用时可继续使用。</p></li></ul><h4 id=\"外部变量-用extern修饰\"><a class=\"anchor\" href=\"#外部变量-用extern修饰\">#</a> 外部变量 - 用 <code>extern</code> 修饰</h4><p>如果在一个源文件中定义的全局变量要在其它源文件中使用，则在使用前应该用 <code>extern</code> 进行声明，表示该全局变量不是在本文件中定义的。</p><p>例如：在 1.cpp 文件中定义全局变量<br><code>int Dimension=100;</code><br>如果在 2.cpp 文件中使用，这时，应在 2.cpp 文件中声明<br>如下：<br><code>extern int Dimension;</code></p><blockquote><p>静态全局变量：<br>全局变量可以在其它源文件中使用。<br>如果在全局变量前加上 <code>static</code> 修饰符，则成为静态全局变量。静态全局变量只能在本文件中使用。</p></blockquote><h4 id=\"例子函数调用计数器\"><a class=\"anchor\" href=\"#例子函数调用计数器\">#</a> 例子：函数调用计数器。</h4><p>使用静态局部变量统计某个函数被调用的次数。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></pre><pre class=\"code\"><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部静态变量</span><br>\tn<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"本函数被调用了\"</span><span class=\"token operator\">&lt;&lt;</span>n<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"次\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// 结果 1 2 3 4</span><br></pre></div></figure><p>如果将函数 <code>fun</code> 中语句 <code>static int n=0;</code> 更改为 <code>int n=0;</code> ，程序的运行结果有何变化？</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></pre><pre class=\"code\"><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自动变量</span><br>\tn<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"本函数被调用了\"</span><span class=\"token operator\">&lt;&lt;</span>n<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"次\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// 结果 1 1 1 1</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>编写递归函数，要考虑哪些关键问题？</li></ol><blockquote><p>包含该函数本身（即递归公式）；需有终止条件。</p></blockquote><ol start=\"2\"><li>还有哪些问题可以用递归的方法求解？</li></ol><blockquote><p>斐波那契数列、超时问题、高斯求和也可用递归函数解决。</p></blockquote><ol start=\"3\"><li>什么是函数重载，说说函数重载的好处？</li></ol><blockquote><p>函数重载是一个同名函数完成不同的功能，编译系统在编译阶段通过函数参数个数、参数类型不同，函数的返回值来区分该调用哪一个函数，即实现的是静态的多态性。<br>好处：重载函数通常用来命名一组功能相似的函数，这样做减少了函数名的数量，避免了名字空间的污染，对于程序的可读性有很大的好处。当函数的编写者充分考虑了不同情况下应该运行稍有不同的函数，函数的使用者就不必为这些小细节而烦恼了。</p></blockquote><h1 id=\"随堂练习\"><a class=\"anchor\" href=\"#随堂练习\">#</a> 随堂练习</h1><ol><li class=\"quiz\"><p>递归函数是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>使用了递推公式的函数</li><li class=\"correct\">直接或间接调用自己的函数</li><li>使用了无限循环的函数</li><li>具有返回值的函数</li></ul></li><li class=\"quiz\"><p>内联函数是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>在函数中定义的函数</li><li>定义或声明时，在返回值类型前使用了 <code>const</code> 关键字的函数了</li><li>定义或声明时，在返回值类型前使用了 <code>static</code> 关键字的函数了</li><li class=\"correct\">定义或声明时，在返回值类型前使用了 <code>inline</code> 关键字的函数</li></ul></li><li class=\"quiz\"><p>有函数的声明</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">void</span>  <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>下列哪个函数的声明不能构成该函数的重载。</p><ul class=\"options\"><li class=\"correct\"><code>int f(int a[],int n);</code></li><li><code>void f(int a[]);</code></li><li><code>int f(int a, int b, int c);</code></li><li><code>void f(char a[],int n);</code></li></ul></li><li class=\"quiz\"><p>关于函数的重载，下列哪个说法是正确的？</p><ul class=\"options\"><li>函数名相同的函数构成重载</li><li>参数个数不同的函数构成重载</li><li>参数类型不同的函数构成重载</li><li class=\"correct\">函数名相同，而参数的个数或参数的类型不同的函数构成重载</li></ul></li><li class=\"quiz\"><p>下列程序的执行结果是 <span class=\"gap\"></span> 。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br>\tb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\tc<span class=\"token operator\">++</span>；<br>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ul class=\"options\"><li>7 7 7</li><li class=\"correct\">7 8 9</li><li>7 9 11</li><li>7 10 13</li></ul></li></ol>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-5/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-5/",
            "title": "第05周 问题的模块化求解",
            "date_published": "2020-04-26T09:43:11.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"模块化程序设计\"><a class=\"anchor\" href=\"#模块化程序设计\">#</a> 模块化程序设计</h2><p>编写一个规模较大的程序，可按其功能划分为若干相对独立的模块。</p><p>好处：</p><ul><li>程序开发更易控制</li><li>利于软件重用</li><li>避免重复代码</li><li>容易调试和维护</li></ul><p>每个模块由一个函数实现。</p><h3 id=\"主函数main\"><a class=\"anchor\" href=\"#主函数main\">#</a> 主函数 <code>main()</code></h3><ul><li>C++ 程序仅由一个主函数构成。</li><li>可以由多个子函数组成</li><li>程序的执行顺序：总是从 main 函数开始执行，其中可调用其他子函数，最后在主函数中结束。</li></ul><h3 id=\"库函数标准函数\"><a class=\"anchor\" href=\"#库函数标准函数\">#</a> 库函数（标准函数）</h3><p>由系统提供，可以直接使用，但需包含相应的头文件。如：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span> </span><span class=\"token comment\">// 标准输入 / 输出函数</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span> </span><span class=\"token comment\">// 数学库函数</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span> </span><span class=\"token comment\">// 字符串处理函数</span><br></pre></div></figure><h3 id=\"用户定义函数\"><a class=\"anchor\" href=\"#用户定义函数\">#</a> 用户定义函数</h3><p>程序的主要逻辑</p><h2 id=\"函数的定义\"><a class=\"anchor\" href=\"#函数的定义\">#</a> 函数的定义</h2><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>函数值类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>形式参数表 <span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数头</span><br><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 函数体</span><br>\t<span class=\"token operator\">&lt;</span>语句序列<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"函数值类型\"><a class=\"anchor\" href=\"#函数值类型\">#</a> 函数值类型</h3><p>即函数的返回值类型</p><ol><li>返回简单类型，如： <code>int</code> 、 <code>long</code> 、 <code>float</code> 、 <code>double</code> 、 <code>char</code> 等</li><li>返回结构类型</li><li>返回指针类型</li><li>返回引用类型</li></ol><blockquote><p>如果函数无任何返回值，这时函数的返回值类型应标记为 <code>void</code> 。 <code>void</code> 类型称为无类型或空类型。</p></blockquote><h3 id=\"形式参数表\"><a class=\"anchor\" href=\"#形式参数表\">#</a> 形式参数表</h3><p>即形参表，函数的参数表用于实现函数间的数据联系。</p><ul><li>说明格式： <code>&lt;类型1&gt; &lt;形参名1&gt;, &lt;类型&gt; &lt;形参名2&gt;, ... , &lt;类型n&gt; &lt;形参名n&gt;</code></li></ul><blockquote><p>每个形参必须同时给出形参的类型和名称。<br>如： <code>int max(int a,b)</code> ，作为函数首部定义是错误的。<br>因为形参 b 缺少类型说明符，即使与 a 类型相同，但作为形参说明也不能省略类型符 <code>int</code> 。</p></blockquote><ul><li><p>定义函数时需考虑设置形参，形参的个数及类型根据需要设定。<br>也可以没有参数，称为无参函数。</p></li><li><p>形参可以接收主调函数传递的实参的值。<br>在函数中对形参进行处理，并将处理结果返回到主调函数。</p></li><li><p>形参是在函数调用时分配存储空间，同时接收实参的值。<br>当函数执行结束后，系统将自动释放形参所分配的存储空间。<br>因此，形参属于函数的局部变量，只能在该函数中使用。</p></li><li><p>当形参为引用类型或指针类型时，利用形参不仅可以访问实参的值，还可以改变实参的值。</p></li></ul><h3 id=\"函数体\"><a class=\"anchor\" href=\"#函数体\">#</a> 函数体</h3><p>由 <code>{ }</code> 括起来的语句序列构成，是实现函数功能的主体。</p><ul><li><p>函数的编写过程类似于主函数。</p></li><li><p>在函数中可以调用其它函数。</p></li><li><p>在函数体中，使用 <code>return</code> 语句返回函数执行的结果。</p></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>表达式<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 其中表达式类型应与函数返回值类型一致</span><br></pre></div></figure><ul><li>对于无返回值的函数，也可使用 <code>return;</code> 将控制返回到主调函数。</li></ul><blockquote><p>在一个函数中允许出现多个 <code>return</code> 语句，但在函数执行期间只能有一个语句起作用。<br>在函数体的最后位置，一个无返回值的 <code>return;</code> 语句可以省略。</p></blockquote><h2 id=\"函数的声明\"><a class=\"anchor\" href=\"#函数的声明\">#</a> 函数的声明</h2><ul><li><p>在 C++ 中，程序编译的单位是源程序文件（即源文件），一个由多个函数构成的程序可以组织存放在一个或多个源文件中。</p></li><li><p>在源文件中，函数之间的排列顺序<strong>没有</strong>固定的要求，但要满足 “<strong>先定义后使用</strong>” 的原则。</p></li><li><p>对于标准库函数的使用，在程序开头使用 <code>#include</code> 命令将所需的头文件包含进来即可。</p></li><li><p>对于自定义的函数，要么在调用之前定义，要么在调用之前作<strong>函数声明</strong>。<br>函数的声明是指在函数被调用之前，对函数的类型、名称以及参数等信息所作的说明。<br>格式如下：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>类型<span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>形参<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>类型<span class=\"token number\">2</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>形参<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 或</span><br><span class=\"token operator\">&lt;</span>类型名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>类型<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>类型<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可省略形参</span><br></pre></div></figure><blockquote><p>在形式上就是在函数定义的首部后加分号 <code>;</code> 构成。<br>函数声明说明了函数所采用的形式，称为函数原型。</p></blockquote></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br><span class=\"marked\">2</span><br>3<br>4<br>5<br>6<br><span class=\"marked\">7</span><br>8<br><span class=\"marked\">9</span><br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"marked\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br><span class=\"marked\">\t<span class=\"token keyword\">double</span> <span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br>\t<span class=\"token comment\">// 或者</span><br><span class=\"marked\">\t<span class=\"token comment\">// double Area(double, double, double);</span></span><br>\t<span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入三个边长：\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"面积为：\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">Area</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">double</span> <span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">double</span> p<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">;</span><br>\tp<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>\ts<span class=\"token operator\">=</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回函数的值</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"函数的调用\"><a class=\"anchor\" href=\"#函数的调用\">#</a> 函数的调用</h2><p>函数定义后，并不能自动执行，必须通过函数调用来实现函数的功能。<br>函数调用，即控制执行某个函数。<br>C++ 中，主函数可以调用其它子函数，而其它函数之间也可以相互调用。</p><h3 id=\"一般格式\"><a class=\"anchor\" href=\"#一般格式\">#</a> 一般格式</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>实际参数表<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 有参调用</span><br><span class=\"token comment\">// 或</span><br><span class=\"token operator\">&lt;</span>函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 无参调用</span><br></pre></div></figure><ul><li><code>&lt;函数名&gt;</code> 为要使用的函数的名字。</li><li><code>&lt;实际参数表&gt;</code> 是以逗号分隔的实参列表，必须放在一对圆括号中。</li><li><code>&lt;实参表&gt;</code> 与 <code>&lt;形参表&gt;</code> 中参数的个数、类型和次序应保持一致。</li><li>当调用无参函数时，函数名后的圆括号不能省略。</li></ul><h3 id=\"实参的几种形式\"><a class=\"anchor\" href=\"#实参的几种形式\">#</a> 实参的几种形式</h3><p>形参为简单类型变量，对应的实参可以是：常量，变量及表达式。<br>形参为数组，对应的实参为数组（名）。<br>形参为结构类型，对应的实参为结构类型变量。</p><p>调用已知三边求三角形面积的函数 Area。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">double</span> <span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数声明</span><br><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 常量作实参</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">Area</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 变量作实参</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">Area</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表达式作实参</span><br></pre></div></figure><p>函数调用出现在表达式中（适于有返回值的函数调用形式）<br>如，函数 <code>max()</code> 求两个数的最大值。函数原型如下：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">float</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>该函数有返回值，调用时应出现在表达式中。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>判断以下语句完成的功能</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\">c<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数调用出现在赋值运算符右边的表达式中</span><br>d<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 函数调用同时出现在实参表达式中</span><br>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出一个函数值</span><br></pre></div></figure><h3 id=\"嵌套调用\"><a class=\"anchor\" href=\"#嵌套调用\">#</a> 嵌套调用</h3><p>函数的嵌套调用是指在调用一个函数的过程中，被调用的函数又调用了另一个函数。</p><h2 id=\"参数的传递\"><a class=\"anchor\" href=\"#参数的传递\">#</a> 参数的传递</h2><p>三种方式：</p><h3 id=\"值传递\"><a class=\"anchor\" href=\"#值传递\">#</a> 值传递</h3><p>调用时，将实参的值传递给对应的形参，这就是值传递。<br>在值传递过程中，改变形参的值，并不会改变实参的值。</p><ul><li><p>好处：<br>减少函数之间的数据依赖，增强了函数自身的独立性。</p></li><li><p>注意：<br>函数的形参声明为简单类型或结构类型变量，实参与形参将采用值方式传递。</p></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></pre><pre class=\"code\"><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span><br>\ttmp <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><br>\tx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span><br>\ty <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Before exchange：a= \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",b= \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// a=1, b=2</span><br>\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 独立语句调用</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"After exchange：a= \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",b= \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// a=1, b=2</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p>调用前实参 a,b 有自己的存储空间，并有初值。<br>调用函数时，为形参 x，y 分配存储空间，并接收实参的值。<br>返回到主函数，这时实参 a 和 b 的值没有改变。<br>函数中，是对 x 与 y 值进行交换。<br>执行结束后，x 与 y 将自动释放。</p></blockquote><h3 id=\"引用传递\"><a class=\"anchor\" href=\"#引用传递\">#</a> 引用传递</h3><p>引用是一种特殊的变量，它被认为是一个变量的别名。</p><h4 id=\"引用的定义\"><a class=\"anchor\" href=\"#引用的定义\">#</a> 引用的定义</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>数据类型<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">&lt;</span>引用名<span class=\"token operator\">>=</span><span class=\"token operator\">&lt;</span>目标变量名<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br></pre></div></figure><p><code>&amp;</code> 为引用（变量）的标志符号， <code>&lt;引用名&gt;</code> 是一个标识符。<br><code>&lt;数据类型&gt;</code> 为 <code>&lt;目标变量&gt;</code> 的类型。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><br><span class=\"token comment\">//a 是一个整型变量，b 是一个引用整型变量 a 的引用，</span><br><span class=\"token comment\">// 即 b 是 a 变量的一个别名。</span><br><span class=\"token comment\">// 这时，使用 a 与使用 b 是等价的。</span><br></pre></div></figure><h4 id=\"使用说明\"><a class=\"anchor\" href=\"#使用说明\">#</a> 使用说明</h4><ul><li>定义一个引用，其实是为目标变量起一个别名。</li><li>引用并不分配独立的内存空间，它与目标变量共用其内存空间。</li><li>定义一个引用（变量）时，如果该引用不是用作函数的参数或返回值，则必须提供该引用的初值（即必须提供引用的目标变量名）。</li><li>使用引用与使用目标变量效果是相同的。</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出变量的地址</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出变量的值</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"引用的传递\"><a class=\"anchor\" href=\"#引用的传递\">#</a> 引用的传递</h4><ul><li><p>为实现引用传递，这时函数的形参应定义为<strong>引用类型变量</strong>，而对应的实参应为变量名，该变量将作为引用的目标变量名。</p></li><li><p>函数调用时，作为形参的引用变量并不分配新的内存空间，它将作为实参变量的别名与其共用内存。</p></li><li><p>使用引用参数可以直接操作实参变量，从而能够实现通过修改形参的值而达到修改对应实参值的目的。</p></li><li><p>通过设置多个引用参数，可以从函数中带回多个结果值。</p></li><li><p>注意：引用作为函数形参，其引用的目标变量默认为调用该函数时对应的实参变量名，所以，在定义函数时，对于引用类型参数<strong>不必</strong>提供引用的初值。</p></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例子：使用引用传递在被调函数中改变实参的值</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></pre><pre class=\"code\"><span class=\"token comment\">//x,y 为引用参数，x 引用 a，y 引用 b</span><br><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span><br>\ttmp <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><br>\tx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span><br>\ty <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// 交换 x,y 就是交换 a,b</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Before exchange：a= \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",b= \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// a=1, b=2</span><br>\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 独立语句调用</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"After exchange：a= \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",b= \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token comment\">// a=2, b=1</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"指针传递\"><a class=\"anchor\" href=\"#指针传递\">#</a> 指针传递</h3><h2 id=\"为形参指定默认值\"><a class=\"anchor\" href=\"#为形参指定默认值\">#</a> 为形参指定默认值</h2><p>C++ 语言允许在函数定义时为形参指定默认参数值。这样，在函数调用时，如果没有提供实参，则形参自动使用其默认值。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 形参的默认值为 0</span><br><br><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 未提供实参值，形参 x,y 使用默认值 0</span><br><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 形参 x,y 将使用实参的值 2 和 4</span><br><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 形参 x 接收 1，而 y 使用 0</span><br></pre></div></figure><p>可以对部分形参定义默认值。<br>这时默认值应出现在从右到左的连续若干个形参中。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 函数原型正确</span><br><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数原型正确</span><br><br><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 函数原型错误</span><br><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 函数原型错误</span><br></pre></div></figure><blockquote><p>指定参数的默认值可以在函数定义中进行，也可以在函数原型中进行。<br>通常写在函数名在程序中第一次出现的位置。</p></blockquote><h2 id=\"数组作为函数参数\"><a class=\"anchor\" href=\"#数组作为函数参数\">#</a> 数组作为函数参数</h2><h3 id=\"一维数组的传递\"><a class=\"anchor\" href=\"#一维数组的传递\">#</a> 一维数组的传递</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>声明格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>数组名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br></pre></div></figure><p>其中， <code>[]</code> 中可以省略数组的长度值。（可认为形参数组与实参数组长度相同）<br>对应的实参应为同类型的一维数组名。（仅用数组名）<br>为了使函数知道需要处理的数组元素的个数，通常给函数再传递一个表示元素个数的整型数。</p><h4 id=\"例子元素之和\"><a class=\"anchor\" href=\"#例子元素之和\">#</a> 例子：元素之和</h4><p>一维数组名作为函数的参数。编写函数，计算一个整型数组中从第 m 个元素（m 从 0 开始）开始的 n 个元素之和。</p><ul><li><p>函数设计：<br>函数原型： <code>int fun(int b[],int m,int n);</code><br>功能：计算数组 b 中从第 m 个元素开始的 n 个元素之和。</p></li><li><p>主函数设计：<br>定义并初始化一个整型数组 a。<br>测试 1： <code>fun(a,0,10);//求从第0个元素开始的10个元素之和</code><br>测试 2： <code>fun(a,3,5); //求从第3个元素开始的5个元素之和</code></p></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token operator\">+</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">+</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\tx<span class=\"token operator\">=</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tx<span class=\"token operator\">=</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"例子元素排序\"><a class=\"anchor\" href=\"#例子元素排序\">#</a> 例子：元素排序</h4><p>编写一个函数 sort，对 n 个元素的一维整型数组 b 进行从小到大排序。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>函数定义</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//b 为一维数组，n 为元素的个数</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 选用一种排序方法对 n 个元素的 b 数组排序（代码略）</span><br>\t<span class=\"token comment\">// 对 b 数组排序，实际就是对实参数组排序</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>主函数中的函数调用语句</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 调用 sort 函数，对 10 个元素的整型数组 a 进行排序</span><br><span class=\"token comment\">// 函数调用后，并输出排序结果，即输出 a 数组中各个元素值。</span><br></pre></div></figure><h3 id=\"二维数组的传递\"><a class=\"anchor\" href=\"#二维数组的传递\">#</a> 二维数组的传递</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>声明格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>数组名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>列数<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><br></pre></div></figure><p>其中， <code>&lt;列数&gt;</code> 为常数，不能省略，行数可缺省。<br>调用时的实参应为同类型的二维数组名。<br>且用作实参的二维数组，其列数必须与形参中的 <code>&lt;列数&gt;</code> 相同。</p><h4 id=\"例子矩阵转置\"><a class=\"anchor\" href=\"#例子矩阵转置\">#</a> 例子：矩阵转置</h4><p>二维数组名作参数。编写一个函数，将 N 阶方阵转置（N＜10）</p><ul><li>函数设计</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">void</span> <span class=\"token function\">transmat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 对 a 数组中前 n 行 n 列矩阵元素转置</span><br></pre></div></figure><ul><li>主函数设计<br>定义一个 10 行 10 列的大数组 x，元素类型为整型；<br>键盘输入一个整数 n (n&lt;10)；<br>键盘输入一个 n×n 的方阵数据，并存放到 x 数组的前 n 行 n 列元素中。<br>函数调用语句为： <code>transmat(x,n);</code><br>按 n 行 n 列输出转置矩阵。</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br></pre><pre class=\"code\"><span class=\"token keyword\">void</span> <span class=\"token function\">tranmat</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tt<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span><br><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"输入n(n&lt;10):\"</span><span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"输入\"</span><span class=\"token operator\">&lt;&lt;</span>n<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"行\"</span><span class=\"token operator\">&lt;&lt;</span>n<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"列元素:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcin<span class=\"token operator\">>></span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token function\">tranmat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"转置矩阵结果如下：\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"结构体变量作函数参数\"><a class=\"anchor\" href=\"#结构体变量作函数参数\">#</a> 结构体变量作函数参数</h2><p>实参为结构体类型变量<br>形参为同类型的结构变量<br>传递方式为值传递</p><blockquote><p>在函数调用时，系统首先为形参变量（即结构变量）分配存储空间，接着将实参变量（结构变量）各成员值传递给形参变量的各个成员。对形参成员的修改不会影响实参成员值的变化。</p></blockquote><h3 id=\"例子输出结构变量成员\"><a class=\"anchor\" href=\"#例子输出结构变量成员\">#</a> 例子：输出结构变量成员</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></pre><pre class=\"code\">定义一个结构体类型：<br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">student</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> stno<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>student s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出</span><br><span class=\"token punctuation\">{</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span>stno<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span>name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>s<span class=\"token punctuation\">.</span>age<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// 主函数</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tstudent stu<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Li\"</span> <span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实参为结构变量</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><ol><li>什么时候会使用没有参数或没有返回值的函数？</li></ol><blockquote><p>只起到处理的作用（输入、输出、赋值等）时，没有参数或没有返回值，用来起过渡、衔接等作用，或者空函数留待未来完善。</p></blockquote><ol start=\"2\"><li>什么时候需要函数的声明，函数的声明和定义有什么区别？</li></ol><blockquote><p>声明是不开辟内存的，仅仅告诉编译器，要声明的部分存在，要预留一点空间。定义则需要开辟内存。</p><ol><li>函数的定义是一个完整的函数单元：<br>包含函数类型、函数名、形参及形参类型、函数体等。<br>在程序中，函数的定义只能有一次。<br>函数首部与花括号间不加分号。</li><li>函数声明只是对编译系统的一个说明：<br>函数声明是对定义的函数的返回值的类型说明，以通知系统在本函数中所调用的函数是什么类型。<br>不包含函数体（或形参）。<br>调用几次该函数就应在各个主调函数中做相应声明。<br>函数声明是一个说明语句，必须以分号结束。</li></ol></blockquote><ol start=\"3\"><li>什么样的函数只能单独作为语句调用，不能放在表达式中？</li></ol><blockquote><p>无返回值函数。</p></blockquote><ol start=\"4\"><li>什么时候需要引用传递？</li></ol><blockquote><p>需要返回多个结果；节省内存，提高运行速度；改变实参的值时。</p></blockquote><ol start=\"5\"><li>为什么带默认值的参数要放在不带默认值的参数右边（不能交叉）。</li></ol><blockquote><p>因为在函数体内被传递的实参按从左向右依次初始化，如果带默认值的参数放在不带默认值的参数左边，传递少了或不传递则右边的形参没有被初始化，这是错误的，也就会失去了默认值的可不传递参数特性，所以带默认值的参数要放在不带默认值的参数右边。</p></blockquote><ol start=\"6\"><li>形参是二维数组时，为什么列的大小不能省略？</li></ol><blockquote><p>数组是按行线性存入数据的，指定列号，相当于数组的行数和列数同时确定，如果不告诉编译器列号，会导致数据存储混乱，这和定义多维数组，一维长度可以没有，但是其他维长度必须有，道理是一样的。</p></blockquote><ol start=\"7\"><li>如果想传递一个一维结构体数组给函数，形参和实参应是什么样的？</li></ol><blockquote><p>一维数组作为形参的声明格式： <code>&lt;函数类型&gt; &lt;函数名&gt;(结构体类型 形参数组名[])</code><br>其中， <code>[]</code> 中可以省略数组的长度值。（可以认为形参数组与实参数组长度相同。） 仅用数名时，对应的实参应为同一类型的一维数组名。<br>实参为 <code>&lt;函数名&gt;(结构体数组名)</code></p></blockquote><h1 id=\"随堂练习\"><a class=\"anchor\" href=\"#随堂练习\">#</a> 随堂练习</h1><ol><li class=\"quiz\"><p>关于 C++ 函数的说法哪个是不正确的？</p><ul class=\"options\"><li>使用函数可以降低程序的复杂程度</li><li class=\"correct\">一个 C++ 程序可以不使用函数</li><li>函数必须有函数名</li><li>函数可以使得软件的开发和维护更容易</li></ul></li><li class=\"quiz\"><p>关于函数的定义不正确的是哪项？</p><ul class=\"options\"><li>函数可以没有返回值</li><li>函数可以没有参数</li><li class=\"correct\">函数体写在一对大括号中，当函数体只有一行语句时，大括号可以省略</li><li>函数的形参是局部变量，只能在函数中使用</li></ul></li><li class=\"quiz\"><p>关于用户自定义函数的使用，下列哪个说法是正确的？</p><ul class=\"options\"><li>函数在调用前必须先定义</li><li>函数在使用前必须先声明</li><li class=\"correct\">函数在使用前必须先定义或声明</li><li>有了函数的定义，可以不声明</li></ul></li><li class=\"quiz\"><p>关于函数的调用，下列哪项说法是正确的？</p><ul class=\"options\"><li>函数的形参和实参是通过变量的名字结合的，所以顺序不要求一致，但个数必须一致。</li><li class=\"correct\">函数的实参可以是常量、变量或表达式。</li><li>如果函数的实参是变量，前面也必须写出类型名。</li><li>函数的调用只能出现在表达式中，不能单独加分号构成语句。</li></ul></li><li class=\"quiz\"><p>关于函数调用的值传递，下列哪项是正确的？</p><ul class=\"options\"><li class=\"correct\">值传递的传输方向是单向的，从主调函数到被调函数。</li><li>值传递的传输方向是单向的，从被调函数到主调函数。</li><li>值传递的数据传输方向是双向的。</li><li>值传递时，实参和形参使用相同的存储空间。</li></ul></li><li class=\"quiz\"><p>关于函数调用的引用传递，下列哪项是正确的？</p><ul class=\"options\"><li>引用传递的传输方向是单向的，从主调函数到被调函数。</li><li>引用传递的传输方向是单向的，从被调函数到主调函数。</li><li>引用传递的实参和形参使用相同的变量名。</li><li class=\"correct\">引用传递时，实参和形参使用相同的存储空间。</li></ul></li><li class=\"quiz\"><p>C++ 中关于有默认值的形参，正确的描述是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>设置默认形参值时，可以在函数的声明和定义中同时设置默认值。</li><li>只能在函数定义时设置默认形参值。</li><li class=\"correct\">应该从右边的形参开始依次向左设置默认形参值。</li><li>所有参数必须全部设置默认值。</li></ul></li><li class=\"quiz\"><p>主函数中有声明语句</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>下列哪组实参和形参的对应是正确的？</p><ul class=\"options\"><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li><li class=\"correct\"><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li></ul></li><li class=\"quiz\"><p>有结构体 STU 如下：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">STU</span><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">char</span> number<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>stu 是 STU 类型的变量。<br>下列实参和形参的结合哪项是正确的？</p><ul class=\"options\"><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span> stu <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">void</span>  <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>STU zhang<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><br></pre></div></figure></li><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>STU zhang<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>STU zhang<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li><li class=\"correct\"><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure></li></ul><blockquote><p><span class=\"mistake\">C</span></p></blockquote></li></ol>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-4/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-4/",
            "title": "第04周 复杂信息的表达与处理",
            "date_published": "2020-04-24T12:53:21.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2><h3 id=\"一维数组\"><a class=\"anchor\" href=\"#一维数组\">#</a> 一维数组</h3><h4 id=\"定义方法\"><a class=\"anchor\" href=\"#定义方法\">#</a> 定义方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>标识符<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>大小<span class=\"token operator\">-</span>数组元素的个数<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token keyword\">double</span> length<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> M<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> score<span class=\"token punctuation\">[</span>N<span class=\"token operator\">*</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h4 id=\"初始化方法\"><a class=\"anchor\" href=\"#初始化方法\">#</a> 初始化方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>数组名<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>常量表达式<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>表达式<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>表达式<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token comment\">// 全部元素</span><br><span class=\"token keyword\">double</span> room<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">401</span><span class=\"token punctuation\">,</span><span class=\"token number\">402</span><span class=\"token punctuation\">,</span><span class=\"token number\">403</span><span class=\"token punctuation\">,</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span><span class=\"token number\">405</span><span class=\"token punctuation\">,</span><span class=\"token number\">606</span><span class=\"token punctuation\">,</span><span class=\"token number\">407</span><span class=\"token punctuation\">,</span><span class=\"token number\">408</span><span class=\"token punctuation\">,</span><span class=\"token number\">409</span><span class=\"token punctuation\">,</span><span class=\"token number\">411</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 部分元素</span><br><span class=\"token keyword\">double</span> average<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">21.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2012.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7.5</span><span class=\"token operator\">+</span><span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h4 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>数组名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>下标<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><br></pre></div></figure><blockquote><p>下标范围是 0 ~ 元素个数 - 1</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br></pre><pre class=\"code\"><span class=\"token comment\">// 定义数组</span><br><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>width<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 给数组元素赋值，正确</span><br>length<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 数组元素参与运算，正确</span><br>sum<span class=\"token operator\">=</span>length<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 输入数组元素，正确</span><br>cin<span class=\"token operator\">>></span>length<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 输出数组元素，正确</span><br>cout<span class=\"token operator\">&lt;&lt;</span>length<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 对整型数组整体输入，错误</span><br>cin<span class=\"token operator\">>></span>length<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 数组下标超界，错误</span><br>cin<span class=\"token operator\">>></span>length<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 数组整体赋值，错误</span><br>width<span class=\"token operator\">=</span>length<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 整型数组整体输出，错误</span><br>cout<span class=\"token operator\">&lt;&lt;</span>length<span class=\"token punctuation\">;</span><br></pre></div></figure><h4 id=\"字符数组与字符串\"><a class=\"anchor\" href=\"#字符数组与字符串\">#</a> 字符数组与字符串</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>类型名<span class=\"token punctuation\">)</span><br><span class=\"token comment\">// 或者</span><br><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>变量名<span class=\"token punctuation\">)</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></pre><pre class=\"code\"><span class=\"token comment\">// 字符数组</span><br><span class=\"token keyword\">char</span> chr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>chr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//a=5</span><br><br><span class=\"token comment\">// 定义一个字符数组，并使用字符串进行初始化</span><br><span class=\"token keyword\">char</span> chr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Hello\"</span><br><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>chr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//b=6</span><br><span class=\"token comment\">// 因为除了 Hello 5 个字符外，还有一个 \\0 串结束符</span><br></pre></div></figure><h4 id=\"例子将单词中小写字母转换成大写\"><a class=\"anchor\" href=\"#例子将单词中小写字母转换成大写\">#</a> 例子：将单词中小写字母转换成大写</h4><p>编写程序，用户从键盘输入一个小写字母组成的英文单词，将其转换为大写，然后显示到屏幕上。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义一维数组，用来存放单词的字母，假设字母数量不超过 9 个</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示数组下标的当前值</span><br>\tcin<span class=\"token operator\">>></span>str<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 整体输入一维字符型数组</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果当前不是表示结束的字符，则进入循环体</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tstr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字母大小写转换，32 是大小写字母 ASCII 码值的差</span><br>\t\ti<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调整数组下标值</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>str<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 整体输出一维字符数组</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"二维数组\"><a class=\"anchor\" href=\"#二维数组\">#</a> 二维数组</h3><p>从逻辑结构讲，类似一个二维表格，由行标和列标指明数组元素在表格中的位置。<br>在内存中，按一维数组来存放，即按行顺序在内存中分配存储单元，占据一片连续的存储单元。</p><h4 id=\"定义方法-2\"><a class=\"anchor\" href=\"#定义方法-2\">#</a> 定义方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>数组名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>常量表达式<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>常量表达式<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 常量表达式均为整型，分别表行数和列数</span><br><span class=\"token comment\">// 数组个数 = 常量表达式 1 * 常量表达式 2</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> score<span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总共包含 60*3=180 个元素</span><br><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>M<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">double</span> point<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br></pre></div></figure><blockquote><p>行标列标不能是变量，必须是常量表达式，这种定义方式又称为<strong>静态定义</strong>。</p></blockquote><h4 id=\"初始化方法-2\"><a class=\"anchor\" href=\"#初始化方法-2\">#</a> 初始化方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>数组名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>行数<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>列数<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>表达式<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>表达式<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></pre><pre class=\"code\"><span class=\"token comment\">// 全部元素</span><br><span class=\"token keyword\">int</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <br><span class=\"token comment\">// 明确说明了行数和列数</span><br><br><span class=\"token keyword\">int</span> A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 只说明列数，但可以根据初始化值的个数和列数，确定行数</span><br><br><span class=\"token keyword\">int</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 初始化值添加了花括号，可以明确看出每行缩包含的元素</span><br><br><span class=\"token comment\">// 部分元素</span><br><span class=\"token keyword\">int</span> B<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 只对第一行赋值</span><br><br><span class=\"token keyword\">int</span> B<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 只对所有行中的前两列的元素赋值</span><br></pre></div></figure><h4 id=\"使用方法-2\"><a class=\"anchor\" href=\"#使用方法-2\">#</a> 使用方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>数组名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>行标<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>列标<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><br><span class=\"token comment\">// 行标的范围是 0 ~ 行数 - 1</span><br><span class=\"token comment\">// 列标的范围是 0 ~ 列数 - 1</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下标最小元素赋值，即第一个数组元素</span><br>A<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下标最大元素赋值，即最后一个数组元素</span><br></pre></div></figure><blockquote><p>下标不能越界</p></blockquote><h4 id=\"问题一维数组与二维数组的对应关系\"><a class=\"anchor\" href=\"#问题一维数组与二维数组的对应关系\">#</a> 问题：一维数组与二维数组的对应关系</h4><p>如果使用一维数组 <code>a[M*N]</code> 和二维数组 <code>b[M][N]</code> 表示同一矩阵，则 <code>b[i][j]</code><br>与 a 中哪个下标的元素对应？</p><table><tbody><tr><td>1</td><td>2</td><td>3</td></tr><tr><td>4</td><td>5</td><td>6</td></tr></tbody></table><p><code>b[0][0] == a[0]</code><br><code>b[0][1] == a[1]</code><br><code>b[0][2] == a[2]</code><br><code>b[1][0] == a[3]</code><br><code>b[1][1] == a[4]</code><br><code>b[1][2] == a[5]</code></p><p><code>b[i][j]=a[i*N+j]</code></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 行数 m、列数 n</span><br>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>m<span class=\"token operator\">*</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 和 j 为循环变量，与数组下标有关，x 是数组元素的值，初始化为 1</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环给数组 a 赋值</span><br>\t<span class=\"token punctuation\">}</span><br>\tx<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环给数组 b 赋值</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>n<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"例子月份转换\"><a class=\"anchor\" href=\"#例子月份转换\">#</a> 例子：月份转换</h4><p>编写程序，将用户输入的阿拉伯数字转换成对应月份的英文单词。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> month<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"January\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"February\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"March\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"April\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"May\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"June\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"July\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"August\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"September\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"October\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"November\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"December\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 二维数组定义和初始化</span><br>\t<span class=\"token comment\">// 行标表示英文月份的序号，共 12 个</span><br>\t<span class=\"token comment\">// 列标表示英文月份中字母出现的位置，因为单词最长有 9 个字母，因此长度定义为 10</span><br>\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>m<span class=\"token operator\">&lt;</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 输入值在 1-12 之间</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>month<span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 二维数组使用</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"The month is wrong\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"多维数组\"><a class=\"anchor\" href=\"#多维数组\">#</a> 多维数组</h3><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类似 5 行 4 列 3 层的魔方结构</span><br><span class=\"token keyword\">double</span> B<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类似 3 行 3 列 3 层的魔方结构</span><br></pre></div></figure><p>存储数据时，按照先层后行再列的方式：<br>第 0 层第 0 行第 0 列开始，完成 1 行存储后，存储第 2 行，直到该层存储完毕后，开始第 1 层的存储。</p><h2 id=\"结构体\"><a class=\"anchor\" href=\"#结构体\">#</a> 结构体</h2><p>可以用来表示某事物的多个特征，并保证多个特征之间的关系。</p><h3 id=\"结构体类型\"><a class=\"anchor\" href=\"#结构体类型\">#</a> 结构体类型</h3><h4 id=\"定义方法-3\"><a class=\"anchor\" href=\"#定义方法-3\">#</a> 定义方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token operator\">&lt;</span>结构体名<span class=\"token operator\">></span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>类型名<span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>成员名表<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义方法与普通变量相同</span><br>\t<span class=\"token operator\">&lt;</span>类型名<span class=\"token number\">2</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>成员名表<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><br>\t<span class=\"token operator\">&lt;</span>类型名n<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>成员名表n<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><blockquote><p>同一结构体的成员不能同名，但可与结构体外的其它变量同名</p></blockquote><h3 id=\"结构体变量\"><a class=\"anchor\" href=\"#结构体变量\">#</a> 结构体变量</h3><p>定义好结构体变量后，就可以声明该结构体的变量。</p><h4 id=\"声明方法\"><a class=\"anchor\" href=\"#声明方法\">#</a> 声明方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token operator\">&lt;</span>结构体名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>变量列表<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br></pre></div></figure><h4 id=\"声明时机\"><a class=\"anchor\" href=\"#声明时机\">#</a> 声明时机</h4><ul><li>定义结构体类型后声明</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> today<span class=\"token punctuation\">;</span><br></pre></div></figure><ul><li>定义结构体类型同时声明，可以省略结构体名</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> today<span class=\"token punctuation\">;</span><br><span class=\"token comment\">// Date 为结构体名称，可以省略</span><br></pre></div></figure><h4 id=\"初始化方法-3\"><a class=\"anchor\" href=\"#初始化方法-3\">#</a> 初始化方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token operator\">&lt;</span>结构体名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>变量<span class=\"token number\">1</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>数据列表<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>变量<span class=\"token number\">2</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>数据列表<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> today<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2015</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">//year, month, day 将分别被初始化为 2015,2,20</span><br></pre></div></figure><h4 id=\"使用方法-3\"><a class=\"anchor\" href=\"#使用方法-3\">#</a> 使用方法</h4><p>使用成员运算符 / 分量运算符 <code>.</code></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>结构体名<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>成员名<span class=\"token operator\">></span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\">today<span class=\"token punctuation\">.</span>year<span class=\"token operator\">=</span><span class=\"token number\">2015</span> <span class=\"token comment\">// 对结构体变量 today 的成员 year 赋值</span><br>today<span class=\"token punctuation\">.</span>month<span class=\"token operator\">=</span><span class=\"token number\">2</span><br>today<span class=\"token punctuation\">.</span>day<span class=\"token operator\">=</span><span class=\"token number\">20</span><br></pre></div></figure><h4 id=\"所占内存大小\"><a class=\"anchor\" href=\"#所占内存大小\">#</a> 所占内存大小</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>类型名<span class=\"token punctuation\">)</span><br><span class=\"token comment\">// 或者</span><br><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>变量名<span class=\"token punctuation\">)</span><br></pre></div></figure><blockquote><p>为了提高内存的访问效率，大多数计算机系统在存储数据时，都是从偶地址开始的。<br>字符和字符串所占的内存空间，是按机器字长对齐的，即按边界对齐存储。</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">SHAPE1</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">char</span> name<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span> <span class=\"token keyword\">char</span> classification<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SHAPE1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//4*4=16</span><br><span class=\"token comment\">// 两个 char 与两个 int 对齐，每个 int 占 4 个字节</span><br><br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">SHAPE2</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">char</span> name<span class=\"token punctuation\">;</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span> <span class=\"token keyword\">char</span> classification<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SHAPE2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//8*2+4*2=24</span><br><span class=\"token comment\">// 前一个 char 与 double 对齐，占用 8 个字节，后一个 char 与 int 对齐，占用 4 个字节</span><br><br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">SHAPE3</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">char</span> name<span class=\"token punctuation\">;</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> classification<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SHAPE3<span class=\"token punctuation\">)</span> <span class=\"token comment\">//8*4=32</span><br><span class=\"token comment\">// 两个 char 与两个 double 对齐，每个 double 占 8 个字节</span><br></pre></div></figure><h3 id=\"结构体数组\"><a class=\"anchor\" href=\"#结构体数组\">#</a> 结构体数组</h3><p>以一维结构体数组举例</p><h4 id=\"定义方法-4\"><a class=\"anchor\" href=\"#定义方法-4\">#</a> 定义方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token operator\">&lt;</span>结构体名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>结构体数组名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>数组大小<span class=\"token operator\">=</span>元素个数<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> manydates<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br></pre></div></figure><h4 id=\"初始化方法-4\"><a class=\"anchor\" href=\"#初始化方法-4\">#</a> 初始化方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token operator\">&lt;</span>结构体名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>结构体数组名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>数组大小<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>结构体类型值列表<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> manydates<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2015</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2015</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2015</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 该结构体包含 30 个元素，仅给 0、1、2 号元素赋值。</span><br><br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span> manydates<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2015</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2015</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2015</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 省略下标，该结构体仅包含 3 个元素。</span><br></pre></div></figure><h4 id=\"使用方法-4\"><a class=\"anchor\" href=\"#使用方法-4\">#</a> 使用方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token operator\">&lt;</span>结构体数组名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>整型表达式<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><br></pre></div></figure><p>如需使用结构体成员，则使用成员运算符 <code>.</code> 。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\">manydates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>year<span class=\"token operator\">=</span><span class=\"token number\">2015</span><br>manydates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>month<span class=\"token operator\">=</span><span class=\"token number\">2</span><br>manydates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>day<span class=\"token operator\">=</span><span class=\"token number\">20</span><br></pre></div></figure><blockquote><p>下标范围不能越界。</p></blockquote><h3 id=\"例子简易通讯录\"><a class=\"anchor\" href=\"#例子简易通讯录\">#</a> 例子：简易通讯录</h3><p>编写程序，按照通讯录格式录入联系人信息并按照输入的反序显示联系人信息。<br>通讯录内容要求：</p><ul><li>姓名</li><li>性别</li><li>联系电话</li><li>联系电话</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// 定义结构体类型 telelist、结构体数组 list1 包含 3 个元素</span><br>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">telelist</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> num1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">char</span> num2<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span> list1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// 结构体数组使用</span><br>\t\t<span class=\"token comment\">// 循环输入结构体成员值</span><br>\t\tcin<span class=\"token operator\">>></span>list1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">>></span>list1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sex<span class=\"token operator\">>></span>list1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>num1<span class=\"token operator\">>></span>list1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>num2<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 反序</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>list1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">&lt;&lt;</span>list1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sex<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">&lt;&lt;</span>list1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>num1<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">&lt;&lt;</span>list1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>num2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h2><p>可以检查变量取值的合法性</p><h3 id=\"枚举类型\"><a class=\"anchor\" href=\"#枚举类型\">#</a> 枚举类型</h3><h4 id=\"定义方法-5\"><a class=\"anchor\" href=\"#定义方法-5\">#</a> 定义方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">enum</span> <span class=\"token operator\">&lt;</span>枚举类型名<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>枚举常量表<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>举例</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></pre><pre class=\"code\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Week</span> <span class=\"token punctuation\">{</span>Sun<span class=\"token punctuation\">,</span> Mon<span class=\"token punctuation\">,</span> Tes<span class=\"token punctuation\">,</span> Wed<span class=\"token punctuation\">,</span> Thu<span class=\"token punctuation\">,</span> Fri<span class=\"token punctuation\">,</span> Sat<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 默认赋值为 Sun=0,Mon=1,Tes=2,Wed=3,Thu=4,Fri=5,Sat=6</span><br><br><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Coin</span> <span class=\"token punctuation\">{</span>PENNY<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> NICKEL<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> DIME<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> QUARTER<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> HALF_DOLLAR<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> DOLLAR<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">{</span>red<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">,</span> blue<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> white<span class=\"token punctuation\">,</span> black<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// red=0,yellow=1,blue=1,white=2,black=3</span><br><span class=\"token comment\">//blue 之前的元素按照默认方式赋值，blue 后的元素按逐个加 1 的方式分配整数</span><br></pre></div></figure><blockquote><p>枚举常量是以标识符形式表示的<strong>整型量</strong>，而不是字符串或字面常量。</p></blockquote><h3 id=\"枚举变量\"><a class=\"anchor\" href=\"#枚举变量\">#</a> 枚举变量</h3><h4 id=\"声明方法-2\"><a class=\"anchor\" href=\"#声明方法-2\">#</a> 声明方法</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>语句格式</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">enum</span> <span class=\"token operator\">&lt;</span>枚举类型名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>枚举变量列表<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br></pre></div></figure><h4 id=\"声明时机-2\"><a class=\"anchor\" href=\"#声明时机-2\">#</a> 声明时机</h4><ul><li>定义枚举类型后声明</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">COLOR</span> background<span class=\"token punctuation\">,</span> foreground<span class=\"token punctuation\">;</span><br></pre></div></figure><ul><li>定义枚举类型同时声明</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Week</span> <span class=\"token punctuation\">{</span>Sun<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> Mon<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Tes<span class=\"token punctuation\">,</span> Wed<span class=\"token punctuation\">,</span> Thu<span class=\"token punctuation\">,</span> Fri<span class=\"token punctuation\">,</span> Sat<span class=\"token punctuation\">}</span> begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">;</span><br></pre></div></figure><h4 id=\"使用方法-5\"><a class=\"anchor\" href=\"#使用方法-5\">#</a> 使用方法</h4><p>不同类型的枚举变量不能相互赋值</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></pre><pre class=\"code\"><span class=\"token comment\">// 定义一个枚举类型 Week，和两个 Week 变量 begin end</span><br><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Week</span> <span class=\"token punctuation\">{</span>Sun<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>Mon<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>Tes<span class=\"token punctuation\">,</span>Wed<span class=\"token punctuation\">,</span>Thu<span class=\"token punctuation\">,</span>Fri<span class=\"token punctuation\">,</span>Sat<span class=\"token punctuation\">}</span> begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 直接输入枚举变量，错误，不能直接输入枚举变量</span><br>cin<span class=\"token operator\">>></span>background<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 整数赋给枚举变量，错误，不能将整数赋值给枚举变量</span><br>begin<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 将枚举常量赋给枚举变量，正确</span><br>begin<span class=\"token operator\">=</span>Mon<span class=\"token punctuation\">;</span><br>end<span class=\"token operator\">=</span>Sun<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 相同类型的枚举变量赋值，正确</span><br>begin<span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 整数强制类型转换后赋给枚举变量，正确</span><br>begin<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Week<span class=\"token punctuation\">)</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 将枚举变量赋给整型变量，正确</span><br><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span>begin<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 将枚举常量赋给整型变量，正确</span><br><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span>Sun<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 可以直接输出枚举变量，正确，输出的是变量的整数值，而不是枚举常量名</span><br>cout<span class=\"token operator\">&lt;&lt;</span>begin<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 枚举变量可以参加数学运算，正确，结果是数值型</span><br>cout<span class=\"token operator\">&lt;&lt;</span>end<span class=\"token operator\">-</span>begin<span class=\"token punctuation\">;</span><br></pre></div></figure><h3 id=\"例子三色球组合\"><a class=\"anchor\" href=\"#例子三色球组合\">#</a> 例子：三色球组合</h3><p>口袋中有红、黄、蓝 3 种颜色的小球各一个，从中取出两个，显示各种可能的组合。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span><span class=\"token punctuation\">{</span>red<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>blue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义枚举类型 color，包括三个枚举元素，表示红、黄、蓝 3 种颜色</span><br>\t<span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>red<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>yellow<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 枚举变量使用方法，模拟第 1 次取球</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>blue<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 循环嵌套，模拟第 2 次取球</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 循环嵌套，处理每次取球的颜色</span><br>\t\t\t<span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 多路分支，确定不同取球次数所对应的小球颜色</span><br>\t\t\t\t<span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> temp<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第 1 次由第一层的 i 决定</span><br>\t\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> temp<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第 2 次由第二层的 j 决定</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span><span class=\"token punctuation\">)</span>temp<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 强制转换为枚举变量</span><br>\t\t\t\t<span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token keyword\">case</span> red<span class=\"token operator\">:</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"red\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token keyword\">case</span> yellow<span class=\"token operator\">:</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"yellow\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token keyword\">case</span> blue<span class=\"token operator\">:</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"blue\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h2><h3 id=\"实例1-冒泡排序\"><a class=\"anchor\" href=\"#实例1-冒泡排序\">#</a> 实例 1 冒泡排序</h3><p>用户从键盘输入 N，然后输入 N 个实数，使用冒泡排序方法对这 N 个元素排序，输出排序后的数据。</p><ul><li><p>运行结果：<br>8<br>9 8 7 6 5 4 3 2<br>2 3 4 5 6 7 8 9</p></li><li><p>什么是冒泡排序？</p><ol><li>两两比较相邻元素 <code>A(I)</code> 和 <code>A(I+1)</code> (I=1,2,…N-1), 如果 <code>A(I)</code> &gt; <code>A(I+1)</code> ，则交换 <code>A(I)</code> 和 <code>A(I+1)</code> 的位置；</li><li>对剩下的 <code>N-1</code> 个元素，再两两进行比较，按同样规则交换它们的位置，经过 <code>N-2</code> 次比较，将次最大值交换到 <code>A(N-1)</code> 的位置；</li><li>如法炮制，经过 <code>N-1</code> 趟的 “冒泡处理”，每趟进行 <code>N-i</code> 次的比较，全部数列有序。</li></ol></li><li><p>算法描述：</p></li></ul><pre><code>设有N个元素，用数组a[i]表示，i=0,...,N\n1. 输入N;\n2. 输入a[i],i=0,...,N-1；\n3. 对i=0,...,n-2\n4. \t对j=0,...,n-2-i\n5. \t\t若a[j]&gt;a[j+1]，则交换它们的值。\n6. 对i=0,...,N-1，输出a[i]。\n</code></pre><ul><li>源程序：</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span> </span><span class=\"token comment\">// 包含输入输出头文件</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cmath></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定名字空间</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 主函数</span><br>\t<span class=\"token keyword\">double</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义数组，大小 100</span><br>\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 元素的实际个数</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环变量，并进行初始化</span><br>\tcin<span class=\"token operator\">>></span>N<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入元素个数</span><br><br>\t<span class=\"token comment\">//------- 输入数据 -----------</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <br>\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 输入 N 个元素</span><br>\t\tcin<span class=\"token operator\">>></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环体只有一行</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token comment\">//------- 排序 ---------------</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 控制 n-1 趟冒泡</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 比较相邻的两个元素</span><br>\t\t\t\t<span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 临时变量</span><br>\t\t\t\ttmp<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 交换</span><br>\t\t\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token comment\">//-------- 输出 ----------</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 使用循环，输出 N 个元素</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 a [i], 后加空格，不换行</span><br>\t<span class=\"token punctuation\">}</span><br><br>\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 所有元素输出完之后才换行</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数返回</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ul><li>程序分析</li></ul><ol><li>注意程序中带短划线的三段注释，基本体现了本程序的三块内容，输入、处理和输出。</li><li>排序的程序主要有两个循环，外层循环控制 <code>N-1</code> 趟，内层循环控制一趟的若干次比较。<br>第 1 趟需要 <code>N-1</code> 次比较，第 2 次需要 <code>N-2</code> 次比较，第 <code>N-1</code> 次需要 <code>N-(N-1)=1</code> 次比较。</li><li>元素存放在数组中，数组的大小在定义时要求是<strong>常量表达式</strong>。不能先输入 <code>N</code> ，再定义数组 <code>double A[N]</code> ，这是不正确的。</li></ol><h3 id=\"实例2-文字信息统计\"><a class=\"anchor\" href=\"#实例2-文字信息统计\">#</a> 实例 2 文字信息统计</h3><p>用户输入一段文本（英文），统计其字符总个数，大写字母个数、小写字母个数、数字个数及其他字符个数。</p><ul><li><p>运行结果：</p><pre><code>C++ Programming\n字符串总长度:15\n 大写字母:2\n 小写字母:10\n 数字个数:0\n 其他字符:3\n</code></pre></li><li><p>问题分析：</p></li></ul><ol><li><p>输入字符串。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">cin<span class=\"token operator\">>></span> <span class=\"token operator\">&lt;</span>字符数组名<span class=\"token operator\">></span><br></pre></div></figure><p>只能输入单词；<br>因为 <code>&gt;&gt;</code> 以空格、tab 键、回车为分隔符，遇到空格认为是一项数据的结束。<br><code>cin</code> 是输入流对象，它有一个成员函数 <code>getline()</code> 可以读取带空格的一行字符串。<br>基本使格式为：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\">cin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>字符数组名<span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>字符长度<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>例如</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\"><span class=\"token keyword\">char</span> sentence<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符数组大小 100</span><br>cin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// 可以输入最长 99（回车结束）的字符串，中间可以有空格。</span><br></pre></div></figure></li><li><p>统计计数。<br>输入的文本看做字符串，统计字符个数，就是从字符串的第 1 个字符开始，逐个计数，直到结束。<br>注意，在 C++ 中，字符串的结束是 <code>\\0</code> 。<br>统计各类字符个数，只要在逐个计数的过程中，再对各类字符计数。<br>计数就是逐个数，用一个变量表示，每遇到一个字符，该变量增加 1。</p></li></ol><ul><li>源程序：</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span> </span><span class=\"token comment\">// 包含输入输出头文件</span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定名字空间</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 主函数</span><br>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">101</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义常量，表示问题规模</span><br>\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义字符数组，存放字符串，N 是常量</span><br>\t<span class=\"token comment\">// 定义变量并初始化为 0</span><br>\t<span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 字符串长度</span><br>\t\tcapital<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 大写字母个数</span><br>\t\tsmallletter<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 小写字母个数</span><br>\t\tdigit<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 数字个数</span><br>\t\tothers<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 其他字母个数</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环变量</span><br><br>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入字符串</span><br>\t<span class=\"token comment\">// 处理</span><br>\ti<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从字符串的第 1 个字符开始</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 不是结束符时，循环</span><br>\t\tlen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 长度加 1</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span><span class=\"token string\">'Z'</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 大写字母</span><br>\t\t\tcapital<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span><span class=\"token string\">'z'</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 小写字母</span><br>\t\t\tsmallletter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span><span class=\"token string\">'9'</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 数字</span><br>\t\t\tdigit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">else</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 其他字符</span><br>\t\t\tothers<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符下标加 1，指向下一个字符</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 输出结果</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"字符串总长度:\"</span><span class=\"token operator\">&lt;&lt;</span>len<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" 大写字母:\"</span><span class=\"token operator\">&lt;&lt;</span>capital<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" 小写字母:\"</span><span class=\"token operator\">&lt;&lt;</span>smallletter<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" 数字个数:\"</span><span class=\"token operator\">&lt;&lt;</span>digit<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" 其他字符:\"</span><span class=\"token operator\">&lt;&lt;</span>others<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数返回</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ul><li>程序分析：<br>C++ 提供了一些字符串处理的库函数，方便字符串操作。<br>可以直接调用，常见的有：</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></pre><pre class=\"code\"><span class=\"token comment\">// 包含头文件</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span><br><br><span class=\"token comment\">// 或使用头文件</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span><br><br><span class=\"token comment\">// 求字符串 s 的长度</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 将字符串 source 复制到 destin 中</span><br><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>destin<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 比较 string1 和 string2</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>string1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>string2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 将 source 连接到 destin 末尾</span><br><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>destin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">//string 转换为小写</span><br><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strlwr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">//string 转换为大写</span><br><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strupr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><blockquote><p>在 VS2008 及以上版本中调用 <code>strcpy</code> 、 <code>strcat</code> 等函数时，由于安全原因会提示警告。<br>可以在程序开始的位置加上 <code>#define _CRT_SECURE_NO_WARNINGS</code> 这一变量。</p></blockquote><h3 id=\"实例3-使用string字符串的操作\"><a class=\"anchor\" href=\"#实例3-使用string字符串的操作\">#</a> 实例 3 使用 <code>string</code> 字符串的操作</h3><p>设有两个句子：</p><blockquote><p>Heavy rains are pushing water levels beyond the limit.<br>Sluice gates at Three Gorges Dam opened to discharge water.</p></blockquote><p>开始由两个符号表示，请将它们合并为一段文字，然后查找其中的 <code>Heavy</code> 替换为 <code>Strong</code> ，最后显示处理过的文本。</p><ul><li><p>问题分析：<br>目的：练习使用 <code>string</code> 类表示字符串；<br>先定义两个 <code>string</code> 对象，为它们赋值，用 <code>+</code> 号将它们连接起来；<br>使用 <code>find</code> 函数查找 <code>Heavy</code> 的位置，使用 <code>erase</code> 函数删除该字符串，再使用 <code>insert</code> 函数插入 <code>Strong</code> 。</p></li><li><p>源程序：</p></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span> </span><span class=\"token comment\">// 包含需要的头文件</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span> </span><span class=\"token comment\">// 包含头文件 string</span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 名字空间</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 主函数</span><br>\t<span class=\"token comment\">// 定义并初始化字符串对象 text1</span><br>\tstring <span class=\"token function\">text1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Heavy rains are pushing water levels beyond the limit.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tstring text2<span class=\"token punctuation\">,</span>text3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义但没有初始化话对象 text2,text3</span><br>\t<span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义整型变量 k</span><br>\t<span class=\"token comment\">// 为对象 text2 赋值</span><br>\ttext2<span class=\"token operator\">=</span><span class=\"token string\">\"Sluice gates at Three Gorges Dam opened to discharge water.\"</span><span class=\"token punctuation\">;</span><br>\ttext3<span class=\"token operator\">=</span>text1<span class=\"token operator\">+</span>text2<span class=\"token punctuation\">;</span><br>\tk<span class=\"token operator\">=</span>text3<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Heavy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\ttext3<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Heavy\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除 Heavy</span><br>\ttext3<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Strong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>text3<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"实例4-矩阵乘法\"><a class=\"anchor\" href=\"#实例4-矩阵乘法\">#</a> 实例 4 矩阵乘法</h3><p>用户输入 A<sub>M×N</sub>,B<sub>N×K</sub> 两个矩阵的元素，计算它们的乘积并输出。其中 M,N,K 也由用户输入，它们均不超过 20。</p><ul><li>问题分析：<br>输入矩阵的元素只要根据行数、列数，使用循环即可。设 C 是矩阵的乘积，则矩阵乘法的运算公式是</li></ul><p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>a</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><mo>×</mo><msub><mi>b</mi><mrow><mi>k</mi><mi>j</mi></mrow></msub><mo separator=\"true\">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mi>M</mi><mo separator=\"true\">,</mo><mi>j</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mi>K</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">C_{ij} = \\displaystyle\\sum_{k=1}^N a_{ik} × b_{kj}, i=1,\\mathellipsis M, j = 1,\\mathellipsis K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.969438em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.07153em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em\"><span style=\"top:-1.8478869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03148em\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10903em\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.33610799999999996em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.03148em\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.980548em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.3361079999999999em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03148em\">k</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">M</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">K</span></span></span></span></span></p><ul><li>源程序：</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> M<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>N<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>K<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">double</span> A<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>K<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>K<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> M1<span class=\"token punctuation\">,</span>N1<span class=\"token punctuation\">,</span>N2<span class=\"token punctuation\">,</span>K1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 矩阵的实际维数</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环变量</span><br><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入第1个矩阵的维数M N\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>M1<span class=\"token operator\">>></span>N1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入第 1 个矩阵的行数和列数</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请按行输入第1个矩阵的元素\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>M1<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 输入第 1 个矩阵的元素，按行</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>N1<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 第 i 行</span><br>\t\t\tcin<span class=\"token operator\">>></span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入第2个矩阵的维数N K\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>N2<span class=\"token operator\">>></span>K1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入第 2 个矩阵的行数和列数</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>N2<span class=\"token operator\">!=</span>N1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"第2个矩阵的行数应等于第1个矩阵的列数,请重输\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\tcin<span class=\"token operator\">>></span>N2<span class=\"token operator\">>></span>K1<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请按行输入第2个矩阵的元素\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N1<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 输入第 2 个矩阵的元素，按行</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>K1<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 第 i 行</span><br>\t\tcin<span class=\"token operator\">>></span>B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>M1<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 第 M1 个行</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>K1<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 每行的 K1 列</span><br>\t\t\tC<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 行 j 列元素赋初值 0</span><br>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>N1<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <br>\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 计算 i 行 j 列元素的值</span><br>\t\t\t\tC<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>B<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// 输出乘积矩阵的元素</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>M1<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//M1 行</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>K1<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//K1 列</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 行中中间用 Tab 键分隔</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 行间换行</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"实例5-取子字符串\"><a class=\"anchor\" href=\"#实例5-取子字符串\">#</a> 实例 5 取子字符串</h3><p>用户输入一个字符串，然后输入起始位置 <code>k</code> 和长度 <code>l</code> 。<br>显示从第 <code>k</code> 个字符开始，长度为 <code>l</code> 的子字符串。<br>要求字符串输入一次，子串操作可以多次，输入位置和长度均为 <code>0</code> 时停止。</p><ul><li><p>运行结果：</p><pre><code>请输入字符串（可以有空格格）\nthe c++ programming\n请输入子串起始位置和长度\n1 5\nthe c\n</code></pre></li><li><p>问题分析：<br>取字符就是从一个字符串中取出连续的部分字符串。<br>若字符串用字符数组表示，可以将从 k 到 k+l-1 的字符逐个复制到令一个字符数组中形成一个新的字符串。<br>特别注意在末尾加 <code>\\0</code> 。</p></li><li><p>源程序：</p></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 源字符串</span><br>\t<span class=\"token keyword\">char</span> sub<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子字符串</span><br>\t<span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 源字符串长度</span><br>\t<span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子字符串起始位置，子字符串长度</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环变量</span><br><br>\t<span class=\"token comment\">// 输入源字符串</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入字符串（可以有空格格）\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入带空格的字符串</span><br><br>\t<span class=\"token comment\">// 求字符串的长度</span><br>\tlen<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// 每遇到一个不是结束符的字符，长度就加 1</span><br>\t\tlen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 结束时，len 的值就是长度</span><br><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入子串起始位置和长度\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>k<span class=\"token operator\">>></span>l<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子字符串起始位置，子字符串长度</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> l<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 结束标志</span><br>\t\tj<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子串的字符下标</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>k<span class=\"token operator\">+</span>l<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 取子串</span><br>\t\t\tsub<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取一个字符，放入 sub 中</span><br>\t\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//sub 中的下一个空位</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tsub<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子串末尾放置结束标志</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>sub<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出子串</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入子串起始位置和长度\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\tcin<span class=\"token operator\">>></span>k<span class=\"token operator\">>></span>l<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 再次输入子字符串起始位置，子字符串长度</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p>取子串的 for 循环结束时，子串字符确实已经放在 <code>sub</code> 中，但这时只能叫<strong>字符数组</strong>，还不能叫字符串。<br>因为字符串是以 <code>\\0</code> 为结束标志的， <code>sub[j]='\\0';</code> 就是在末尾放置结束标志，才成为<strong>字符串</strong>，才可以<ins>整体输出</ins>。</p></blockquote><h3 id=\"实例5-词频统计\"><a class=\"anchor\" href=\"#实例5-词频统计\">#</a> 实例 5 词频统计</h3><p>输入一系列英文单词 (单词之间用空格隔开)，用 <code>xyz</code> 表示输入结束。<br>统计各单词出现的次数（单词不区分大小写），对单词按字典顺序进行排序后输出单词和词频。</p><ul><li><p>运行结果：</p><pre><code>请输入一系列英语单词，以xyz表示输入结束\nDo you see the star , the little star ? xyz\n词频统计结果如下：\n, 1\n? 1\nDo 1\n</code></pre></li><li><p>问题分析：</p><ol><li><p>数据结构。本题中每个单词有两条信息要记录，一是单词本身，二是单词的出现次数，即使 1 次，所以可以用结构体。</p></li><li><p>查找。每输入一个单词，要在已有单词序列中查找，找到在次数加 1，找不到则添加一个新单词，次数置 1。</p></li><li><p>选择排序<br>先将待排序序列分成有序部分和无序部分，重复地从无序部分中找出最大的元素，放在有序部分的最后，直到无序部分只有一个元素。如果有 N 个元素要排序，这样的选择过程只需要 N-1 次。</p></li></ol></li><li><p>源程序：</p></li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span> </span><span class=\"token comment\">// 包含基本输入输出库头文件</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用名字空间</span><br><br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">WordList</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 字典结构体</span><br>\t<span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 单词</span><br>\t<span class=\"token keyword\">int</span> freq<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用次数</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 主函数</span><br>\tWordList list<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结构体数组</span><br>\t<span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实际单词数</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环变量；临时变量</span><br>\t<span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 临时存放新输入的单词</span><br><br>\t<span class=\"token comment\">//------------- 输入单词 ------------------</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入一系列英语单词，以xyz表示输入结束\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>tmp<span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span><span class=\"token string\">\"xyz\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 比较 tmp 和 `xyz` 是否相等</span><br>\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 不是单词的结束符时循环</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 在当前词典中逐个查</span><br>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">// 比较两个单词是否相同</span><br>\t\t\t\tlist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>freq<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 词频加 1</span><br>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不再查找</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">>=</span>N<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 这时是没有找到，添加该词</span><br>\t\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">,</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加单词</span><br>\t\t\tlist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>freq<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 词频置 1</span><br>\t\t\tN<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 单词数加 1</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tcin<span class=\"token operator\">>></span>tmp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继续输入单词</span><br>\t<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 结束时，N 为词典中的单词数</span><br><br>\t<span class=\"token comment\">//--------------- 对词典进行排序 --------------</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 控制 N-1 次选择</span><br>\t\tk<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先设 i 是当前最小元素的下标，</span><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 与后面的单词比较</span><br>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 两个字符串比较大小</span><br>\t\t\t<span class=\"token punctuation\">{</span><br>\t\t\t\tk<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记下最小元素的下标</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">!=</span>i<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 最小的下标不是 i</span><br>\t\t\tWordList tmp<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token comment\">// 交换下标是 k 和 i 的两个元素</span><br>\t\t\ttmp<span class=\"token operator\">=</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t\tlist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t\tlist<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token comment\">//--------- 输出结果 ------------</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"词频统计结果如下：\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <br>\t<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 输出</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>word<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>freq<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><h2 id=\"一维数组使用\"><a class=\"anchor\" href=\"#一维数组使用\">#</a> 一维数组使用</h2><ol><li>字符、字符数组、字符串的区别是什么？</li></ol><blockquote><ul><li>字符：<br>一个单个的字符元素。<br>包括字母、数字、运算符号、标点符号和其他符号，以及一些功能性符号。<br>字符在计算机内存放，并规定相应的字符代表相应的二进制代码。<br>字符是数据结构中最小的数据存取单位。通常由 8 个二进制位（一个字节）来表示一个字符，但也有少数计算机系统采用 6 个二进制的字符表示形式。一个系统中字符集的大小，完全由该系统自己规定。<br>计算机可用字符一般为 128-256 个（不包括汉字时），每个字符进入计算机后，都将转换为 8 位二进制数。不同的计算机系统和不同的语言，所能使用的字符范围是不同的。</li><li>字符数组：<br>当数组中的元素由多个字符组成时，称字符数组。是指用来存放字符数据的数组。其定义的一般形式为： <code>char 数组名[数据长度]</code> 。字符数组用于存放字符或字符串，字符数组中的一个元素存放一个字符，它在内存中占用一个字节。</li><li>字符串：<br>字符串 String 是由数字、字母、下划线组成的一个连续的字符系列，用特殊字符 <code>\\0</code> 结尾。一般记为 <code>s=&quot;a1a2···an&quot;(n&gt;=0)</code> 。它是编程语言中表示文本的数据类型。</li></ul></blockquote><ol start=\"2\"><li>数组能否整体输入和输出？</li></ol><blockquote><p>数字型数组 (整型、浮点型)) 不能整体输入或输出，字符型数组可以。</p></blockquote><h2 id=\"二维数组使用\"><a class=\"anchor\" href=\"#二维数组使用\">#</a> 二维数组使用</h2><ol start=\"3\"><li>还有什么算法可以实现月份转化程序？</li></ol><blockquote><p>switch 语句 ，if else 语句，字符串数组</p></blockquote><h1 id=\"随堂练习\"><a class=\"anchor\" href=\"#随堂练习\">#</a> 随堂练习</h1><ol><li class=\"quiz\"><p>引用一个数组元素时，数组元素的下标表达式的类型</p><ul class=\"options\"><li>必须是整型常量</li><li>必须是整型表达式</li><li class=\"correct\">必须是整型常量或整型表达式</li><li>可以是任何类型的表达式</li></ul></li><li class=\"quiz true\"><p>定义一维数组时，可以不写数组长度。</p></li><li class=\"quiz true\"><p>一维数组的下标从 0 开始。</p></li><li class=\"quiz\"><p>若有说明： <code>int a[3][4]={0};</code> 则下面正确的叙述是</p><ul class=\"options\"><li>只有元素 <code>a[0][0]</code> 可得到初值 0</li><li>此说明语句不正确</li><li>数组 a 中各元素都可得到初值，但其值不一定为 0</li><li class=\"correct\">数组 a 中每个元素均可得到初值 0</li></ul></li><li class=\"quiz\"><p>下面关于二维数组的说法错误的是</p><ul class=\"options\"><li>同行的数据在内存中连续存放。</li><li class=\"correct\">对全部数组元素都赋初值时，可以不指定数组第二维的长度。</li><li>不能将二维数组作为一个整体输入与输出。</li><li>将二维数组看作是一维数组时，该一维数组的每个元素本身又是一个一维数组。</li></ul></li><li class=\"quiz\"><p>在说明一个结构体变量时，系统分配给它的存储空间是</p><ul class=\"options\"><li>该结构体中第一个成员所需的存储空间</li><li>该结构体中最后一个成员所需的存储空间</li><li>该结构体中占用最大空间的成员所需的存储空间</li><li class=\"correct\">该结构体中所有成员所需存储空间的总和</li></ul></li><li class=\"quiz false\"><p>一个整数能直接赋值给枚举变量。</p></li></ol><h1 id=\"单元测试\"><a class=\"anchor\" href=\"#单元测试\">#</a> 单元测试</h1><ol><li class=\"quiz\"><p>已知枚举类型定义语句为：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">{</span> NAME<span class=\"token punctuation\">,</span> NUMBER<span class=\"token punctuation\">,</span> PLUS<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> MINUS<span class=\"token punctuation\">,</span> PRINT<span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>则下列叙述中错误的是</p><ul class=\"options\"><li>枚举常量 PRINT 的值为 10</li><li>枚举常量 NUMBER 的值为 1</li><li>枚举常量 MINUS 的值为 6</li><li class=\"correct\">枚举常量 NAME 的值为 1</li></ul></li><li class=\"quiz\"><p>以下各组选项中，均能正确定义二维实型数组ａ的选项是</p><ul class=\"options\"><li><code>float a(3,4); float a[3][4]; float a[][]={ {0},{0} };</code></li><li class=\"correct\"><code>float a[3][4]; float a[][4]={ {0},{0} }; float a[][4]={ {0},{0},{0} };</code></li><li><code>float a[3][4]; float a[][4]; float a[3][]={ {1},{0} };</code></li><li><code>float a[3][4]; float a[3][]; float a[][4];</code></li></ul></li><li class=\"quiz\"><p>以下选项中不能正确赋值的是</p><ul class=\"options\"><li><code>char s4[7] = {&quot;cbest\\n&quot;};</code></li><li><code>char s3[10] =&quot;cbest&quot;;</code></li><li class=\"correct\"><code>char s1[10];s1=&quot;cbest&quot;;</code></li><li><code>char s2[]={'c', 'b', 'e', 's', 't'};</code></li></ul><blockquote><p><span class=\"mistake\">A</span></p></blockquote></li><li class=\"quiz\"><p>已知 <code>char a[][20]={&quot;beijing&quot;,&quot;shanghai&quot;,&quot;changsha&quot;}</code> ; 语句 <code>cout&lt;&lt;a[3];</code> 得到的输出是：</p><ul class=\"options\"><li class=\"correct\">输出结果不确定</li><li><code>changsha</code></li><li><code>j</code></li><li>数组定义有错</li></ul></li><li class=\"quiz\"><p>设有数组定义： <code>char array[]＝&quot;China&quot;;</code> ，则数组 <code>array</code> 所占的空间为</p><ul class=\"options\"><li class=\"correct\">6 个字节</li><li>4 个字节</li><li>5 个字节</li><li>7 个字节</li></ul></li><li class=\"quiz\"><p>设有以下说明语句</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">STUDENT</span> <br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span> PER<span class=\"token punctuation\">;</span><br></pre></div></figure><p>下列正确的是：</p><ul class=\"options\"><li><code>struct STUDENT</code> 是结构体类型</li><li><code>PER</code> 是结构体类型名</li><li><code>struct</code> 是结构体类型名</li><li class=\"correct\"><code>PER</code> 是结构体变量名</li></ul></li><li class=\"quiz\"><p>对于结构体变量，下列说法正确的是</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">st1</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">int</span>  a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>  <span class=\"token keyword\">float</span>  x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">st2</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">int</span>  a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>  <span class=\"token keyword\">float</span>  x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> s3<span class=\"token punctuation\">,</span> s4<span class=\"token punctuation\">;</span><br></pre></div></figure><ul class=\"options\"><li>结构体变量不可以整体赋值</li><li>s1、s2、s3、s4 之间均不可以相互赋值</li><li>s1、s2、s3、s4 可以相互赋值</li><li class=\"correct\">只有 s1 和 s2、s3 和 s4 之间可以相互赋值</li></ul></li><li class=\"quiz\"><p>以下对枚举类型名的定义中正确的是</p><ul class=\"options\"><li><code>enum a {&quot;one&quot;, &quot;two&quot;, &quot;three&quot;};</code></li><li class=\"correct\"><code>enum a {one=9,two=-1,three};</code></li><li><code>enum a={one, two, three};</code></li><li><code>enum a={&quot;one&quot;, &quot;two&quot;, &quot;three&quot;};</code></li></ul><blockquote><p><span class=\"mistake\">C，注意不需要 <code>=</code></span></p></blockquote></li><li class=\"quiz\"><p>在 <code>int a[][3]={ {1},{3,2},{4,5,6},{0} }</code> 中， <code>a[2][2]</code> 的值是</p><ul class=\"options\"><li>4</li><li class=\"correct\">6</li><li>2</li><li>3</li></ul></li><li class=\"quiz\"><p>对二维数组的正确定义是</p><ul class=\"options\"><li><code>int a[2,3]={1,2,3,4,5,6};</code></li><li><code>int a[][]={1,2,3,4,5,6};</code></li><li><code>int a[2][]={1,2,3,4,5,6};</code></li><li class=\"correct\"><code>int a[][3]={1,2,3,4,5,6};</code></li></ul><blockquote><p>列数必须确定</p></blockquote></li></ol>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-3/",
            "url": "https://shoka.lostyu.me/computer-science/cpp/course-1/week-3/",
            "title": "第03周 运算的流程控制",
            "date_published": "2020-04-22T10:21:22.000Z",
            "content_html": "<div class=\"note info\"><p>以下为个人学习笔记和习题整理<br>课程：计算机程序设计（C++）- 西安交通大学 @ 中国大学 MOOC<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1hKVFUtNDYwMDY=\">https://www.icourse163.org/course/XJTU-46006</span></p></div><h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1><h2 id=\"程序流程控制\"><a class=\"anchor\" href=\"#程序流程控制\">#</a> 程序流程控制</h2><h3 id=\"结构化程序设计\"><a class=\"anchor\" href=\"#结构化程序设计\">#</a> 结构化程序设计</h3><ul><li>目标<br>设计出结构清晰、可读性强、易于分工合作编写和调试的程序。</li><li>步骤<ul><li>自顶向下分析：把复杂问题分解成若干小问题以后再解决</li><li>模块化设计：将程序划分为若干个<strong>模块</strong>，每个模块独立存放、完成一个特定功能。</li><li>结构化编码：使用基本<strong>控制结构</strong>控制程序的执行流程。</li></ul></li></ul><h3 id=\"模块\"><a class=\"anchor\" href=\"#模块\">#</a> 模块</h3><p>模块组成：可以是一条语句、一段程序、一个函数等<br>基本特征：仅有<strong>一个入口</strong>和<strong>一个出口</strong><br>模块间关系：相互独立，内聚性很强</p><pre class=\"mermaid graph\"><svg id=\"mermaid-1595956466569\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width:542.2px\" viewBox=\"0 0 542.1953125 411\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M254.30859375,36.15021702673375L126.70703125,72L126.70703125,97\" marker-end=\"url(#arrowhead29)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead29\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M285.09765625,47L285.09765625,72L285.09765625,97\" marker-end=\"url(#arrowhead30)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead30\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M315.88671875,36.140414839631475L443.66796875,72L443.66796875,97\" marker-end=\"url(#arrowhead31)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead31\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M230.90234375,127.11962261554604L58,161L58,186\" marker-end=\"url(#arrowhead32)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead32\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M254.81890800561797,136L216,161L216,186\" marker-end=\"url(#arrowhead33)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead33\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M315.37640449438203,136L354.1953125,161L354.1953125,186\" marker-end=\"url(#arrowhead34)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead34\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M339.29296875,129.92304598325904L464.765625,161L464.765625,186\" marker-end=\"url(#arrowhead35)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead35\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M326.58857092696627,225L291.1953125,250L291.1953125,275\" marker-end=\"url(#arrowhead36)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead36\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M381.80205407303373,225L417.1953125,250L417.1953125,275\" marker-end=\"url(#arrowhead37)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead37\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M384.33014396067415,314L342.1953125,339L342.1953125,364\" marker-end=\"url(#arrowhead38)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead38\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M450.06048103932585,314L492.1953125,339L492.1953125,364\" marker-end=\"url(#arrowhead39)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead39\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"A\" transform=\"translate(285.09765625,27.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-30.7890625\" y=\"-19.5\" width=\"61.578125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-20.7890625,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">C程序</tspan></text></g></g></g><g class=\"node default\" id=\"B\" transform=\"translate(126.70703125,116.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-54.1953125\" y=\"-19.5\" width=\"108.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-44.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">源程序文件1</tspan></text></g></g></g><g class=\"node default\" id=\"C\" transform=\"translate(285.09765625,116.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-54.1953125\" y=\"-19.5\" width=\"108.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-44.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">源程序文件2</tspan></text></g></g></g><g class=\"node default\" id=\"D\" transform=\"translate(443.66796875,116.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-54.375\" y=\"-19.5\" width=\"108.75\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-44.375,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">源程序文件n</tspan></text></g></g></g><g class=\"node default\" id=\"E\" transform=\"translate(58,205.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-50\" y=\"-19.5\" width=\"100\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-40,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">预处理命令</tspan></text></g></g></g><g class=\"node default\" id=\"F\" transform=\"translate(216,205.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-58\" y=\"-19.5\" width=\"116\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-48,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">全局变量声明</tspan></text></g></g></g><g class=\"node default\" id=\"G\" transform=\"translate(354.1953125,205.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-30.1953125\" y=\"-19.5\" width=\"60.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-20.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">函数1</tspan></text></g></g></g><g class=\"node default\" id=\"H\" transform=\"translate(464.765625,205.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-30.375\" y=\"-19.5\" width=\"60.75\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-20.375,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">函数n</tspan></text></g></g></g><g class=\"node default\" id=\"G1\" transform=\"translate(291.1953125,294.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-42\" y=\"-19.5\" width=\"84\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">函数首部</tspan></text></g></g></g><g class=\"node default\" id=\"G2\" transform=\"translate(417.1953125,294.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-34\" y=\"-19.5\" width=\"68\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-24,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">函数体</tspan></text></g></g></g><g class=\"node default\" id=\"I\" transform=\"translate(342.1953125,383.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-58\" y=\"-19.5\" width=\"116\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-48,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">局部变量声明</tspan></text></g></g></g><g class=\"node default\" id=\"J\" transform=\"translate(492.1953125,383.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-42\" y=\"-19.5\" width=\"84\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">执行语句</tspan></text></g></g></g></g></g></g></svg></pre><h3 id=\"基本控制结构\"><a class=\"anchor\" href=\"#基本控制结构\">#</a> 基本控制结构</h3><pre class=\"mermaid graph\"><svg id=\"mermaid-1595956469398\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width:747.17px\" viewBox=\"0 0 747.171875 213\"><g><g class=\"output\"><g class=\"clusters\"><g class=\"cluster\" id=\"顺序结构\" transform=\"translate(89.1953125,106.5)\" style=\"opacity:1\"><rect width=\"162.390625\" height=\"197\" x=\"-81.1953125\" y=\"-98.5\"></rect><g class=\"label\" transform=\"translate(0, -84.5)\" id=\"mermaid-1595956469398Text\"><g transform=\"translate(-32,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">顺序结构</tspan></text></g></g></g><g class=\"cluster\" id=\"选择结构\" transform=\"translate(342.78125,106.5)\" style=\"opacity:1\"><rect width=\"304.78125\" height=\"197\" x=\"-152.390625\" y=\"-98.5\"></rect><g class=\"label\" transform=\"translate(0, -84.5)\" id=\"mermaid-1595956469398Text\"><g transform=\"translate(-32,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">选择结构</tspan></text></g></g></g><g class=\"cluster\" id=\"循环结构\" transform=\"translate(627.171875,106.5)\" style=\"opacity:1\"><rect width=\"224\" height=\"197\" x=\"-112\" y=\"-98.5\"></rect><g class=\"label\" transform=\"translate(0, -84.5)\" id=\"mermaid-1595956469398Text\"><g transform=\"translate(-32,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">循环结构</tspan></text></g></g></g></g><g class=\"edgePaths\"><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M602.6440972222222,141L621.171875,106.5L621.171875,72\" marker-end=\"url(#arrowhead57)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead57\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M603.296875,72L571.671875,106.5L584.7690972222222,141\" marker-end=\"url(#arrowhead58)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead58\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M647.5329861111111,72L694.171875,106.5L694.171875,150.5\" marker-end=\"url(#arrowhead59)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead59\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M311.00238715277777,72L271.5859375,106.5L271.5859375,141\" marker-end=\"url(#arrowhead60)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead60\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M362.28125,71.90633168748185L413.9765625,106.5L413.9765625,141\" marker-end=\"url(#arrowhead61)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead61\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M89.1953125,72L89.1953125,106.5L89.1953125,141\" marker-end=\"url(#arrowhead62)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead62\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(571.671875,106.5)\"><g transform=\"translate(-16,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"32\" height=\"19\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">成立</tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(694.171875,106.5)\"><g transform=\"translate(-24,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"48\" height=\"19\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">不成立</tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(271.5859375,106.5)\"><g transform=\"translate(-16,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"32\" height=\"19\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">成立</tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(413.9765625,106.5)\"><g transform=\"translate(-24,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"48\" height=\"19\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">不成立</tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"b\" transform=\"translate(89.1953125,160.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-46.1953125\" y=\"-19.5\" width=\"92.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-36.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">语句序列2</tspan></text></g></g></g><g class=\"node default\" id=\"a\" transform=\"translate(89.1953125,52.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-46.1953125\" y=\"-19.5\" width=\"92.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-36.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">语句序列1</tspan></text></g></g></g><g class=\"node default\" id=\"d\" transform=\"translate(271.5859375,160.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-46.1953125\" y=\"-19.5\" width=\"92.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-36.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">语句序列1</tspan></text></g></g></g><g class=\"node default\" id=\"c\" transform=\"translate(333.28125,52.5)\" style=\"opacity:1\"><rect rx=\"5\" ry=\"5\" x=\"-29\" y=\"-19.5\" width=\"58\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-19,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">条件?</tspan></text></g></g></g><g class=\"node default\" id=\"e\" transform=\"translate(413.9765625,160.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-46.1953125\" y=\"-19.5\" width=\"92.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-36.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">语句序列2</tspan></text></g></g></g><g class=\"node default\" id=\"f\" transform=\"translate(621.171875,52.5)\" style=\"opacity:1\"><rect rx=\"5\" ry=\"5\" x=\"-29\" y=\"-19.5\" width=\"58\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-19,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">条件?</tspan></text></g></g></g><g class=\"node default\" id=\"g\" transform=\"translate(592.171875,160.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-42\" y=\"-19.5\" width=\"84\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">语句序列</tspan></text></g></g></g><g class=\"node default\" id=\"n\" transform=\"translate(694.171875,160.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(0,0)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g></g></g></g></svg></pre><blockquote><p>语句序列可以是一条语句或者复合语句</p></blockquote><h4 id=\"顺序结构中使用的语句\"><a class=\"anchor\" href=\"#顺序结构中使用的语句\">#</a> 顺序结构中使用的语句</h4><ul><li>说明语句</li><li>赋值语句</li><li>I/O 语句<sup>输入输出语句</sup></li><li>复合语句和空语句</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></pre><pre class=\"code\"><span class=\"token comment\">// 复合语句</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>局部数据说明部分<span class=\"token operator\">></span><br>\t<span class=\"token operator\">&lt;</span>执行语句段落<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 嵌套复合语句</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>局部数据说明部分<span class=\"token number\">1</span><span class=\"token operator\">></span><br>\t<span class=\"token operator\">&lt;</span>执行语句段落<span class=\"token number\">1</span><span class=\"token operator\">></span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token operator\">&lt;</span>局部数据说明部分<span class=\"token number\">2</span><span class=\"token operator\">></span><br>\t\t<span class=\"token operator\">&lt;</span>执行语句段落<span class=\"token number\">2</span><span class=\"token operator\">></span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 空语句</span><br><span class=\"token punctuation\">;</span><br></pre></div></figure><h4 id=\"其他控制结构中使用的语句\"><a class=\"anchor\" href=\"#其他控制结构中使用的语句\">#</a> 其他控制结构中使用的语句</h4><ul><li><p>流程控制语句</p><ul><li>选择<ul><li>条件分支 if else</li><li>开关分支 switch case</li></ul></li><li>循环<ul><li>while</li><li>for</li><li>do while</li></ul></li></ul></li><li><p>辅助控制语句</p><ul><li>break</li><li>continue</li><li>goto</li><li>return</li></ul></li></ul><h4 id=\"例子画出流程图\"><a class=\"anchor\" href=\"#例子画出流程图\">#</a> 例子：画出流程图</h4><p>模拟分拣机对 n 个产品的分拣过程，能够根据产品直径对产品分级并送入不同通道。<br>具体要求如下：</p><ul><li>直径小于 6cm 为三等，送入通道 3；</li><li>直径在 6~8cm 为二等，送入通道 2；</li><li>直径大于 8cm 为一等，送入通道 1。</li></ul><blockquote><p>流程：</p><ul><li>对于多个产品处理：循环结构</li><li>对于不同级别的产品处理：选择结构（一等、二等、三等）</li><li>对于分拣过程的处理：顺序结构（输入产品 ➡️ 测量直径 ➡️ 判断等级 ➡️ 送入通道 ➡️ 输出产品）</li></ul></blockquote><h2 id=\"单路和双路分支\"><a class=\"anchor\" href=\"#单路和双路分支\">#</a> 单路和双路分支</h2><ol><li>单路分支语句</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><br>\tmax<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span><br></pre></div></figure><ol start=\"2\"><li>双路分支语句</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br></pre><pre class=\"code\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><br>\tmax<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">else</span><br>\tmax<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><br></pre></div></figure><blockquote><p>表示条件的表达式要能判断真假，如 <code>a&gt;0</code> , <code>a%2==0</code><br>当语句序列仅包含一条语句时，可以省略花括号</p></blockquote><ol start=\"3\"><li><p>关系表达式作为条件</p></li><li><p>分支嵌套</p></li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></pre><pre class=\"code\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>表达式<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> 语句<span class=\"token number\">1</span><br><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>表达式<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 语句<span class=\"token number\">2</span><br><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>表达式<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> 语句<span class=\"token number\">3</span><br><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>表达式<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> 语句<span class=\"token number\">4</span><br><span class=\"token keyword\">else</span> 语句<span class=\"token number\">5</span><br><br><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>表达式<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>表达<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 语句<span class=\"token number\">1</span><br><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> 语句<span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>内嵌<span class=\"token keyword\">if</span><span class=\"token punctuation\">)</span><br></pre></div></figure><blockquote><p>else 总是与它上面最近的 if 配对<br>如果 if 与 else 的数目不一样，可以加花括弧来确定配对关系</p></blockquote><h2 id=\"多路分支\"><a class=\"anchor\" href=\"#多路分支\">#</a> 多路分支</h2><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></pre><pre class=\"code\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">case</span> 常量表达式<span class=\"token number\">1</span><span class=\"token operator\">:</span><br>\t\t语句序列<span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t……<br>\t<span class=\"token keyword\">case</span> 常量表达式n<span class=\"token operator\">:</span><br>\t\t语句序列n<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">[</span><span class=\"token keyword\">default</span><span class=\"token operator\">:</span><br>\t\t语句序列n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"例子成绩转换\"><a class=\"anchor\" href=\"#例子成绩转换\">#</a> 例子：成绩转换</h3><p>编写程序，将一个输入的百分成绩经过运算得到相应的 5 分制成绩。<br>转换前后的成绩对应关系如下：</p><table><tbody><tr><td>90~100</td><td>5</td></tr><tr><td>80~89</td><td>4</td></tr><tr><td>70~79</td><td>3</td></tr><tr><td>60~69</td><td>2</td></tr><tr><td>60 以下</td><td>1</td></tr></tbody></table><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br><span class=\"marked\">7</span><br>8<br><span class=\"marked\">9</span><br><span class=\"marked\">10</span><br>11<br>12<br>13<br><span class=\"marked\">14</span><br>15<br>16<br>17<br>18<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span> <br>\t<span class=\"token keyword\">int</span> old_grade<span class=\"token punctuation\">,</span> new_grade<span class=\"token punctuation\">;</span><br>\tcin <span class=\"token operator\">>></span>old_grade<span class=\"token punctuation\">;</span><br><span class=\"marked\">\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>old_grade<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></span><br>\t<span class=\"token punctuation\">{</span><br><span class=\"marked\">\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span></span><br><span class=\"marked\">\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span> new_grade <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span> new_grade <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span> new_grade <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span> new_grade <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br><span class=\"marked\">\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span> new_grade <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span><br>\t<span class=\"token punctuation\">}</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span>new_grade<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><ol><li><p>整型表达式作为运算表达式 <code>switch (old_grade/10)</code></p></li><li><p>分支描述</p></li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span><br><span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span> new_grade <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span> new_grade <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span> new_grade <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span> new_grade <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br></pre></div></figure><ol start=\"3\"><li>缺省分支描述</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br></pre><pre class=\"code\"><span class=\"token keyword\">default</span><span class=\"token operator\">:</span> new_grade <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br></pre></div></figure><ol start=\"4\"><li>中断语句 <code>break</code></li></ol><h2 id=\"已知次数循环\"><a class=\"anchor\" href=\"#已知次数循环\">#</a> 已知次数循环</h2><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br></pre><pre class=\"code\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>表达式<span class=\"token number\">1</span><span class=\"token punctuation\">;</span> 表达式<span class=\"token number\">2</span><span class=\"token punctuation\">;</span> 表达式<span class=\"token number\">3</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t语句序列<br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// 表达式 1：&lt; 变量 >=&lt; 初始值表达式 ></span><br><span class=\"token comment\">// 表达式 2：表示循环条件</span><br><span class=\"token comment\">// 表达式 3：表示增量</span><br></pre></div></figure><blockquote><ol><li>表达式之间的 <code>;</code> 不能省略</li><li><code>for(;;)</code> 在语法上是正确的，表示死循环</li></ol></blockquote><pre class=\"mermaid graph\"><svg id=\"mermaid-1595956472271\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width:628.38px\" viewBox=\"0 0 628.3781127929688 162.29843139648438\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M116.390625,97.5L141.390625,97.5L166.89062652587887,98\" marker-end=\"url(#arrowhead24)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead24\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M256.1188354702552,73.63133394437625L328.9875030517578,18L409.9875030517578,18\" marker-end=\"url(#arrowhead25)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead25\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M280.48749847412114,98.00000000000001L328.9875030517578,97.5L377.9875030517578,97.5\" marker-end=\"url(#arrowhead26)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead26\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M461.9875030517578,97.5L486.9875030517578,97.5L511.9875030517578,106.1021505376344\" marker-end=\"url(#arrowhead27)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead27\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M511.9875030517578,143.3978494623656L486.9875030517578,152L419.9875030517578,152L328.9875030517578,152L261.17655136671067,117.31094710741041\" marker-end=\"url(#arrowhead28)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead28\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(328.9875030517578,18)\"><g transform=\"translate(-24,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"48.015625\" height=\"19.03125\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">不成立</tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(328.9875030517578,97.5)\"><g transform=\"translate(-16,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"32.015625\" height=\"19.03125\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">成立</tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"A\" transform=\"translate(62.1953125,97.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-54.1953125\" y=\"-19.5\" width=\"108.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-44.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">计算表达式1</tspan></text></g></g></g><g class=\"node default\" id=\"B\" transform=\"translate(223.1890640258789,97.5)\" style=\"opacity:1\"><polygon points=\"56.7984375,0 113.596875,-56.7984375 56.7984375,-113.596875 0,-56.7984375\" transform=\"translate(-56.7984375,56.7984375)\" class=\"label-container\"></polygon><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-33.609375,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">表达式2 ?</tspan></text></g></g></g><g class=\"node default\" id=\"D\" transform=\"translate(419.9875030517578,18)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(0,0)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"node default\" id=\"C\" transform=\"translate(419.9875030517578,97.5)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-42\" y=\"-19.5\" width=\"84\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">语句序列</tspan></text></g></g></g><g class=\"node default\" id=\"E\" transform=\"translate(566.1828155517578,124.75)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-54.1953125\" y=\"-19.5\" width=\"108.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-44.1953125,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">计算表达式3</tspan></text></g></g></g></g></g></g></svg></pre><h3 id=\"例子计算累加和\"><a class=\"anchor\" href=\"#例子计算累加和\">#</a> 例子：计算累加和</h3><p>编写程序，计算 1+2+3+…+n 和并显示结果。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tsum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> sum<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"例子乘法表\"><a class=\"anchor\" href=\"#例子乘法表\">#</a> 例子：乘法表</h3><p>编写程序，按正三角形式显示九九乘法表。<br>格式如下：</p><pre><code>1*1=1\n1*2=2 2*2=4\n1*3=3 2*3=6 3*3=9\n……\n1*9=9 2*9=18 3*9=27……9*9=81\n</code></pre><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 外层循环</span><br>\t<span class=\"token punctuation\">{</span> <br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 内层循环</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> j<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"*\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">&lt;&lt;</span>j<span class=\"token operator\">*</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \\t 输出按列对齐</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"已知条件循环\"><a class=\"anchor\" href=\"#已知条件循环\">#</a> 已知条件循环</h2><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></pre><pre class=\"code\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>语句序列<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">do</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token operator\">&lt;</span>语句序列<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><pre class=\"mermaid graph\"><svg id=\"mermaid-1595956475059\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width:481.6px\" viewBox=\"0 0 481.6000061035156 384.375\"><g><g class=\"output\"><g class=\"clusters\"><g class=\"cluster\" id=\"while\" transform=\"translate(169.3000030517578,103.53750038146973)\" style=\"opacity:1\"><rect width=\"322.6000061035156\" height=\"191.07500076293945\" x=\"-161.3000030517578\" y=\"-95.53750038146973\"></rect><g class=\"label\" transform=\"translate(0, -81.5374984741211)\" id=\"mermaid-1595956475059Text\"><g transform=\"translate(-19.46875,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">while</tspan></text></g></g></g><g class=\"cluster\" id=\"do-while\" transform=\"translate(240.8000030517578,297.72500228881836)\" style=\"opacity:1\"><rect width=\"465.6000061035156\" height=\"157.3000030517578\" x=\"-232.8000030517578\" y=\"-78.6500015258789\"></rect><g class=\"label\" transform=\"translate(0, -64.6500015258789)\" id=\"mermaid-1595956475059Text\"><g transform=\"translate(-31.15625,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">do-while</tspan></text></g></g></g></g><g class=\"edgePaths\"><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M118.6500015258789,284.43142418024775L169.3000030517578,268.4000015258789L229.2942532067616,287.73075060793565\" marker-end=\"url(#arrowhead59)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead59\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M227.9507724373753,307.375770148557L169.3000030517578,322.3000030517578L118.6500015258789,308.86531545713666\" marker-end=\"url(#arrowhead60)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead60\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M306.1000015258792,298.22500228881836L330.6000061035156,297.72500228881836L379.6000061035156,297.72500228881836L428.6000061035156,297.72500228881836\" marker-end=\"url(#arrowhead61)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead61\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M219.95000457763672,84.96733699714449L169.3000030517578,97.5L115.76706983065004,105.04206906771061\" marker-end=\"url(#arrowhead62)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead62\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M103.71707333272676,92.99207256978731L169.3000030517578,50L219.95000457763672,63.43468759462118\" marker-end=\"url(#arrowhead63)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead63\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity:1\"><path class=\"path\" d=\"M106.63722164155753,124.23777759550305L169.3000030517578,154.07500076293945L251.95000457763672,154.07500076293945\" marker-end=\"url(#arrowhead64)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead64\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width:1;stroke-dasharray:1,0\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(169.3000030517578,322.3000030517578)\"><g transform=\"translate(-16,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"32.015625\" height=\"19.03125\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">成立</tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(379.6000061035156,297.72500228881836)\"><g transform=\"translate(-24,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"48.015625\" height=\"19.03125\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">不成立</tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(169.3000030517578,50)\"><g transform=\"translate(-16,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"32.015625\" height=\"19.03125\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">成立</tspan></text></g></g><g class=\"edgeLabel\" style=\"opacity:1\" transform=\"translate(169.3000030517578,154.07500076293945)\"><g transform=\"translate(-24,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"48.015625\" height=\"19.03125\" style=\"fill:#e8e8e8\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">不成立</tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"f\" transform=\"translate(76.6500015258789,109.57500076293945)\" style=\"opacity:1\"><polygon points=\"43.65,0 87.3,-43.65 43.65,-87.3 0,-43.65\" transform=\"translate(-43.65,43.65)\" class=\"label-container\"></polygon><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-19,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">条件?</tspan></text></g></g></g><g class=\"node default\" id=\"g\" transform=\"translate(261.9500045776367,74.57500076293945)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-42\" y=\"-19.5\" width=\"84\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">语句序列</tspan></text></g></g></g><g class=\"node default\" id=\"n\" transform=\"translate(261.9500045776367,154.07500076293945)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(0,0)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"node default\" id=\"c\" transform=\"translate(76.6500015258789,297.72500228881836)\" style=\"opacity:1\"><rect rx=\"5\" ry=\"5\" x=\"-42\" y=\"-19.5\" width=\"84\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">语句序列</tspan></text></g></g></g><g class=\"node default\" id=\"d\" transform=\"translate(261.9500045776367,297.72500228881836)\" style=\"opacity:1\"><polygon points=\"43.65,0 87.3,-43.65 43.65,-87.3 0,-43.65\" transform=\"translate(-43.65,43.65)\" class=\"label-container\"></polygon><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-19,-9.5)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">条件?</tspan></text></g></g></g><g class=\"node default\" id=\"e\" transform=\"translate(438.6000061035156,297.72500228881836)\" style=\"opacity:1\"><rect rx=\"0\" ry=\"0\" x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(0,0)\"><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g></g></g></g></svg></pre><h3 id=\"例子求e值\"><a class=\"anchor\" href=\"#例子求e值\">#</a> 例子：求 e 值</h3><p>编写程序，使用下列级数近似计算 e 值，直到最后一个通项 &lt; 10<sup>-7</sup> 为止。</p><p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>=</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>+</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">e = 1 + \\frac{1}{1!} + \\frac{1}{2!} + ... + \\frac{1}{n!} + ...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-.686em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mclose\">!</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-.686em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mclose\">!</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-.686em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"mclose\">!</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.10556em;vertical-align:0\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></span></p><p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi>i</mi><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow></mfrac><mi mathvariant=\"normal\">/</mi><mi>i</mi><mo>=</mo><msub><mi>u</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant=\"normal\">/</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">u_i = \\frac{1}{i!} = \\frac{1}{(i - 1)!}/i = u_{i-1} / i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.58056em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-.686em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"mclose\">!</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.25744em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mclose\">!</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.208331em\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\">i</span></span></span></span></span></p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>while</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">double</span> e <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>u <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 基数 e，通项 u</span><br>\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>u <span class=\"token operator\">>=</span> <span class=\"token number\">1.0E-7</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tu <span class=\"token operator\">=</span> u<span class=\"token operator\">/</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通项</span><br>\t\te <span class=\"token operator\">=</span> e<span class=\"token operator\">+</span>u<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 累加和</span><br>\t\tn <span class=\"token operator\">=</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"e = \"</span> <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ( n = \"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" )\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>do-while</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">double</span> e<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>u <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">do</span><br>\t<span class=\"token punctuation\">{</span> <br>\t\tu <span class=\"token operator\">=</span> u<span class=\"token operator\">/</span>n<span class=\"token punctuation\">;</span><br>\t\te <span class=\"token operator\">=</span> e<span class=\"token operator\">+</span>u<span class=\"token punctuation\">;</span><br>\t\tn <span class=\"token operator\">=</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>u<span class=\"token operator\">>=</span><span class=\"token number\">1.0E-7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"e = \"</span> <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ( n = \"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" )\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"例子计算实数n次方根\"><a class=\"anchor\" href=\"#例子计算实数n次方根\">#</a> 例子：计算实数 n 次方根</h3><p>编写程序，能够根据输入的实数 x 和 n，计算 x 的 n 次方根。<br>具体要求：</p><ul><li>输入 0 0 时，程序结束</li><li>当 (x&lt;0 且 n&lt;=0) 或 (x&lt;=0 且 1/n 不为整数) 时，显示 “输入错误” 并允许用户继续输入</li><li>否则计算并显示 x 的 n 次方根并允许用户继续输入</li></ul><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cmath></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tcin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Program terminated\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 能够跳出所在位置最近的一层循环</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">else</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>n<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>n<span class=\"token operator\">!=</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"error reinput\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 能够跳过后续语句，开始新一轮的循环</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">&lt;&lt;</span>n<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"th root\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">1.0</span><span class=\"token operator\">/</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h2><h3 id=\"解一元二次方程\"><a class=\"anchor\" href=\"#解一元二次方程\">#</a> 解一元二次方程</h3><p>输入一元二次方程的 a,b,c 三个系数，解一元二次方程</p><p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">ax^2+bx+c=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.9474379999999999em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8641079999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.77777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span></span></p><p>输出两个根（含复根）。</p><h4 id=\"问题分析\"><a class=\"anchor\" href=\"#问题分析\">#</a> 问题分析</h4><p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><mrow><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.276389em;vertical-align:-.686em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.590389em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord mathdefault\">a</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">±</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.913389em\"><span class=\"svg-align\" style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\" style=\"padding-left:.833em\"><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.740108em\"><span style=\"top:-2.9890000000000003em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\">4</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span></span></span><span style=\"top:-2.873389em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"hide-tail\" style=\"min-width:.853em;height:1.08em\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.12661100000000003em\"><span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p><p>Δ&gt;0? Δ&lt;0?</p><h4 id=\"算法描述\"><a class=\"anchor\" href=\"#算法描述\">#</a> 算法描述</h4><pre><code>输入a,b,c；\n如果a=0,\n\t如果b=0,\n\t\t输出“输入的系数不构成方程”；\n\t否则（即b≠0）\n\t\t计算单根x=-c/b\n\t\t输出单根x\n否则（即a≠0）\n\t计算 delta=b*b-4*a*c\n\t如果 delta&gt;0\n\t\tdelta=sqrt(delta)\n\t\t输出x1=(-b+delta)/2a和x2=(-b-delta)/2a\n\t否则\n\t\tdelta=sqrt(-delta)\n\t\t输出f复根：\n\t\t\tx1=-b/2a+j*delta/2a;\n\t\t\tx2=-b/2a-j*delta/2a(注意j是虚数单位)\n结束\n</code></pre><h4 id=\"源程序\"><a class=\"anchor\" href=\"#源程序\">#</a> 源程序</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span> </span><span class=\"token comment\">// 包含需要的头文件</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span> </span><span class=\"token comment\">// 求根函数 sqrt 需要的头文件</span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 名字空间</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 主函数</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义变量保存系数</span><br>\t<span class=\"token keyword\">double</span> delta<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示根的判别式</span><br>\t<span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span>x1<span class=\"token punctuation\">,</span>x2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示根</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入一元二次方程的三个系数a,b,c:\"</span><span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入一元二次方程的系数</span><br>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 二次项系数等于 0</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 一次项系数也等于 0，不是方程</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"输入的系数不构成方程\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">// 二次项系数等于 0，一次项系数不为 0</span><br>\t\t<span class=\"token punctuation\">{</span> <br>\t\t\tx<span class=\"token operator\">=</span><span class=\"token operator\">-</span>c<span class=\"token operator\">/</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算单根</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"实际为一元一次方程，根为\"</span><span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">else</span> <span class=\"token comment\">// 二次项系数不为 0</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tdelta<span class=\"token operator\">=</span>b<span class=\"token operator\">*</span>b<span class=\"token operator\">-</span><span class=\"token number\">4.0</span><span class=\"token operator\">*</span>a<span class=\"token operator\">*</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算判别式的值</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>delta<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判别式大于等于 0，有实根</span><br>\t\t<span class=\"token punctuation\">{</span> <br>\t\t\tdelta<span class=\"token operator\">=</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判别式开方</span><br>\t\t\tx1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>b<span class=\"token operator\">+</span>delta<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根 1</span><br>\t\t\tx2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>b<span class=\"token operator\">-</span>delta<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根 2</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"方程有实根，它们是:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"x1=\"</span><span class=\"token operator\">&lt;&lt;</span>x1<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", x2=\"</span><span class=\"token operator\">&lt;&lt;</span>x2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">// 判别式小于 0，有复根</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tdelta<span class=\"token operator\">=</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判别式变号开方</span><br>\t\t\tx1<span class=\"token operator\">=</span><span class=\"token operator\">-</span>b<span class=\"token operator\">/</span><span class=\"token number\">2.0</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实部</span><br>\t\t\tx2<span class=\"token operator\">=</span>delta<span class=\"token operator\">/</span><span class=\"token number\">2.0</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 虚部</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"方程有复根，它们是:\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"x1=\"</span><span class=\"token operator\">&lt;&lt;</span>x1<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"+j\"</span><span class=\"token operator\">&lt;&lt;</span>x2<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", x2=\"</span><span class=\"token operator\">&lt;&lt;</span>x1<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-j\"</span><span class=\"token operator\">&lt;&lt;</span>x2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token comment\">// 由于 C++ 中没有复数类型，所以程序中先计算复根的实部和虚部，在输出时构造复数的形式。</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h3 id=\"一个简单的计算器\"><a class=\"anchor\" href=\"#一个简单的计算器\">#</a> 一个简单的计算器</h3><p>编程一个简单的计算器功能，实现简单的加、减、乘、除表达式的计算。<br>设用户输入的表达式具有如下格式：<br><code>&lt;操作数1&gt; &lt;运算符&gt; &lt;操作数2&gt;</code></p><h4 id=\"问题分析-2\"><a class=\"anchor\" href=\"#问题分析-2\">#</a> 问题分析</h4><p>用户输入表达式后，程序要判断是什么运算，然后再做相应的处理。<br>该问题可以使用 if，或 if...else 解决。<br>对于分支较多的情况，C++ 提供 switch 语句。switch 语句也叫开关语句、多分支语句，它计算一个表达式的值，根据结果的不同，执行不同的分支处理语句。</p><h4 id=\"算法描述-2\"><a class=\"anchor\" href=\"#算法描述-2\">#</a> 算法描述</h4><pre><code>用num1,num2,op分别表示输入的表达式的两个操作数和一个运算符。\n如果op='+'，则result=num1+num2,输出result;\n如果op='-'，则result=num1-num2,输出result;\n如果op='*'，则result=num1*num2,输出result;\n如果op='/'，则\n\t如果num2=0,显示“除数为0”\n\t否则，计算result=num1/num2,输出result;\n其他，显示“运算符错误”。\n</code></pre><h4 id=\"源程序-2\"><a class=\"anchor\" href=\"#源程序-2\">#</a> 源程序</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span> </span><span class=\"token comment\">// 包含输入输出头文件</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cmath></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定名字空间</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 主函数</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">double</span> num1<span class=\"token punctuation\">,</span>num2<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">char</span> op<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明字符变量，存放操作符</span><br>\t<span class=\"token keyword\">double</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明变量，存放计算机结果</span><br>\t<span class=\"token keyword\">char</span> caption1<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Error,Divided by 0!\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">char</span> caption2<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Invalid opereator!\"</span><span class=\"token punctuation\">;</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Please input the expression:\"</span><span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>num1<span class=\"token operator\">>></span>op<span class=\"token operator\">>></span>num2<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span> <br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span><br>\t\t\tresult<span class=\"token operator\">=</span>num1<span class=\"token operator\">+</span>num2<span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>num1<span class=\"token operator\">&lt;&lt;</span>op<span class=\"token operator\">&lt;&lt;</span>num2<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">&lt;&lt;</span>result<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 中断</span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span><br>\t\t\tresult<span class=\"token operator\">=</span>num1<span class=\"token operator\">-</span>num2<span class=\"token punctuation\">;</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>num1<span class=\"token operator\">&lt;&lt;</span>op<span class=\"token operator\">&lt;&lt;</span>num2<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">&lt;&lt;</span>result<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 中断</span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 是乘号</span><br>\t\t\tresult<span class=\"token operator\">=</span>num1<span class=\"token operator\">*</span>num2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算积</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>num1<span class=\"token operator\">&lt;&lt;</span>op<span class=\"token operator\">&lt;&lt;</span>num2<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">&lt;&lt;</span>result<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 是除号</span><br>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">1.0e-8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 除数为 0</span><br>\t\t\t<span class=\"token punctuation\">{</span><br>\t\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>caption1<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">// 除数不为 0</span><br>\t\t\t<span class=\"token punctuation\">{</span><br>\t\t\t\tresult<span class=\"token operator\">=</span>num1<span class=\"token operator\">/</span>num2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算商</span><br>\t\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>num1<span class=\"token operator\">&lt;&lt;</span>op<span class=\"token operator\">&lt;&lt;</span>num2<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">&lt;&lt;</span>result<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token comment\">// 以上情况都不是</span><br>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>caption2<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><blockquote><p>switch 的条件是整型表达式；<br><code>fabs()</code> 是求绝对值的函数，它包含在 cmath 头文件中；<br>在每一个 case 处理的最后都有一个 break 语句。</p></blockquote><h3 id=\"寻找自幂数\"><a class=\"anchor\" href=\"#寻找自幂数\">#</a> 寻找自幂数</h3><p>用户输入位数 n，找出并显示出所有 n 位的自幂数。<br>数学家发现了很多有趣的数字。<br>比如，153，一个普通的三位数，然而 1<sup>3+5</sup>3+3^3=153， 即它的各位数字的三次方的和等于这个数本身。<br>更一般地，一个 n 位正整数，哪些数的各位数字的 n 次方的和加起来 还等于这个数呢？ 数学家称这样的数为自幂数，也叫自恋数。</p><p>n 为 1 时，自幂数称为独身，0,1,2,3,4,5,6,7,8,9 都是自幂数。<br>n 为 2 时，没有自幂数。<br>n 为 3 时，自幂数称为水仙花数，153 就是一个水仙花数。<br>n=4，称为四叶玫瑰数。<br>n=5，称为五角星数。<br>n=6，称为六合数。<br>n=7，称为北斗七星数。<br>n=8，称为八仙数。<br>n=9，称为九九重阳数。</p><h4 id=\"问题分析-3\"><a class=\"anchor\" href=\"#问题分析-3\">#</a> 问题分析</h4><p>n 位自幂数，各位数字的 n 次方的和加起来还等于这个数。</p><ol><li><p>找出 “各位”<br>如 153，找个位，可用 153%10=3；<br>十位，(153/10)%10=5，依次类推。</p><blockquote><p>直接求余，就是最低位的数字，除 10，原来的十位就成为新的最低位，重复这一过程，就可以求出各位，直到这个数成为 0。</p></blockquote></li><li><p>n 次方的计算：使用数学函数 <code>pow(x,n)</code> 。</p></li><li><p>构造 n 位数。<br>0 是最小的一位数，10 的 1 次方是最小的两位数，10 的平方是最小的三位数，那么，10 的 n-1 次方就是最小的 n 位数。</p></li></ol><h4 id=\"算法描述-3\"><a class=\"anchor\" href=\"#算法描述-3\">#</a> 算法描述</h4><ol><li>输入位数 n。</li><li>计算 n 位数的起始值和终止值<br>start=10<sup>n-1</sup><br>end=10<sup>n-1</sup><br>i = start</li><li>如果 i&gt;end，转 9 结束</li><li>m = i, sum = 0</li><li>如果 m = 0，转 7</li><li>d = m%10，sum=sum+d<sup>n</sup>，m=m/10，转 5</li><li>如果 sum=i，显示 i</li><li>i=i+1，转 3</li><li>结束</li></ol><h4 id=\"源程序-3\"><a class=\"anchor\" href=\"#源程序-3\">#</a> 源程序</h4><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span> </span><span class=\"token comment\">// 包含需要的头文件</span><br><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cmath></span> </span><span class=\"token comment\">// 数学函数需要的头文件</span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 名字空间</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示数的位数</span><br>\t<span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示 n 位数的起始值和终止值</span><br>\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 待分解各位的数，即待判断的数</span><br>\t<span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 某个数位的值</span><br>\t<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 各位数的 n 次方的和</span><br>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环变量，待检验的数</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"求n位自幂数，请输入位数:\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 提示信息</span><br>\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入位数</span><br>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 大于 0 时计算</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tstart<span class=\"token operator\">=</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//n 位数的起始值</span><br>\t\tend<span class=\"token operator\">=</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//n 位数的终止值</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>n<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"位自幂数:\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出说明信息</span><br>\t\t<br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>start<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从起始值到终止值逐个检验</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\tm<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 i 赋给 m</span><br>\t\t\t<span class=\"token comment\">// 检验过程中 m 的值会改变，而 i 的值不变</span><br>\t\t\tsum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 各位数的 n 次方和，检验前赋 0</span><br>\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//m 开始为待检验的数</span><br>\t\t\t<span class=\"token punctuation\">{</span><br>\t\t\t\tdigit<span class=\"token operator\">=</span>m<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取最低位数字</span><br>\t\t\t\tsum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>digit<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//n 次方，再求和</span><br>\t\t\t\tm<span class=\"token operator\">=</span>m<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 去掉个位，刚才的十位成为新个位</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token comment\">// 上面的循环结束时 sum 就是各位数字的 n 次方的和</span><br>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 逻辑表达式的值为 true 时，表示是自幂数</span><br>\t\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示该数</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 换行</span><br>\t\tcout<span class=\"token operator\">&lt;&lt;</span>“求n位自幂数，请输入位数<span class=\"token operator\">:</span>”<span class=\"token punctuation\">;</span><br>\t\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 再输入一个 n 表示位数</span><br>\t<span class=\"token punctuation\">}</span> <span class=\"token comment\">//while 循环</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h4 id=\"思路扩展\"><a class=\"anchor\" href=\"#思路扩展\">#</a> 思路扩展</h4><ul><li>如果一种计算会破坏（或改变）某个变量的值，而这个原始值在后面的计算中还会使用，那就先将其赋值给另一个变量，使用新变量作 “破坏性” 计算，随时可以通过原来的变量获得原始值。</li></ul><blockquote><p>这实际是计算机科学中常用的一种 “冗余” 的思想，要获得某种保障，有意使用更多的时间、空间。</p></blockquote><ul><li><p>分离各位数字的相反运算是合成一个数，例如有三个变量，a,b,c，分别存放一位整数，比如 1,2,3，如果将它们合成为 a 作百位，b 作十位，c 作各位的三位数呢？</p></li><li><p>C++ 中，int 型变量能表示的最大正整数为 2147483647，它不过 10 位，那么有 11,12,13 位的自幂数吗？如果有，怎样计算呢？自幂数是有限的吗？如果有，有多少呢？</p></li></ul><h1 id=\"课堂讨论\"><a class=\"anchor\" href=\"#课堂讨论\">#</a> 课堂讨论</h1><h2 id=\"单路和双路分支使用\"><a class=\"anchor\" href=\"#单路和双路分支使用\">#</a> 单路和双路分支使用</h2><ol><li>在什么情况下，应该使用分支嵌套？</li></ol><blockquote><ol><li>存在两个或者两个以上的逻辑判断</li><li>逻辑判断是包含关系而不是排列关系。比如 a&gt;0 ,a==0,a&lt;0 就是三个逻辑并列关系，互不补充。而 a&gt;0 和 a&gt;100 是包含关系。当 a&gt;0 的情况实现时，我们再去判断 a&gt;100 的情况。</li><li>可以理解为主条件里面的附带条件，如果主条件不成立，附带的条件也不会成立。</li></ol></blockquote><ol start=\"2\"><li>还有什么算法能够实现在三个数中，寻找最大数？</li></ol><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span><span>三目运算符</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br></pre><pre class=\"code\">a<span class=\"token operator\">>=</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>max<span class=\"token operator\">=</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>max<span class=\"token operator\">=</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>max<span class=\"token operator\">>=</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>max<span class=\"token operator\">=</span>max<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>max<span class=\"token operator\">=</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>cout<span class=\"token operator\">&lt;&lt;</span>max<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br></pre></div></figure><h2 id=\"多路分支使用\"><a class=\"anchor\" href=\"#多路分支使用\">#</a> 多路分支使用</h2><ol start=\"3\"><li>在什么情况下，应该使用多路分支语句？</li></ol><blockquote><p>需要多个条件判断时应该使用。最典型的例子就是求 GPA。<br>此外分段函数也可以使用，比如交电费。0-50 度三毛钱，50-100 的部分六毛钱。100-200 部分九毛钱，超过 200，一块四。这种问题。</p></blockquote><ol start=\"4\"><li>如果想将百分制成绩划分更多等级，如 60-64 为 2，65-69 为 2.5, 70-74 为 3，75-79 为 3.5 ……，该如何构造 switch 语句中的表达式？</li></ol><blockquote><p>百分制更细划分：除以 5。</p></blockquote><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></pre><pre class=\"code\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">int</span> avg<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">float</span> gpa<span class=\"token punctuation\">;</span><br>\tcin<span class=\"token operator\">>></span>avg<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>avg<span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">20</span><span class=\"token operator\">:</span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">19</span><span class=\"token operator\">:</span>gpa<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">18</span><span class=\"token operator\">:</span>gpa<span class=\"token operator\">=</span><span class=\"token number\">4.5</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">17</span><span class=\"token operator\">:</span>gpa<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">16</span><span class=\"token operator\">:</span>gpa<span class=\"token operator\">=</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>gpa<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\tcout<span class=\"token operator\">&lt;&lt;</span>gpa<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure><h2 id=\"已知条件循环使用\"><a class=\"anchor\" href=\"#已知条件循环使用\">#</a> 已知条件循环使用</h2><ol start=\"5\"><li>在求 e 值的程序中，能否将通项 u 的类型由双精度改为整型，初值由 1.0 改为 1？为什么？</li></ol><blockquote><p>不能，如果将初值由 1.0 改为 1，那么其结果会为整数而不会保留小数部分，会损失精度。</p></blockquote><ol start=\"6\"><li>请总结 break 语句在多路分支和循环语句中的作用。</li></ol><blockquote><p>break 语句通常用在循环语句和开关语句中。</p><ol><li>当 break 用于开关语句 switch 中时，可使程序跳出 switch 而执行 switch 以后的语句；</li><li>当 break 语句用于 do-while、for、while 循环语句中时，可使程序终止循环。而执行循环后面的语句，通常 break 语句总是与 if 语句联在一起。即满足条件时便跳 出循环。</li></ol></blockquote><ol start=\"7\"><li>在什么情况下，可以使用死循环？</li></ol><blockquote><p>当循环条件永远为真时，但使用 break 关键字可以强行跳出循环体。</p></blockquote><h1 id=\"随堂练习\"><a class=\"anchor\" href=\"#随堂练习\">#</a> 随堂练习</h1><ol><li class=\"quiz\"><p>结构化程序由三种基本结构组成，不包括</p><ul class=\"options\"><li>顺序结构</li><li>选择结构</li><li class=\"correct\">控制结构</li><li>循环结构</li></ul></li><li class=\"quiz\"><p>下列语句中错误的是</p><ul class=\"options\"><li><code>if (a&gt;b) cout&lt;&lt;a;</code></li><li class=\"correct\"><code>if (&amp;&amp;) a=m;</code></li><li><code>if (1) a=m; else a=n;</code></li><li><code>if (a&gt;0); else a=n;</code></li></ul></li><li class=\"quiz true\"><p>与分支语句有关的关键词有 if、else、switch、case 和 break。</p></li><li class=\"quiz\"><p>若有定义 <code>float w;int a,b;</code> ，则合法的 switch 语句是</p><ul class=\"options\"><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">case</span> <span class=\"token number\">1.0</span><span class=\"token operator\">:</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">case</span> <span class=\"token number\">2.0</span><span class=\"token operator\">:</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"2.0\"</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure></li><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br></pre><pre class=\"code\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure></li><li class=\"correct\"><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br></pre><pre class=\"code\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">:</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure></li><li><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br></pre><pre class=\"code\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">:</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"1+2\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></pre></div></figure></li></ul></li><li class=\"quiz false\"><p>for 循环语句是先执行循环体内的语句序列，后判断条件表达式。</p></li><li class=\"quiz\"><p>下列程序段循环了几次</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br></pre></div></figure><ul class=\"options\"><li class=\"correct\">8</li><li>9</li><li>10</li><li>无限</li></ul><blockquote><p><code>++x</code> 到 0 时，即 false，跳出循环。<br>先 +1，再判断 x 的值，所以 while 的条件是从 x=8 开始的。<br><span class=\"mistake\">D</span></p></blockquote></li></ol><h1 id=\"单元测试\"><a class=\"anchor\" href=\"#单元测试\">#</a> 单元测试</h1><ol><li class=\"quiz\"><p>假定所有变量均已正确说明，下列程序段运行后，x 的值是 <span class=\"gap\"></span> 。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br></pre><pre class=\"code\">a<span class=\"token operator\">=</span>b<span class=\"token operator\">=</span>c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>x<span class=\"token operator\">=</span><span class=\"token number\">35</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>a<span class=\"token punctuation\">)</span>  x<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">else</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>  x<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">else</span>  x<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><br></pre></div></figure><ul class=\"options\"><li>35</li><li class=\"correct\">4</li><li>3</li><li>34</li></ul></li><li class=\"quiz\"><p>C++ 语言中 while 循环和 do...while 循环的主要区别是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li>while 的循环控制条件比 do...while 的循环控制条件严格</li><li class=\"correct\">do...while 的循环体至少无条件执行一次</li><li>do...while 允许从外部转到循环体内</li><li>do...while 的循环体不能是复合语句</li></ul></li><li class=\"quiz\"><p>while 后面的 “条件表达式” 一定要用一对 <span class=\"gap\"></span> 括起来。</p><ul class=\"options\"><li>双引号 <code>&quot; &quot;</code></li><li>花括号 <code>{ }</code></li><li>方括号 <code>[ ]</code></li><li class=\"correct\">圆括号 <code>( )</code></li></ul></li><li class=\"quiz\"><p>执行语句序列：</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">do</span><br><span class=\"token punctuation\">{</span><br>  x<span class=\"token operator\">-=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>  cout<span class=\"token operator\">&lt;&lt;</span>x<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></pre></div></figure><p>输出结果是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li class=\"correct\">1 -2</li><li>死循环</li><li>1</li><li>3 0</li></ul><blockquote><p><span class=\"mistake\">B</span></p></blockquote></li><li class=\"quiz\"><p>在 C++ 语言中，所谓选择结构，就是按照 <span class=\"gap\"></span> 有选择地执行程序中的语句。</p><ul class=\"options\"><li>给定符号</li><li>给定程序</li><li class=\"correct\">给定条件</li><li>给定数值</li></ul></li><li class=\"quiz\"><p>在 C++ 语言中，表示一条语句结束的标号是 <span class=\"gap\"></span> 。</p><ul class=\"options\"><li><code>//</code></li><li><code>}</code></li><li class=\"correct\"><code>;</code></li><li><code>#</code></li></ul></li><li class=\"quiz\"><p>下列程序段的输出是 <span class=\"gap\"></span> 。</p><figure class=\"highlight cpp\"><figcaption><span class=\"lang\">C++</span></figcaption><div class=\"code-container\"><pre class=\"gutter\">1<br>2<br>3<br>4<br>5<br>6<br></pre><pre class=\"code\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">&lt;</span>c<span class=\"token punctuation\">)</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">else</span><br>    c<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>cout<span class=\"token operator\">&lt;&lt;</span>c<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><br></pre></div></figure><ul class=\"options\"><li>1</li><li>0</li><li class=\"correct\">2</li><li>3</li></ul><blockquote><p><span class=\"mistake\">D，注意 else 对应的不是第一个，而是第二个，不要被缩进误导了</span></p></blockquote></li><li class=\"quiz true\"><p>当在程序中执行到 continue 语句时，将结束所在循环语句中循环体的一次执行。</p></li><li class=\"quiz true\"><p>当在程序中执行到 break 语句时，将结束本层循环类语句或 switch 语句的执行。</p></li><li class=\"quiz true\"><p>用 {} 括起来的语句叫复合语句。</p></li></ol>",
            "tags": [
                "计算机科学",
                "C++",
                "计算机程序设计（C++）-西安交通大学",
                "笔记"
            ]
        }
    ]
}